// @ts-nocheck
import { useMutation, useQuery, useSuspenseQuery, useInfiniteQuery, useSuspenseInfiniteQuery, UseMutationOptions, UseQueryOptions, UseSuspenseQueryOptions, UseInfiniteQueryOptions, InfiniteData, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';
import { fetcher } from '../fetcher';

/* template-start: disable-eslint */
/* eslint-disable */
/* template-end: disable-eslint */


/* template-start: common-scalars */
import type { CustomScalars } from '@w3yz/types';
/* template-end: common-scalars */

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type FieldWrapper<T> = T;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * The `Date` scalar type represents a Date
   * value as specified by
   * [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  Date: { input: string; output: string; }
  /**
   * The `DateTime` scalar type represents a DateTime
   * value as specified by
   * [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  DateTime: { input: string; output: string; }
  /** The `Day` scalar type represents number of days by integer value. */
  Day: { input: number; output: number; }
  /**
   * Custom Decimal implementation.
   *
   * Returns Decimal as a float in the API,
   * parses float to the Decimal on the way back.
   */
  Decimal: { input: number; output: number; }
  /**
   * The `GenericScalar` scalar type represents a generic
   * GraphQL scalar value that could be:
   * String, Boolean, Int, Float, List or Object.
   */
  GenericScalar: { input: CustomScalars["JSONValue"]; output: CustomScalars["JSONValue"]; }
  JSON: { input: CustomScalars["JSONValue"]; output: CustomScalars["JSONValue"]; }
  JSONString: { input: string; output: string; }
  /**
   * Metadata is a map of key-value pairs, both keys and values are `String`.
   *
   * Example:
   * ```
   * {
   *     "key1": "value1",
   *     "key2": "value2"
   * }
   * ```
   */
  Metadata: { input: Record<string, string>; output: Record<string, string>; }
  /** The `Minute` scalar type represents number of minutes by integer value. */
  Minute: { input: number; output: number; }
  /**
   * Nonnegative Decimal scalar implementation.
   *
   * Should be used in places where value must be nonnegative (0 or greater).
   */
  PositiveDecimal: { input: number; output: number; }
  UUID: { input: string; output: string; }
  /** Variables of this type must be set to null in mutations. They will be replaced with a filename from a following multipart part containing a binary file. See: https://github.com/jaydenseric/graphql-multipart-request-spec. */
  Upload: { input: CustomScalars["AnyObject"]; output: CustomScalars["AnyObject"]; }
  WeightScalar: { input: number; output: number; }
  /** _Any value scalar as defined by Federation spec. */
  _Any: { input: CustomScalars["AnyObject"]; output: CustomScalars["AnyObject"]; }
};

/**
 * Create a new address for the customer.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A customer account was updated.
 * - ADDRESS_CREATED (async): An address was created.
 */
export type SaleorGraphql_AccountAddressCreate = {
  __typename?: 'AccountAddressCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance for which the address was created. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Delete an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
 *
 * Triggers the following webhook events:
 * - ADDRESS_DELETED (async): An address was deleted.
 */
export type SaleorGraphql_AccountAddressDelete = {
  __typename?: 'AccountAddressDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance for which the address was deleted. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Updates an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
 *
 * Triggers the following webhook events:
 * - ADDRESS_UPDATED (async): An address was updated.
 */
export type SaleorGraphql_AccountAddressUpdate = {
  __typename?: 'AccountAddressUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user object for which the address was edited. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when account change email is requested.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountChangeEmailRequested = SaleorGraphql_Event & {
  __typename?: 'AccountChangeEmailRequested';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The new email address the user wants to change to. */
  newEmail?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when account confirmation requested. This event is always sent. enableAccountConfirmationByEmail flag set to True is not required.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountConfirmationRequested = SaleorGraphql_Event & {
  __typename?: 'AccountConfirmationRequested';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when account is confirmed.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountConfirmed = SaleorGraphql_Event & {
  __typename?: 'AccountConfirmed';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Remove user account.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - ACCOUNT_DELETED (async): Account was deleted.
 */
export type SaleorGraphql_AccountDelete = {
  __typename?: 'AccountDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when account delete is requested.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountDeleteRequested = SaleorGraphql_Event & {
  __typename?: 'AccountDeleteRequested';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when account is deleted.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountDeleted = SaleorGraphql_Event & {
  __typename?: 'AccountDeleted';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when account email is changed.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountEmailChanged = SaleorGraphql_Event & {
  __typename?: 'AccountEmailChanged';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The new email address. */
  newEmail?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents errors in account mutations. */
export type SaleorGraphql_AccountError = {
  __typename?: 'AccountError';
  /** A type of address that causes the error. */
  addressType?: Maybe<FieldWrapper<SaleorGraphql_AddressTypeEnum | '%future added value'>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AccountErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_AccountErrorCode {
  AccountNotConfirmed = 'ACCOUNT_NOT_CONFIRMED',
  ActivateOwnAccount = 'ACTIVATE_OWN_ACCOUNT',
  ActivateSuperuserAccount = 'ACTIVATE_SUPERUSER_ACCOUNT',
  ChannelInactive = 'CHANNEL_INACTIVE',
  DeactivateOwnAccount = 'DEACTIVATE_OWN_ACCOUNT',
  DeactivateSuperuserAccount = 'DEACTIVATE_SUPERUSER_ACCOUNT',
  DeleteNonStaffUser = 'DELETE_NON_STAFF_USER',
  DeleteOwnAccount = 'DELETE_OWN_ACCOUNT',
  DeleteStaffAccount = 'DELETE_STAFF_ACCOUNT',
  DeleteSuperuserAccount = 'DELETE_SUPERUSER_ACCOUNT',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Inactive = 'INACTIVE',
  Invalid = 'INVALID',
  InvalidCredentials = 'INVALID_CREDENTIALS',
  InvalidPassword = 'INVALID_PASSWORD',
  JwtDecodeError = 'JWT_DECODE_ERROR',
  JwtInvalidCsrfToken = 'JWT_INVALID_CSRF_TOKEN',
  JwtInvalidToken = 'JWT_INVALID_TOKEN',
  JwtMissingToken = 'JWT_MISSING_TOKEN',
  JwtSignatureExpired = 'JWT_SIGNATURE_EXPIRED',
  LeftNotManageablePermission = 'LEFT_NOT_MANAGEABLE_PERMISSION',
  MissingChannelSlug = 'MISSING_CHANNEL_SLUG',
  NotFound = 'NOT_FOUND',
  OutOfScopeGroup = 'OUT_OF_SCOPE_GROUP',
  OutOfScopePermission = 'OUT_OF_SCOPE_PERMISSION',
  OutOfScopeUser = 'OUT_OF_SCOPE_USER',
  PasswordEntirelyNumeric = 'PASSWORD_ENTIRELY_NUMERIC',
  PasswordResetAlreadyRequested = 'PASSWORD_RESET_ALREADY_REQUESTED',
  PasswordTooCommon = 'PASSWORD_TOO_COMMON',
  PasswordTooShort = 'PASSWORD_TOO_SHORT',
  PasswordTooSimilar = 'PASSWORD_TOO_SIMILAR',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

/** Fields required to update the user. */
export type SaleorGraphql_AccountInput = {
  /** Billing address of the customer. */
  defaultBillingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Shipping address of the customer. */
  defaultShippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User language code. */
  languageCode?: InputMaybe<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
};

/**
 * Register a new user.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_CREATED (async): A new customer account was created.
 * - NOTIFY_USER (async): A notification for account confirmation.
 * - ACCOUNT_CONFIRMATION_REQUESTED (async): An user confirmation was requested. This event is always sent regardless of settings.
 */
export type SaleorGraphql_AccountRegister = {
  __typename?: 'AccountRegister';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** Informs whether users need to confirm their email address. */
  requiresConfirmation?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Fields required to create a user. */
export type SaleorGraphql_AccountRegisterInput = {
  /** Slug of a channel which will be used to notify users. Optional when only one channel exists. */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** The email address of the user. */
  email: Scalars['String']['input'];
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User language code. */
  languageCode?: InputMaybe<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User public metadata. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Password. */
  password: Scalars['String']['input'];
  /** Base of frontend URL that will be needed to create confirmation URL. */
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Sends an email with the account removal link for the logged-in user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for account delete request.
 * - ACCOUNT_DELETE_REQUESTED (async): An account delete requested.
 */
export type SaleorGraphql_AccountRequestDeletion = {
  __typename?: 'AccountRequestDeletion';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
};

/**
 * Sets a default address for the authenticated user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A customer's address was updated.
 */
export type SaleorGraphql_AccountSetDefaultAddress = {
  __typename?: 'AccountSetDefaultAddress';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** An updated user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when setting a new password is requested.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_AccountSetPasswordRequested = SaleorGraphql_Event & {
  __typename?: 'AccountSetPasswordRequested';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Updates the account of the logged-in user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A customer account was updated.
 * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
 */
export type SaleorGraphql_AccountUpdate = {
  __typename?: 'AccountUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Represents user address data. */
export type SaleorGraphql_Address = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Address';
  /** The city of the address. */
  city: FieldWrapper<Scalars['String']['output']>;
  /** The district of the address. */
  cityArea: FieldWrapper<Scalars['String']['output']>;
  /** Company or organization name. */
  companyName: FieldWrapper<Scalars['String']['output']>;
  /** The country of the address. */
  country: FieldWrapper<SaleorGraphql_CountryDisplay>;
  /** The country area of the address. */
  countryArea: FieldWrapper<Scalars['String']['output']>;
  /** The given name of the address. */
  firstName: FieldWrapper<Scalars['String']['output']>;
  /** The ID of the address. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Address is user's default billing address. */
  isDefaultBillingAddress?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Address is user's default shipping address. */
  isDefaultShippingAddress?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** The family name of the address. */
  lastName: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of public metadata items. Can be accessed without permissions.
   *
   * Added in Saleor 3.10.
   */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.10.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.10.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The phone number assigned the address. */
  phone?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The postal code of the address. */
  postalCode: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of private metadata items. Requires staff permissions to access.
   *
   * Added in Saleor 3.10.
   */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.10.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.10.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The first line of the address. */
  streetAddress1: FieldWrapper<Scalars['String']['output']>;
  /** The second line of the address. */
  streetAddress2: FieldWrapper<Scalars['String']['output']>;
};


/** Represents user address data. */
export type SaleorGraphql_AddressMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents user address data. */
export type SaleorGraphql_AddressMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents user address data. */
export type SaleorGraphql_AddressPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents user address data. */
export type SaleorGraphql_AddressPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Creates user address.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - ADDRESS_CREATED (async): A new address was created.
 */
export type SaleorGraphql_AddressCreate = {
  __typename?: 'AddressCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance for which the address was created. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when new address is created.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AddressCreated = SaleorGraphql_Event & {
  __typename?: 'AddressCreated';
  /** The address the event relates to. */
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes an address.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - ADDRESS_DELETED (async): An address was deleted.
 */
export type SaleorGraphql_AddressDelete = {
  __typename?: 'AddressDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance for which the address was deleted. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when address is deleted.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AddressDeleted = SaleorGraphql_Event & {
  __typename?: 'AddressDeleted';
  /** The address the event relates to. */
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_AddressInput = {
  /** City. */
  city?: InputMaybe<Scalars['String']['input']>;
  /** District. */
  cityArea?: InputMaybe<Scalars['String']['input']>;
  /** Company or organization. */
  companyName?: InputMaybe<Scalars['String']['input']>;
  /** Country. */
  country?: InputMaybe<SaleorGraphql_CountryCode | '%future added value'>;
  /** State or province. */
  countryArea?: InputMaybe<Scalars['String']['input']>;
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * Address public metadata.
   *
   * Added in Saleor 3.15.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Phone number.
   *
   * Phone numbers are validated with Google's [libphonenumber](https://github.com/google/libphonenumber) library.
   */
  phone?: InputMaybe<Scalars['String']['input']>;
  /** Postal code. */
  postalCode?: InputMaybe<Scalars['String']['input']>;
  /** Address. */
  streetAddress1?: InputMaybe<Scalars['String']['input']>;
  /** Address. */
  streetAddress2?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Sets a default address for the given user.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A customer was updated.
 */
export type SaleorGraphql_AddressSetDefault = {
  __typename?: 'AddressSetDefault';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** An updated user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** An enumeration. */
export enum SaleorGraphql_AddressTypeEnum {
  Billing = 'BILLING',
  Shipping = 'SHIPPING'
}

/**
 * Updates an address.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - ADDRESS_UPDATED (async): An address was updated.
 */
export type SaleorGraphql_AddressUpdate = {
  __typename?: 'AddressUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user object for which the address was edited. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when address is updated.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AddressUpdated = SaleorGraphql_Event & {
  __typename?: 'AddressUpdated';
  /** The address the event relates to. */
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents address validation rules for a country. */
export type SaleorGraphql_AddressValidationData = {
  __typename?: 'AddressValidationData';
  /**
   * The address format of the address validation rule.
   *
   * Many fields in the JSON refer to address fields by one-letter abbreviations. These are defined as follows:
   *
   * - `N`: Name
   * - `O`: Organisation
   * - `A`: Street Address Line(s)
   * - `D`: Dependent locality (may be an inner-city district or a suburb)
   * - `C`: City or Locality
   * - `S`: Administrative area such as a state, province, island etc
   * - `Z`: Zip or postal code
   * - `X`: Sorting code
   *
   * [Click here for more information.](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata)
   */
  addressFormat: FieldWrapper<Scalars['String']['output']>;
  /**
   * The latin address format of the address validation rule.
   *
   * Many fields in the JSON refer to address fields by one-letter abbreviations. These are defined as follows:
   *
   * - `N`: Name
   * - `O`: Organisation
   * - `A`: Street Address Line(s)
   * - `D`: Dependent locality (may be an inner-city district or a suburb)
   * - `C`: City or Locality
   * - `S`: Administrative area such as a state, province, island etc
   * - `Z`: Zip or postal code
   * - `X`: Sorting code
   *
   * [Click here for more information.](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata)
   */
  addressLatinFormat: FieldWrapper<Scalars['String']['output']>;
  /** The allowed fields to use in address. */
  allowedFields: Array<FieldWrapper<Scalars['String']['output']>>;
  /** The available choices for the city area of the address validation rule. */
  cityAreaChoices: Array<FieldWrapper<SaleorGraphql_ChoiceValue>>;
  /** The formal name of the city area of the address validation rule. */
  cityAreaType: FieldWrapper<Scalars['String']['output']>;
  /** The available choices for the city of the address validation rule. */
  cityChoices: Array<FieldWrapper<SaleorGraphql_ChoiceValue>>;
  /** The formal name of the city of the address validation rule. */
  cityType: FieldWrapper<Scalars['String']['output']>;
  /** The available choices for the country area of the address validation rule. */
  countryAreaChoices: Array<FieldWrapper<SaleorGraphql_ChoiceValue>>;
  /** The formal name of the county area of the address validation rule. */
  countryAreaType: FieldWrapper<Scalars['String']['output']>;
  /** The country code of the address validation rule. */
  countryCode: FieldWrapper<Scalars['String']['output']>;
  /** The country name of the address validation rule. */
  countryName: FieldWrapper<Scalars['String']['output']>;
  /** The example postal code of the address validation rule. */
  postalCodeExamples: Array<FieldWrapper<Scalars['String']['output']>>;
  /** The regular expression for postal code validation. */
  postalCodeMatchers: Array<FieldWrapper<Scalars['String']['output']>>;
  /** The postal code prefix of the address validation rule. */
  postalCodePrefix: FieldWrapper<Scalars['String']['output']>;
  /** The formal name of the postal code of the address validation rule. */
  postalCodeType: FieldWrapper<Scalars['String']['output']>;
  /** The required fields to create a valid address. */
  requiredFields: Array<FieldWrapper<Scalars['String']['output']>>;
  /** The list of fields that should be in upper case for address validation rule. */
  upperFields: Array<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents allocation. */
export type SaleorGraphql_Allocation = SaleorGraphql_Node & {
  __typename?: 'Allocation';
  /** The ID of allocation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Quantity allocated for orders.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /**
   * The warehouse were items were allocated.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  warehouse: FieldWrapper<SaleorGraphql_Warehouse>;
};

/**
 * Determine the allocation strategy for the channel.
 *
 *     PRIORITIZE_SORTING_ORDER - allocate stocks according to the warehouses' order
 *     within the channel
 *
 *     PRIORITIZE_HIGH_STOCK - allocate stock in a warehouse with the most stock
 */
export enum SaleorGraphql_AllocationStrategyEnum {
  PrioritizeHighStock = 'PRIORITIZE_HIGH_STOCK',
  PrioritizeSortingOrder = 'PRIORITIZE_SORTING_ORDER'
}

/** Represents app data. */
export type SaleorGraphql_App = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'App';
  /** Description of this app. */
  aboutApp?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** JWT token used to authenticate by thridparty app. */
  accessToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** URL to iframe with the app. */
  appUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The App's author name.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  author?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * App's brand data.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  brand?: Maybe<FieldWrapper<SaleorGraphql_AppBrand>>;
  /**
   * URL to iframe with the configuration for the app.
   * @deprecated This field will be removed in Saleor 4.0. Use `appUrl` instead.
   */
  configurationUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The date and time when the app was created. */
  created?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * Description of the data privacy defined for this app.
   * @deprecated This field will be removed in Saleor 4.0. Use `dataPrivacyUrl` instead.
   */
  dataPrivacy?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** URL to details about the privacy policy on the app owner page. */
  dataPrivacyUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * App's dashboard extensions.
   *
   * Added in Saleor 3.1.
   */
  extensions: Array<FieldWrapper<SaleorGraphql_AppExtension>>;
  /** Homepage of the app. */
  homepageUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the app. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Canonical app ID from the manifest
   *
   * Added in Saleor 3.19.
   */
  identifier?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Determine if app will be set active or not. */
  isActive?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /**
   * URL to manifest used during app's installation.
   *
   * Added in Saleor 3.5.
   */
  manifestUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the app. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of the app's permissions. */
  permissions?: Maybe<Array<FieldWrapper<SaleorGraphql_Permission>>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Support page for the app. */
  supportUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Last 4 characters of the tokens.
   *
   * Requires one of the following permissions: MANAGE_APPS, OWNER.
   */
  tokens?: Maybe<Array<FieldWrapper<SaleorGraphql_AppToken>>>;
  /** Type of the app. */
  type?: Maybe<FieldWrapper<SaleorGraphql_AppTypeEnum | '%future added value'>>;
  /** Version number of the app. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of webhooks assigned to this app.
   *
   * Requires one of the following permissions: MANAGE_APPS, OWNER.
   */
  webhooks?: Maybe<Array<FieldWrapper<SaleorGraphql_Webhook>>>;
};


/** Represents app data. */
export type SaleorGraphql_AppMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents app data. */
export type SaleorGraphql_AppMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents app data. */
export type SaleorGraphql_AppPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents app data. */
export type SaleorGraphql_AppPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Activate the app.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 *
 * Triggers the following webhook events:
 * - APP_STATUS_CHANGED (async): An app was activated.
 */
export type SaleorGraphql_AppActivate = {
  __typename?: 'AppActivate';
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Represents the app's brand data.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AppBrand = {
  __typename?: 'AppBrand';
  /**
   * App's logos details.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  logo: FieldWrapper<SaleorGraphql_AppBrandLogo>;
};

/**
 * Represents the app's brand logo data.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AppBrandLogo = {
  __typename?: 'AppBrandLogo';
  /**
   * URL to the default logo image.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  default: FieldWrapper<Scalars['String']['output']>;
};


/**
 * Represents the app's brand logo data.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AppBrandLogoDefaultArgs = {
  format?: InputMaybe<SaleorGraphql_IconThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

export type SaleorGraphql_AppCountableConnection = {
  __typename?: 'AppCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_AppCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_AppCountableEdge = {
  __typename?: 'AppCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_App>;
};

/**
 * Creates a new app. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS.
 *
 * Triggers the following webhook events:
 * - APP_INSTALLED (async): An app was installed.
 */
export type SaleorGraphql_AppCreate = {
  __typename?: 'AppCreate';
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  /** The newly created authentication token. */
  authToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Deactivate the app.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 *
 * Triggers the following webhook events:
 * - APP_STATUS_CHANGED (async): An app was deactivated.
 */
export type SaleorGraphql_AppDeactivate = {
  __typename?: 'AppDeactivate';
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Deletes an app.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 *
 * Triggers the following webhook events:
 * - APP_DELETED (async): An app was deleted.
 */
export type SaleorGraphql_AppDelete = {
  __typename?: 'AppDelete';
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Delete failed installation.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 */
export type SaleorGraphql_AppDeleteFailedInstallation = {
  __typename?: 'AppDeleteFailedInstallation';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  appInstallation?: Maybe<FieldWrapper<SaleorGraphql_AppInstallation>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Event sent when app is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_AppDeleted = SaleorGraphql_Event & {
  __typename?: 'AppDeleted';
  /** The application the event relates to. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_AppError = {
  __typename?: 'AppError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AppErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of permissions which causes the error. */
  permissions?: Maybe<Array<FieldWrapper<SaleorGraphql_PermissionEnum | '%future added value'>>>;
};

/** An enumeration. */
export enum SaleorGraphql_AppErrorCode {
  Forbidden = 'FORBIDDEN',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidCustomHeaders = 'INVALID_CUSTOM_HEADERS',
  InvalidManifestFormat = 'INVALID_MANIFEST_FORMAT',
  InvalidPermission = 'INVALID_PERMISSION',
  InvalidStatus = 'INVALID_STATUS',
  InvalidUrlFormat = 'INVALID_URL_FORMAT',
  ManifestUrlCantConnect = 'MANIFEST_URL_CANT_CONNECT',
  NotFound = 'NOT_FOUND',
  OutOfScopeApp = 'OUT_OF_SCOPE_APP',
  OutOfScopePermission = 'OUT_OF_SCOPE_PERMISSION',
  Required = 'REQUIRED',
  Unique = 'UNIQUE',
  UnsupportedSaleorVersion = 'UNSUPPORTED_SALEOR_VERSION'
}

/** Represents app data. */
export type SaleorGraphql_AppExtension = SaleorGraphql_Node & {
  __typename?: 'AppExtension';
  /** JWT token used to authenticate by third-party app extension. */
  accessToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The app assigned to app extension. */
  app: FieldWrapper<SaleorGraphql_App>;
  /** The ID of the app extension. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Label of the extension to show in the dashboard. */
  label: FieldWrapper<Scalars['String']['output']>;
  /** Place where given extension will be mounted. */
  mount: FieldWrapper<SaleorGraphql_AppExtensionMountEnum | '%future added value'>;
  /** List of the app extension's permissions. */
  permissions: Array<FieldWrapper<SaleorGraphql_Permission>>;
  /** Type of way how app extension will be opened. */
  target: FieldWrapper<SaleorGraphql_AppExtensionTargetEnum | '%future added value'>;
  /** URL of a view where extension's iframe is placed. */
  url: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_AppExtensionCountableConnection = {
  __typename?: 'AppExtensionCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_AppExtensionCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_AppExtensionCountableEdge = {
  __typename?: 'AppExtensionCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_AppExtension>;
};

export type SaleorGraphql_AppExtensionFilterInput = {
  mount?: InputMaybe<Array<SaleorGraphql_AppExtensionMountEnum | '%future added value'>>;
  target?: InputMaybe<SaleorGraphql_AppExtensionTargetEnum | '%future added value'>;
};

/** All places where app extension can be mounted. */
export enum SaleorGraphql_AppExtensionMountEnum {
  CustomerDetailsMoreActions = 'CUSTOMER_DETAILS_MORE_ACTIONS',
  CustomerOverviewCreate = 'CUSTOMER_OVERVIEW_CREATE',
  CustomerOverviewMoreActions = 'CUSTOMER_OVERVIEW_MORE_ACTIONS',
  NavigationCatalog = 'NAVIGATION_CATALOG',
  NavigationCustomers = 'NAVIGATION_CUSTOMERS',
  NavigationDiscounts = 'NAVIGATION_DISCOUNTS',
  NavigationOrders = 'NAVIGATION_ORDERS',
  NavigationPages = 'NAVIGATION_PAGES',
  NavigationTranslations = 'NAVIGATION_TRANSLATIONS',
  OrderDetailsMoreActions = 'ORDER_DETAILS_MORE_ACTIONS',
  OrderOverviewCreate = 'ORDER_OVERVIEW_CREATE',
  OrderOverviewMoreActions = 'ORDER_OVERVIEW_MORE_ACTIONS',
  ProductDetailsMoreActions = 'PRODUCT_DETAILS_MORE_ACTIONS',
  ProductOverviewCreate = 'PRODUCT_OVERVIEW_CREATE',
  ProductOverviewMoreActions = 'PRODUCT_OVERVIEW_MORE_ACTIONS'
}

/**
 * All available ways of opening an app extension.
 *
 *     POPUP - app's extension will be mounted as a popup window
 *     APP_PAGE - redirect to app's page
 */
export enum SaleorGraphql_AppExtensionTargetEnum {
  AppPage = 'APP_PAGE',
  Popup = 'POPUP'
}

/**
 * Fetch and validate manifest.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 */
export type SaleorGraphql_AppFetchManifest = {
  __typename?: 'AppFetchManifest';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  /** The validated manifest. */
  manifest?: Maybe<FieldWrapper<SaleorGraphql_Manifest>>;
};

export type SaleorGraphql_AppFilterInput = {
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<SaleorGraphql_AppTypeEnum | '%future added value'>;
};

export type SaleorGraphql_AppInput = {
  /**
   * Canonical app ID. If not provided, the identifier will be generated based on app.id.
   *
   * Added in Saleor 3.19.
   */
  identifier?: InputMaybe<Scalars['String']['input']>;
  /** Name of the app. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** List of permission code names to assign to this app. */
  permissions?: InputMaybe<Array<SaleorGraphql_PermissionEnum | '%future added value'>>;
};

/** Install new app by using app manifest. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS. */
export type SaleorGraphql_AppInstall = {
  __typename?: 'AppInstall';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  appInstallation?: Maybe<FieldWrapper<SaleorGraphql_AppInstallation>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

export type SaleorGraphql_AppInstallInput = {
  /** Determine if app will be set active or not. */
  activateAfterInstallation?: InputMaybe<Scalars['Boolean']['input']>;
  /** Name of the app to install. */
  appName?: InputMaybe<Scalars['String']['input']>;
  /** URL to app's manifest in JSON format. */
  manifestUrl?: InputMaybe<Scalars['String']['input']>;
  /** List of permission code names to assign to this app. */
  permissions?: InputMaybe<Array<SaleorGraphql_PermissionEnum | '%future added value'>>;
};

/** Represents ongoing installation of app. */
export type SaleorGraphql_AppInstallation = SaleorGraphql_Job & SaleorGraphql_Node & {
  __typename?: 'AppInstallation';
  /** The name of the app installation. */
  appName: FieldWrapper<Scalars['String']['output']>;
  /**
   * App's brand data.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  brand?: Maybe<FieldWrapper<SaleorGraphql_AppBrand>>;
  /** Created date time of job in ISO 8601 format. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** The ID of the app installation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The URL address of manifest for the app installation. */
  manifestUrl: FieldWrapper<Scalars['String']['output']>;
  /** Job message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Job status. */
  status: FieldWrapper<SaleorGraphql_JobStatusEnum | '%future added value'>;
  /** Date time of job last update in ISO 8601 format. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
};

/**
 * Event sent when new app is installed.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_AppInstalled = SaleorGraphql_Event & {
  __typename?: 'AppInstalled';
  /** The application the event relates to. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Represents the app's manifest brand data.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AppManifestBrand = {
  __typename?: 'AppManifestBrand';
  /**
   * App's logos details.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  logo: FieldWrapper<SaleorGraphql_AppManifestBrandLogo>;
};

/**
 * Represents the app's manifest brand data.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AppManifestBrandLogo = {
  __typename?: 'AppManifestBrandLogo';
  /**
   * Data URL with a base64 encoded logo image.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  default: FieldWrapper<Scalars['String']['output']>;
};


/**
 * Represents the app's manifest brand data.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AppManifestBrandLogoDefaultArgs = {
  format?: InputMaybe<SaleorGraphql_IconThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

export type SaleorGraphql_AppManifestExtension = {
  __typename?: 'AppManifestExtension';
  /** Label of the extension to show in the dashboard. */
  label: FieldWrapper<Scalars['String']['output']>;
  /** Place where given extension will be mounted. */
  mount: FieldWrapper<SaleorGraphql_AppExtensionMountEnum | '%future added value'>;
  /** List of the app extension's permissions. */
  permissions: Array<FieldWrapper<SaleorGraphql_Permission>>;
  /** Type of way how app extension will be opened. */
  target: FieldWrapper<SaleorGraphql_AppExtensionTargetEnum | '%future added value'>;
  /** URL of a view where extension's iframe is placed. */
  url: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_AppManifestRequiredSaleorVersion = {
  __typename?: 'AppManifestRequiredSaleorVersion';
  /**
   * Required Saleor version as semver range.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  constraint: FieldWrapper<Scalars['String']['output']>;
  /**
   * Informs if the Saleor version matches the required one.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  satisfied: FieldWrapper<Scalars['Boolean']['output']>;
};

export type SaleorGraphql_AppManifestWebhook = {
  __typename?: 'AppManifestWebhook';
  /** The asynchronous events that webhook wants to subscribe. */
  asyncEvents?: Maybe<Array<FieldWrapper<SaleorGraphql_WebhookEventTypeAsyncEnum | '%future added value'>>>;
  /** The name of the webhook. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Subscription query of a webhook */
  query: FieldWrapper<Scalars['String']['output']>;
  /** The synchronous events that webhook wants to subscribe. */
  syncEvents?: Maybe<Array<FieldWrapper<SaleorGraphql_WebhookEventTypeSyncEnum | '%future added value'>>>;
  /** The url to receive the payload. */
  targetUrl: FieldWrapper<Scalars['String']['output']>;
};

/**
 * Retry failed installation of new app.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 *
 * Triggers the following webhook events:
 * - APP_INSTALLED (async): An app was installed.
 */
export type SaleorGraphql_AppRetryInstall = {
  __typename?: 'AppRetryInstall';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  appInstallation?: Maybe<FieldWrapper<SaleorGraphql_AppInstallation>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

export enum SaleorGraphql_AppSortField {
  /** Sort apps by creation date. */
  CreationDate = 'CREATION_DATE',
  /** Sort apps by name. */
  Name = 'NAME'
}

export type SaleorGraphql_AppSortingInput = {
  /** Specifies the direction in which to sort apps. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort apps by the selected field. */
  field: SaleorGraphql_AppSortField | '%future added value';
};

/**
 * Event sent when app status has changed.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_AppStatusChanged = SaleorGraphql_Event & {
  __typename?: 'AppStatusChanged';
  /** The application the event relates to. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents token data. */
export type SaleorGraphql_AppToken = SaleorGraphql_Node & {
  __typename?: 'AppToken';
  /** Last 4 characters of the token. */
  authToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the app token. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the authenticated token. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Creates a new token.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 */
export type SaleorGraphql_AppTokenCreate = {
  __typename?: 'AppTokenCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  appToken?: Maybe<FieldWrapper<SaleorGraphql_AppToken>>;
  /** The newly created authentication token. */
  authToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Deletes an authentication token assigned to app.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 */
export type SaleorGraphql_AppTokenDelete = {
  __typename?: 'AppTokenDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  appToken?: Maybe<FieldWrapper<SaleorGraphql_AppToken>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

export type SaleorGraphql_AppTokenInput = {
  /** ID of app. */
  app: Scalars['ID']['input'];
  /** Name of the token. */
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Verify provided app token. */
export type SaleorGraphql_AppTokenVerify = {
  __typename?: 'AppTokenVerify';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  /** Determine if token is valid or not. */
  valid: FieldWrapper<Scalars['Boolean']['output']>;
};

/** Enum determining type of your App. */
export enum SaleorGraphql_AppTypeEnum {
  /** Local Saleor App. The app is fully manageable from dashboard. You can change assigned permissions, add webhooks, or authentication token */
  Local = 'LOCAL',
  /** Third party external App. Installation is fully automated. Saleor uses a defined App manifest to gather all required information. */
  Thirdparty = 'THIRDPARTY'
}

/**
 * Updates an existing app.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 *
 * Triggers the following webhook events:
 * - APP_UPDATED (async): An app was updated.
 */
export type SaleorGraphql_AppUpdate = {
  __typename?: 'AppUpdate';
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  appErrors: Array<FieldWrapper<SaleorGraphql_AppError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AppError>>;
};

/**
 * Event sent when app is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_AppUpdated = SaleorGraphql_Event & {
  __typename?: 'AppUpdated';
  /** The application the event relates to. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_AreaUnitsEnum {
  SqCm = 'SQ_CM',
  SqDm = 'SQ_DM',
  SqFt = 'SQ_FT',
  SqInch = 'SQ_INCH',
  SqKm = 'SQ_KM',
  SqM = 'SQ_M',
  SqMm = 'SQ_MM',
  SqYd = 'SQ_YD'
}

/**
 * Assigns storefront's navigation menus.
 *
 * Requires one of the following permissions: MANAGE_MENUS, MANAGE_SETTINGS.
 */
export type SaleorGraphql_AssignNavigation = {
  __typename?: 'AssignNavigation';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** Assigned navigation menu. */
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

/**
 * Represents assigned attribute to variant with variant selection attached.
 *
 * Added in Saleor 3.1.
 */
export type SaleorGraphql_AssignedVariantAttribute = {
  __typename?: 'AssignedVariantAttribute';
  /** Attribute assigned to variant. */
  attribute: FieldWrapper<SaleorGraphql_Attribute>;
  /** Determines, whether assigned attribute is allowed for variant selection. Supported variant types for variant selection are: ['dropdown', 'boolean', 'swatch', 'numeric'] */
  variantSelection: FieldWrapper<Scalars['Boolean']['output']>;
};

/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_Attribute = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Attribute';
  /**
   * Whether the attribute can be displayed in the admin product list. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  availableInGrid: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of attribute's values. */
  choices?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueCountableConnection>>;
  /** The entity type which can be used as a reference. */
  entityType?: Maybe<FieldWrapper<SaleorGraphql_AttributeEntityTypeEnum | '%future added value'>>;
  /**
   * External ID of this attribute.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Whether the attribute can be filtered in dashboard. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. */
  filterableInDashboard: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Whether the attribute can be filtered in storefront. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  filterableInStorefront: FieldWrapper<Scalars['Boolean']['output']>;
  /** The ID of the attribute. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The input type to use for entering attribute values in the dashboard. */
  inputType?: Maybe<FieldWrapper<SaleorGraphql_AttributeInputTypeEnum | '%future added value'>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of an attribute displayed in the interface. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** A list of product types that use this attribute as a product attribute. */
  productTypes: FieldWrapper<SaleorGraphql_ProductTypeCountableConnection>;
  /** A list of product types that use this attribute as a product variant attribute. */
  productVariantTypes: FieldWrapper<SaleorGraphql_ProductTypeCountableConnection>;
  /** Internal representation of an attribute name. */
  slug?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The position of the attribute in the storefront navigation (0 by default). Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  storefrontSearchPosition: FieldWrapper<Scalars['Int']['output']>;
  /** Returns translated attribute fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_AttributeTranslation>>;
  /** The attribute type. */
  type?: Maybe<FieldWrapper<SaleorGraphql_AttributeTypeEnum | '%future added value'>>;
  /** The unit of attribute values. */
  unit?: Maybe<FieldWrapper<SaleorGraphql_MeasurementUnitsEnum | '%future added value'>>;
  /** Whether the attribute requires values to be passed or not. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. */
  valueRequired: FieldWrapper<Scalars['Boolean']['output']>;
  /** Whether the attribute should be visible or not in storefront. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. */
  visibleInStorefront: FieldWrapper<Scalars['Boolean']['output']>;
  /** Flag indicating that attribute has predefined choices. */
  withChoices: FieldWrapper<Scalars['Boolean']['output']>;
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributeChoicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_AttributeValueFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_AttributeChoicesSortingInput>;
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributeMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributeMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributeProductTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributeProductVariantTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Custom attribute of a product. Attributes can be assigned to products and variants at the product type level. */
export type SaleorGraphql_AttributeTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates attributes.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_CREATED (async): An attribute was created.
 */
export type SaleorGraphql_AttributeBulkCreate = {
  __typename?: 'AttributeBulkCreate';
  /** Returns how many objects were created. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeBulkCreateError>>;
  /** List of the created attributes. */
  results: Array<FieldWrapper<SaleorGraphql_AttributeBulkCreateResult>>;
};

export type SaleorGraphql_AttributeBulkCreateError = {
  __typename?: 'AttributeBulkCreateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AttributeBulkCreateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeBulkCreateErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  Blank = 'BLANK',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MaxLength = 'MAX_LENGTH',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_AttributeBulkCreateResult = {
  __typename?: 'AttributeBulkCreateResult';
  /** Attribute data. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** List of errors occurred on create attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_AttributeBulkCreateError>>>;
};

/**
 * Deletes attributes.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_DELETED (async): An attribute was deleted.
 */
export type SaleorGraphql_AttributeBulkDelete = {
  __typename?: 'AttributeBulkDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

/**
 * Creates/updates translations for attributes.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_AttributeBulkTranslate = {
  __typename?: 'AttributeBulkTranslate';
  /** Returns how many translations were created/updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeBulkTranslateError>>;
  /** List of the translations. */
  results: Array<FieldWrapper<SaleorGraphql_AttributeBulkTranslateResult>>;
};

export type SaleorGraphql_AttributeBulkTranslateError = {
  __typename?: 'AttributeBulkTranslateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AttributeTranslateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_AttributeBulkTranslateInput = {
  /** External reference of an attribute. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Attribute ID. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** Translation language code. */
  languageCode: SaleorGraphql_LanguageCodeEnum | '%future added value';
  /** Translation fields. */
  translationFields: SaleorGraphql_NameTranslationInput;
};

export type SaleorGraphql_AttributeBulkTranslateResult = {
  __typename?: 'AttributeBulkTranslateResult';
  /** List of errors occurred on translation attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_AttributeBulkTranslateError>>>;
  /** Attribute translation data. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_AttributeTranslation>>;
};

/**
 * Updates attributes.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_UPDATED (async): An attribute was updated. Optionally called when new attribute value was created or deleted.
 * - ATTRIBUTE_VALUE_CREATED (async): Called optionally when an attribute value was created.
 * - ATTRIBUTE_VALUE_DELETED (async): Called optionally when an attribute value was deleted.
 */
export type SaleorGraphql_AttributeBulkUpdate = {
  __typename?: 'AttributeBulkUpdate';
  /** Returns how many objects were updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeBulkUpdateError>>;
  /** List of the updated attributes. */
  results: Array<FieldWrapper<SaleorGraphql_AttributeBulkUpdateResult>>;
};

export type SaleorGraphql_AttributeBulkUpdateError = {
  __typename?: 'AttributeBulkUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AttributeBulkUpdateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeBulkUpdateErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  Blank = 'BLANK',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MaxLength = 'MAX_LENGTH',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_AttributeBulkUpdateInput = {
  /** External ID of this attribute. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Fields to update. */
  fields: SaleorGraphql_AttributeUpdateInput;
  /** ID of an attribute to update. */
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SaleorGraphql_AttributeBulkUpdateResult = {
  __typename?: 'AttributeBulkUpdateResult';
  /** Attribute data. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** List of errors occurred on update attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_AttributeBulkUpdateError>>>;
};

export enum SaleorGraphql_AttributeChoicesSortField {
  /** Sort attribute choice by name. */
  Name = 'NAME',
  /** Sort attribute choice by slug. */
  Slug = 'SLUG'
}

export type SaleorGraphql_AttributeChoicesSortingInput = {
  /** Specifies the direction in which to sort attribute choices. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort attribute choices by the selected field. */
  field: SaleorGraphql_AttributeChoicesSortField | '%future added value';
};

export type SaleorGraphql_AttributeCountableConnection = {
  __typename?: 'AttributeCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_AttributeCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_AttributeCountableEdge = {
  __typename?: 'AttributeCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Attribute>;
};

/**
 * Creates an attribute.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_CREATED (async): An attribute was created.
 */
export type SaleorGraphql_AttributeCreate = {
  __typename?: 'AttributeCreate';
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

/**
 * Represents an input for create of attribute.
 *
 * NOTE: Deprecated fields `filterableInStorefront`, `storefrontSearchPosition` and `availableInGrid` are not supported in bulk mutations: `attributeBulkCreate`, `attributeBulkUpdate`.
 */
export type SaleorGraphql_AttributeCreateInput = {
  /**
   * Whether the attribute can be displayed in the admin product list.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  availableInGrid?: InputMaybe<Scalars['Boolean']['input']>;
  /** The entity type which can be used as a reference. */
  entityType?: InputMaybe<SaleorGraphql_AttributeEntityTypeEnum | '%future added value'>;
  /**
   * External ID of this attribute.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Whether the attribute can be filtered in dashboard. */
  filterableInDashboard?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Whether the attribute can be filtered in storefront.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  filterableInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input type to use for entering attribute values in the dashboard. */
  inputType?: InputMaybe<SaleorGraphql_AttributeInputTypeEnum | '%future added value'>;
  /** Whether the attribute is for variants only. */
  isVariantOnly?: InputMaybe<Scalars['Boolean']['input']>;
  /** Name of an attribute displayed in the interface. */
  name: Scalars['String']['input'];
  /** Internal representation of an attribute name. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /**
   * The position of the attribute in the storefront navigation (0 by default).
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  storefrontSearchPosition?: InputMaybe<Scalars['Int']['input']>;
  /** The attribute type. */
  type: SaleorGraphql_AttributeTypeEnum | '%future added value';
  /** The unit of attribute values. */
  unit?: InputMaybe<SaleorGraphql_MeasurementUnitsEnum | '%future added value'>;
  /** Whether the attribute requires values to be passed or not. */
  valueRequired?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of attribute's values. */
  values?: InputMaybe<Array<SaleorGraphql_AttributeValueCreateInput>>;
  /** Whether the attribute should be visible or not in storefront. */
  visibleInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Event sent when new attribute is created.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AttributeCreated = SaleorGraphql_Event & {
  __typename?: 'AttributeCreated';
  /** The attribute the event relates to. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes an attribute.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_DELETED (async): An attribute was deleted.
 */
export type SaleorGraphql_AttributeDelete = {
  __typename?: 'AttributeDelete';
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

/**
 * Event sent when attribute is deleted.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AttributeDeleted = SaleorGraphql_Event & {
  __typename?: 'AttributeDeleted';
  /** The attribute the event relates to. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeEntityTypeEnum {
  Page = 'PAGE',
  Product = 'PRODUCT',
  ProductVariant = 'PRODUCT_VARIANT'
}

export type SaleorGraphql_AttributeEntityTypeEnumFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<SaleorGraphql_AttributeEntityTypeEnum | '%future added value'>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<SaleorGraphql_AttributeEntityTypeEnum | '%future added value'>>;
};

export type SaleorGraphql_AttributeError = {
  __typename?: 'AttributeError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AttributeErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_AttributeFilterInput = {
  availableInGrid?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Specifies the channel by which the data should be filtered.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  filterableInDashboard?: InputMaybe<Scalars['Boolean']['input']>;
  filterableInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  inCategory?: InputMaybe<Scalars['ID']['input']>;
  inCollection?: InputMaybe<Scalars['ID']['input']>;
  isVariantOnly?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
  type?: InputMaybe<SaleorGraphql_AttributeTypeEnum | '%future added value'>;
  valueRequired?: InputMaybe<Scalars['Boolean']['input']>;
  visibleInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_AttributeInput = {
  /** The boolean value of the attribute. */
  boolean?: InputMaybe<Scalars['Boolean']['input']>;
  /** The date range that the returned values should be in. In case of date/time attributes, the UTC midnight of the given date is used. */
  date?: InputMaybe<SaleorGraphql_DateRangeInput>;
  /** The date/time range that the returned values should be in. */
  dateTime?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
  /** Internal representation of an attribute name. */
  slug: Scalars['String']['input'];
  /** Internal representation of a value (unique per attribute). */
  values?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The range that the returned values should be in. */
  valuesRange?: InputMaybe<SaleorGraphql_IntRangeInput>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeInputTypeEnum {
  Boolean = 'BOOLEAN',
  Date = 'DATE',
  DateTime = 'DATE_TIME',
  Dropdown = 'DROPDOWN',
  File = 'FILE',
  Multiselect = 'MULTISELECT',
  Numeric = 'NUMERIC',
  PlainText = 'PLAIN_TEXT',
  Reference = 'REFERENCE',
  RichText = 'RICH_TEXT',
  Swatch = 'SWATCH'
}

export type SaleorGraphql_AttributeInputTypeEnumFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<SaleorGraphql_AttributeInputTypeEnum | '%future added value'>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<SaleorGraphql_AttributeInputTypeEnum | '%future added value'>>;
};

/**
 * Reorder the values of an attribute.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_VALUE_UPDATED (async): An attribute value was updated.
 * - ATTRIBUTE_UPDATED (async): An attribute was updated.
 */
export type SaleorGraphql_AttributeReorderValues = {
  __typename?: 'AttributeReorderValues';
  /** Attribute from which values are reordered. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

export enum SaleorGraphql_AttributeSortField {
  /** Sort attributes based on whether they can be displayed or not in a product grid. */
  AvailableInGrid = 'AVAILABLE_IN_GRID',
  /** Sort attributes by the filterable in dashboard flag */
  FilterableInDashboard = 'FILTERABLE_IN_DASHBOARD',
  /** Sort attributes by the filterable in storefront flag */
  FilterableInStorefront = 'FILTERABLE_IN_STOREFRONT',
  /** Sort attributes by the variant only flag */
  IsVariantOnly = 'IS_VARIANT_ONLY',
  /** Sort attributes by name */
  Name = 'NAME',
  /** Sort attributes by slug */
  Slug = 'SLUG',
  /** Sort attributes by their position in storefront */
  StorefrontSearchPosition = 'STOREFRONT_SEARCH_POSITION',
  /** Sort attributes by the value required flag */
  ValueRequired = 'VALUE_REQUIRED',
  /** Sort attributes by visibility in the storefront */
  VisibleInStorefront = 'VISIBLE_IN_STOREFRONT'
}

export type SaleorGraphql_AttributeSortingInput = {
  /** Specifies the direction in which to sort attributes. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort attributes by the selected field. */
  field: SaleorGraphql_AttributeSortField | '%future added value';
};

/** Represents attribute's original translatable fields and related translations. */
export type SaleorGraphql_AttributeTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'AttributeTranslatableContent';
  /**
   * Custom attribute of a product.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /**
   * The ID of the attribute to translate.
   *
   * Added in Saleor 3.14.
   */
  attributeId: FieldWrapper<Scalars['ID']['output']>;
  /** The ID of the attribute translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the attribute to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Returns translated attribute fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_AttributeTranslation>>;
};


/** Represents attribute's original translatable fields and related translations. */
export type SaleorGraphql_AttributeTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for an attribute.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_AttributeTranslate = {
  __typename?: 'AttributeTranslate';
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeTranslateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

/** Represents attribute translations. */
export type SaleorGraphql_AttributeTranslation = SaleorGraphql_Node & {
  __typename?: 'AttributeTranslation';
  /** The ID of the attribute translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated attribute name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Represents the attribute fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_AttributeTranslatableContent>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeTypeEnum {
  PageType = 'PAGE_TYPE',
  ProductType = 'PRODUCT_TYPE'
}

export type SaleorGraphql_AttributeTypeEnumFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<SaleorGraphql_AttributeTypeEnum | '%future added value'>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<SaleorGraphql_AttributeTypeEnum | '%future added value'>>;
};

/**
 * Updates attribute.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_UPDATED (async): An attribute was updated.
 */
export type SaleorGraphql_AttributeUpdate = {
  __typename?: 'AttributeUpdate';
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

/**
 * Represents an input for update of attribute.
 *
 * NOTE: Deprecated fields `filterableInStorefront`, `storefrontSearchPosition` and `availableInGrid` are not supported in bulk mutations: `attributeBulkCreate`, `attributeBulkUpdate`.
 */
export type SaleorGraphql_AttributeUpdateInput = {
  /** New values to be created for this attribute. */
  addValues?: InputMaybe<Array<SaleorGraphql_AttributeValueUpdateInput>>;
  /**
   * Whether the attribute can be displayed in the admin product list.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  availableInGrid?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * External ID of this product.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Whether the attribute can be filtered in dashboard. */
  filterableInDashboard?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Whether the attribute can be filtered in storefront.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  filterableInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether the attribute is for variants only. */
  isVariantOnly?: InputMaybe<Scalars['Boolean']['input']>;
  /** Name of an attribute displayed in the interface. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** IDs of values to be removed from this attribute. */
  removeValues?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Internal representation of an attribute name. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /**
   * The position of the attribute in the storefront navigation (0 by default).
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  storefrontSearchPosition?: InputMaybe<Scalars['Int']['input']>;
  /** The unit of attribute values. */
  unit?: InputMaybe<SaleorGraphql_MeasurementUnitsEnum | '%future added value'>;
  /** Whether the attribute requires values to be passed or not. */
  valueRequired?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether the attribute should be visible or not in storefront. */
  visibleInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Event sent when attribute is updated.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AttributeUpdated = SaleorGraphql_Event & {
  __typename?: 'AttributeUpdated';
  /** The attribute the event relates to. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents a value of an attribute. */
export type SaleorGraphql_AttributeValue = SaleorGraphql_Node & {
  __typename?: 'AttributeValue';
  /** Represents the boolean value of the attribute value. */
  boolean?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Represents the date value of the attribute value. */
  date?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /** Represents the date/time value of the attribute value. */
  dateTime?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * External ID of this attribute value.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Represents file URL and content type (if attribute value is a file). */
  file?: Maybe<FieldWrapper<SaleorGraphql_File>>;
  /** The ID of the attribute value. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The input type to use for entering attribute values in the dashboard. */
  inputType?: Maybe<FieldWrapper<SaleorGraphql_AttributeInputTypeEnum | '%future added value'>>;
  /** Name of a value displayed in the interface. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Represents the text of the attribute value, plain text without formating. */
  plainText?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the attribute reference. */
  reference?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /**
   * Represents the text of the attribute value, includes formatting.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  richText?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** Internal representation of a value (unique per attribute). */
  slug?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Returns translated attribute value fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueTranslation>>;
  /** Represent value of the attribute value (e.g. color values for swatch attributes). */
  value?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/** Represents a value of an attribute. */
export type SaleorGraphql_AttributeValueTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Deletes values of attributes.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_VALUE_DELETED (async): An attribute value was deleted.
 * - ATTRIBUTE_UPDATED (async): An attribute was updated.
 */
export type SaleorGraphql_AttributeValueBulkDelete = {
  __typename?: 'AttributeValueBulkDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

/**
 * Creates/updates translations for attributes values.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_AttributeValueBulkTranslate = {
  __typename?: 'AttributeValueBulkTranslate';
  /** Returns how many translations were created/updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeValueBulkTranslateError>>;
  /** List of the translations. */
  results: Array<FieldWrapper<SaleorGraphql_AttributeValueBulkTranslateResult>>;
};

export type SaleorGraphql_AttributeValueBulkTranslateError = {
  __typename?: 'AttributeValueBulkTranslateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AttributeValueTranslateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_AttributeValueBulkTranslateInput = {
  /** External reference of an attribute value. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Attribute value ID. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** Translation language code. */
  languageCode: SaleorGraphql_LanguageCodeEnum | '%future added value';
  /** Translation fields. */
  translationFields: SaleorGraphql_AttributeValueTranslationInput;
};

export type SaleorGraphql_AttributeValueBulkTranslateResult = {
  __typename?: 'AttributeValueBulkTranslateResult';
  /** List of errors occurred on translation attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_AttributeValueBulkTranslateError>>>;
  /** Attribute value translation data. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueTranslation>>;
};

export type SaleorGraphql_AttributeValueCountableConnection = {
  __typename?: 'AttributeValueCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_AttributeValueCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_AttributeValueCountableEdge = {
  __typename?: 'AttributeValueCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_AttributeValue>;
};

/**
 * Creates a value for an attribute.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_VALUE_CREATED (async): An attribute value was created.
 * - ATTRIBUTE_UPDATED (async): An attribute was updated.
 */
export type SaleorGraphql_AttributeValueCreate = {
  __typename?: 'AttributeValueCreate';
  /** The updated attribute. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

export type SaleorGraphql_AttributeValueCreateInput = {
  /** File content type. */
  contentType?: InputMaybe<Scalars['String']['input']>;
  /**
   * External ID of this attribute value.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** URL of the file attribute. Every time, a new value is created. */
  fileUrl?: InputMaybe<Scalars['String']['input']>;
  /** Name of a value displayed in the interface. */
  name: Scalars['String']['input'];
  /**
   * Represents the text of the attribute value, plain text without formating.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.The plain text attribute hasn't got predefined value, so can be specified only from instance that supports the given attribute.
   */
  plainText?: InputMaybe<Scalars['String']['input']>;
  /**
   * Represents the text of the attribute value, includes formatting.
   *
   * Rich text format. For reference see https://editorjs.io/
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.The rich text attribute hasn't got predefined value, so can be specified only from instance that supports the given attribute.
   */
  richText?: InputMaybe<Scalars['JSONString']['input']>;
  /** Represent value of the attribute value (e.g. color values for swatch attributes). */
  value?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new attribute value is created.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AttributeValueCreated = SaleorGraphql_Event & {
  __typename?: 'AttributeValueCreated';
  /** The attribute value the event relates to. */
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a value of an attribute.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_VALUE_DELETED (async): An attribute value was deleted.
 * - ATTRIBUTE_UPDATED (async): An attribute was updated.
 */
export type SaleorGraphql_AttributeValueDelete = {
  __typename?: 'AttributeValueDelete';
  /** The updated attribute. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

/**
 * Event sent when attribute value is deleted.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AttributeValueDeleted = SaleorGraphql_Event & {
  __typename?: 'AttributeValueDeleted';
  /** The attribute value the event relates to. */
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_AttributeValueFilterInput = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_AttributeValueInput = {
  /** Represents the boolean value of the attribute value. */
  boolean?: InputMaybe<Scalars['Boolean']['input']>;
  /** File content type. */
  contentType?: InputMaybe<Scalars['String']['input']>;
  /** Represents the date value of the attribute value. */
  date?: InputMaybe<Scalars['Date']['input']>;
  /** Represents the date/time value of the attribute value. */
  dateTime?: InputMaybe<Scalars['DateTime']['input']>;
  /**
   * Attribute value ID or external reference.
   *
   * Added in Saleor 3.9.
   */
  dropdown?: InputMaybe<SaleorGraphql_AttributeValueSelectableTypeInput>;
  /**
   * External ID of this attribute.
   *
   * Added in Saleor 3.14.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** URL of the file attribute. Every time, a new value is created. */
  file?: InputMaybe<Scalars['String']['input']>;
  /** ID of the selected attribute. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /**
   * List of attribute value IDs or external references.
   *
   * Added in Saleor 3.9.
   */
  multiselect?: InputMaybe<Array<SaleorGraphql_AttributeValueSelectableTypeInput>>;
  /**
   * Numeric value of an attribute.
   *
   * Added in Saleor 3.9.
   */
  numeric?: InputMaybe<Scalars['String']['input']>;
  /** Plain text content. */
  plainText?: InputMaybe<Scalars['String']['input']>;
  /** List of entity IDs that will be used as references. */
  references?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Text content in JSON format. */
  richText?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * Attribute value ID or external reference.
   *
   * Added in Saleor 3.9.
   */
  swatch?: InputMaybe<SaleorGraphql_AttributeValueSelectableTypeInput>;
  /** The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created. This field will be removed in Saleor 4.0. */
  values?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Represents attribute value.
 * 1. If ID is provided, then attribute value will be resolved by ID.
 * 2. If externalReference is provided, then attribute value will be resolved by external reference.
 * 3. If value is provided, then attribute value will be resolved by value. If this attribute value doesn't exist, then it will be created.
 * 4. If externalReference and value is provided then new attribute value will be created.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_AttributeValueSelectableTypeInput = {
  /**
   * External reference of an attribute value.
   *
   * Added in Saleor 3.14.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** ID of an attribute value. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created. */
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Represents attribute value's original translatable fields and related translations. */
export type SaleorGraphql_AttributeValueTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'AttributeValueTranslatableContent';
  /**
   * Associated attribute that can be translated.
   *
   * Added in Saleor 3.9.
   */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_AttributeTranslatableContent>>;
  /**
   * Represents a value of an attribute.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  /**
   * The ID of the attribute value to translate.
   *
   * Added in Saleor 3.14.
   */
  attributeValueId: FieldWrapper<Scalars['ID']['output']>;
  /** The ID of the attribute value translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the attribute value to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Attribute plain text value. */
  plainText?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Attribute value.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  richText?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** Returns translated attribute value fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueTranslation>>;
};


/** Represents attribute value's original translatable fields and related translations. */
export type SaleorGraphql_AttributeValueTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for an attribute value.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_AttributeValueTranslate = {
  __typename?: 'AttributeValueTranslate';
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** An enumeration. */
export enum SaleorGraphql_AttributeValueTranslateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

/** Represents attribute value translations. */
export type SaleorGraphql_AttributeValueTranslation = SaleorGraphql_Node & {
  __typename?: 'AttributeValueTranslation';
  /** The ID of the attribute value translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated attribute value name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Translated plain text attribute value . */
  plainText?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Translated rich-text attribute value.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  richText?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Represents the attribute value fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueTranslatableContent>>;
};

export type SaleorGraphql_AttributeValueTranslationInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  /** Translated text. */
  plainText?: InputMaybe<Scalars['String']['input']>;
  /**
   * Translated text.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  richText?: InputMaybe<Scalars['JSONString']['input']>;
};

/**
 * Updates value of an attribute.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 *
 * Triggers the following webhook events:
 * - ATTRIBUTE_VALUE_UPDATED (async): An attribute value was updated.
 * - ATTRIBUTE_UPDATED (async): An attribute was updated.
 */
export type SaleorGraphql_AttributeValueUpdate = {
  __typename?: 'AttributeValueUpdate';
  /** The updated attribute. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  attributeErrors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  errors: Array<FieldWrapper<SaleorGraphql_AttributeError>>;
};

export type SaleorGraphql_AttributeValueUpdateInput = {
  /** File content type. */
  contentType?: InputMaybe<Scalars['String']['input']>;
  /**
   * External ID of this attribute value.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** URL of the file attribute. Every time, a new value is created. */
  fileUrl?: InputMaybe<Scalars['String']['input']>;
  /** Name of a value displayed in the interface. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Represents the text of the attribute value, plain text without formating.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.The plain text attribute hasn't got predefined value, so can be specified only from instance that supports the given attribute.
   */
  plainText?: InputMaybe<Scalars['String']['input']>;
  /**
   * Represents the text of the attribute value, includes formatting.
   *
   * Rich text format. For reference see https://editorjs.io/
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.The rich text attribute hasn't got predefined value, so can be specified only from instance that supports the given attribute.
   */
  richText?: InputMaybe<Scalars['JSONString']['input']>;
  /** Represent value of the attribute value (e.g. color values for swatch attributes). */
  value?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when attribute value is updated.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_AttributeValueUpdated = SaleorGraphql_Event & {
  __typename?: 'AttributeValueUpdated';
  /** The attribute value the event relates to. */
  attributeValue?: Maybe<FieldWrapper<SaleorGraphql_AttributeValue>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Where filtering options.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_AttributeWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_AttributeWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_AttributeWhereInput>>;
  entityType?: InputMaybe<SaleorGraphql_AttributeEntityTypeEnumFilterInput>;
  filterableInDashboard?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  inCategory?: InputMaybe<Scalars['ID']['input']>;
  inCollection?: InputMaybe<Scalars['ID']['input']>;
  inputType?: InputMaybe<SaleorGraphql_AttributeInputTypeEnumFilterInput>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  name?: InputMaybe<SaleorGraphql_StringFilterInput>;
  slug?: InputMaybe<SaleorGraphql_StringFilterInput>;
  type?: InputMaybe<SaleorGraphql_AttributeTypeEnumFilterInput>;
  unit?: InputMaybe<SaleorGraphql_MeasurementUnitsEnumFilterInput>;
  valueRequired?: InputMaybe<Scalars['Boolean']['input']>;
  visibleInStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  withChoices?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_BulkAttributeValueInput = {
  /** The boolean value of an attribute to resolve. If the passed value is non-existent, it will be created. */
  boolean?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * File content type.
   *
   * Added in Saleor 3.12.
   */
  contentType?: InputMaybe<Scalars['String']['input']>;
  /**
   * Represents the date value of the attribute value.
   *
   * Added in Saleor 3.12.
   */
  date?: InputMaybe<Scalars['Date']['input']>;
  /**
   * Represents the date/time value of the attribute value.
   *
   * Added in Saleor 3.12.
   */
  dateTime?: InputMaybe<Scalars['DateTime']['input']>;
  /**
   * Attribute value ID.
   *
   * Added in Saleor 3.12.
   */
  dropdown?: InputMaybe<SaleorGraphql_AttributeValueSelectableTypeInput>;
  /**
   * External ID of this attribute.
   *
   * Added in Saleor 3.14.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * URL of the file attribute. Every time, a new value is created.
   *
   * Added in Saleor 3.12.
   */
  file?: InputMaybe<Scalars['String']['input']>;
  /** ID of the selected attribute. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /**
   * List of attribute value IDs.
   *
   * Added in Saleor 3.12.
   */
  multiselect?: InputMaybe<Array<SaleorGraphql_AttributeValueSelectableTypeInput>>;
  /**
   * Numeric value of an attribute.
   *
   * Added in Saleor 3.12.
   */
  numeric?: InputMaybe<Scalars['String']['input']>;
  /**
   * Plain text content.
   *
   * Added in Saleor 3.12.
   */
  plainText?: InputMaybe<Scalars['String']['input']>;
  /**
   * List of entity IDs that will be used as references.
   *
   * Added in Saleor 3.12.
   */
  references?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Text content in JSON format.
   *
   * Added in Saleor 3.12.
   */
  richText?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * Attribute value ID.
   *
   * Added in Saleor 3.12.
   */
  swatch?: InputMaybe<SaleorGraphql_AttributeValueSelectableTypeInput>;
  /** The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created.This field will be removed in Saleor 4.0. */
  values?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_BulkProductError = {
  __typename?: 'BulkProductError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of channel IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Index of an input list item that caused the error. */
  index?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of warehouse IDs which causes the error. */
  warehouses?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

export type SaleorGraphql_BulkStockError = {
  __typename?: 'BulkStockError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Index of an input list item that caused the error. */
  index?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/**
 * Synchronous webhook for calculating checkout/order taxes.
 *
 * Added in Saleor 3.7.
 */
export type SaleorGraphql_CalculateTaxes = SaleorGraphql_Event & {
  __typename?: 'CalculateTaxes';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  taxBase: FieldWrapper<SaleorGraphql_TaxableObject>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_CardInput = {
  /** Payment method nonce, a token returned by the appropriate provider's SDK. */
  code: Scalars['String']['input'];
  /** Card security code. */
  cvc?: InputMaybe<Scalars['String']['input']>;
  /** Information about currency and amount. */
  money: SaleorGraphql_MoneyInput;
};

export type SaleorGraphql_CatalogueInput = {
  /** Categories related to the discount. */
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Collections related to the discount. */
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Products related to the discount. */
  products?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Product variant related to the discount.
   *
   * Added in Saleor 3.1.
   */
  variants?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type SaleorGraphql_CataloguePredicateInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_CataloguePredicateInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_CataloguePredicateInput>>;
  /** Defines the category conditions to be met. */
  categoryPredicate?: InputMaybe<SaleorGraphql_CategoryWhereInput>;
  /** Defines the collection conditions to be met. */
  collectionPredicate?: InputMaybe<SaleorGraphql_CollectionWhereInput>;
  /** Defines the product conditions to be met. */
  productPredicate?: InputMaybe<SaleorGraphql_ProductWhereInput>;
  /** Defines the product variant conditions to be met. */
  variantPredicate?: InputMaybe<SaleorGraphql_ProductVariantWhereInput>;
};

/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_Category = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Category';
  /** List of ancestors of the category. */
  ancestors?: Maybe<FieldWrapper<SaleorGraphql_CategoryCountableConnection>>;
  /** Background image of the category. */
  backgroundImage?: Maybe<FieldWrapper<SaleorGraphql_Image>>;
  /** List of children of the category. */
  children?: Maybe<FieldWrapper<SaleorGraphql_CategoryCountableConnection>>;
  /**
   * Description of the category.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Description of the category.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the category. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Level of the category. */
  level: FieldWrapper<Scalars['Int']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of category */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Parent category. */
  parent?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of products in the category. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  products?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /** SEO description of category. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title of category. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Slug of the category. */
  slug: FieldWrapper<Scalars['String']['output']>;
  /** Returns translated category fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_CategoryTranslation>>;
  /**
   * The date and time when the category was last updated.
   *
   * Added in Saleor 3.17.
   */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryBackgroundImageArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ProductFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_ProductOrder>;
  where?: InputMaybe<SaleorGraphql_ProductWhereInput>;
};


/** Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront. */
export type SaleorGraphql_CategoryTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Deletes categories.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CategoryBulkDelete = {
  __typename?: 'CategoryBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_CategoryCountableConnection = {
  __typename?: 'CategoryCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_CategoryCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_CategoryCountableEdge = {
  __typename?: 'CategoryCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Category>;
};

/**
 * Creates a new category.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CategoryCreate = {
  __typename?: 'CategoryCreate';
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Event sent when new category is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CategoryCreated = SaleorGraphql_Event & {
  __typename?: 'CategoryCreated';
  /** The category the event relates to. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a category.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CategoryDelete = {
  __typename?: 'CategoryDelete';
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Event sent when category is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CategoryDeleted = SaleorGraphql_Event & {
  __typename?: 'CategoryDeleted';
  /** The category the event relates to. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_CategoryFilterInput = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
  /**
   * Filter by when was the most recent update.
   *
   * Added in Saleor 3.17.
   */
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

export type SaleorGraphql_CategoryInput = {
  /** Background image file. */
  backgroundImage?: InputMaybe<Scalars['Upload']['input']>;
  /** Alt text for a product media. */
  backgroundImageAlt?: InputMaybe<Scalars['String']['input']>;
  /**
   * Category description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * Fields required to update the category metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Category name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the category private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Category slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

export enum SaleorGraphql_CategorySortField {
  /** Sort categories by name. */
  Name = 'NAME',
  /** Sort categories by product count. */
  ProductCount = 'PRODUCT_COUNT',
  /** Sort categories by subcategory count. */
  SubcategoryCount = 'SUBCATEGORY_COUNT'
}

export type SaleorGraphql_CategorySortingInput = {
  /**
   * Specifies the channel in which to sort the data.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** Specifies the direction in which to sort categories. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort categories by the selected field. */
  field: SaleorGraphql_CategorySortField | '%future added value';
};

/** Represents category original translatable fields and related translations. */
export type SaleorGraphql_CategoryTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'CategoryTranslatableContent';
  /**
   * Represents a single category of products.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /**
   * The ID of the category to translate.
   *
   * Added in Saleor 3.14.
   */
  categoryId: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Category description to translate.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Description of the category.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the category translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the category translatable content. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** SEO description to translate. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title to translate. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Returns translated category fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_CategoryTranslation>>;
};


/** Represents category original translatable fields and related translations. */
export type SaleorGraphql_CategoryTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a category.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_CategoryTranslate = {
  __typename?: 'CategoryTranslate';
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** Represents category translations. */
export type SaleorGraphql_CategoryTranslation = SaleorGraphql_Node & {
  __typename?: 'CategoryTranslation';
  /**
   * Translated description of the category.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Translated description of the category.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the category translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated category name. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO description. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO title. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the category fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_CategoryTranslatableContent>>;
};

/**
 * Updates a category.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CategoryUpdate = {
  __typename?: 'CategoryUpdate';
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Event sent when category is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CategoryUpdated = SaleorGraphql_Event & {
  __typename?: 'CategoryUpdated';
  /** The category the event relates to. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_CategoryWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_CategoryWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_CategoryWhereInput>>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
};

/** Represents channel. */
export type SaleorGraphql_Channel = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Channel';
  /**
   * Shipping methods that are available for the channel.
   *
   * Added in Saleor 3.6.
   */
  availableShippingMethodsPerCountry?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethodsPerCountry>>>;
  /**
   * Channel-specific checkout settings.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS, MANAGE_CHECKOUTS.
   */
  checkoutSettings: FieldWrapper<SaleorGraphql_CheckoutSettings>;
  /**
   * List of shippable countries for the channel.
   *
   * Added in Saleor 3.6.
   */
  countries?: Maybe<Array<FieldWrapper<SaleorGraphql_CountryDisplay>>>;
  /**
   * A currency that is assigned to the channel.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  currencyCode: FieldWrapper<Scalars['String']['output']>;
  /**
   * Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  defaultCountry: FieldWrapper<SaleorGraphql_CountryDisplay>;
  /**
   * Whether a channel has associated orders.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   */
  hasOrders: FieldWrapper<Scalars['Boolean']['output']>;
  /** The ID of the channel. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Whether the channel is active.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  isActive: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * List of public metadata items. Can be accessed without permissions.
   *
   * Added in Saleor 3.15.
   */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.15.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.15.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Name of the channel.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Channel-specific order settings.
   *
   * Added in Saleor 3.12.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS, MANAGE_ORDERS.
   */
  orderSettings: FieldWrapper<SaleorGraphql_OrderSettings>;
  /**
   * Channel-specific payment settings.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS, HANDLE_PAYMENTS.
   */
  paymentSettings: FieldWrapper<SaleorGraphql_PaymentSettings>;
  /**
   * List of private metadata items. Requires staff permissions to access.
   *
   * Added in Saleor 3.15.
   */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.15.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.15.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Slug of the channel. */
  slug: FieldWrapper<Scalars['String']['output']>;
  /**
   * Define the stock setting for this channel.
   *
   * Added in Saleor 3.7.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  stockSettings: FieldWrapper<SaleorGraphql_StockSettings>;
  /**
   * Channel specific tax configuration.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxConfiguration: FieldWrapper<SaleorGraphql_TaxConfiguration>;
  /**
   * List of warehouses assigned to this channel.
   *
   * Added in Saleor 3.5.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  warehouses: Array<FieldWrapper<SaleorGraphql_Warehouse>>;
};


/** Represents channel. */
export type SaleorGraphql_ChannelAvailableShippingMethodsPerCountryArgs = {
  countries?: InputMaybe<Array<SaleorGraphql_CountryCode>>;
};


/** Represents channel. */
export type SaleorGraphql_ChannelMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents channel. */
export type SaleorGraphql_ChannelMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents channel. */
export type SaleorGraphql_ChannelPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents channel. */
export type SaleorGraphql_ChannelPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Activate a channel.
 *
 * Requires one of the following permissions: MANAGE_CHANNELS.
 *
 * Triggers the following webhook events:
 * - CHANNEL_STATUS_CHANGED (async): A channel was activated.
 */
export type SaleorGraphql_ChannelActivate = {
  __typename?: 'ChannelActivate';
  /** Activated channel. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  channelErrors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
  errors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
};

/**
 * Creates new channel.
 *
 * Requires one of the following permissions: MANAGE_CHANNELS.
 *
 * Triggers the following webhook events:
 * - CHANNEL_CREATED (async): A channel was created.
 */
export type SaleorGraphql_ChannelCreate = {
  __typename?: 'ChannelCreate';
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  channelErrors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
  errors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
};

export type SaleorGraphql_ChannelCreateInput = {
  /** List of shipping zones to assign to the channel. */
  addShippingZones?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * List of warehouses to assign to the channel.
   *
   * Added in Saleor 3.5.
   */
  addWarehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * The channel checkout settings
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  checkoutSettings?: InputMaybe<SaleorGraphql_CheckoutSettingsInput>;
  /** Currency of the channel. */
  currencyCode: Scalars['String']['input'];
  /**
   * Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.
   *
   * Added in Saleor 3.1.
   */
  defaultCountry: SaleorGraphql_CountryCode | '%future added value';
  /** Determine if channel will be set active or not. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Channel public metadata.
   *
   * Added in Saleor 3.15.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Name of the channel. */
  name: Scalars['String']['input'];
  /**
   * The channel order settings
   *
   * Added in Saleor 3.12.
   */
  orderSettings?: InputMaybe<SaleorGraphql_OrderSettingsInput>;
  /**
   * The channel payment settings
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  paymentSettings?: InputMaybe<SaleorGraphql_PaymentSettingsInput>;
  /**
   * Channel private metadata.
   *
   * Added in Saleor 3.15.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Slug of the channel. */
  slug: Scalars['String']['input'];
  /**
   * The channel stock settings.
   *
   * Added in Saleor 3.7.
   */
  stockSettings?: InputMaybe<SaleorGraphql_StockSettingsInput>;
};

/**
 * Event sent when new channel is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ChannelCreated = SaleorGraphql_Event & {
  __typename?: 'ChannelCreated';
  /** The channel the event relates to. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deactivate a channel.
 *
 * Requires one of the following permissions: MANAGE_CHANNELS.
 *
 * Triggers the following webhook events:
 * - CHANNEL_STATUS_CHANGED (async): A channel was deactivated.
 */
export type SaleorGraphql_ChannelDeactivate = {
  __typename?: 'ChannelDeactivate';
  /** Deactivated channel. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  channelErrors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
  errors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
};

/**
 * Delete a channel. Orders associated with the deleted channel will be moved to the target channel. Checkouts, product availability, and pricing will be removed.
 *
 * Requires one of the following permissions: MANAGE_CHANNELS.
 *
 * Triggers the following webhook events:
 * - CHANNEL_DELETED (async): A channel was deleted.
 */
export type SaleorGraphql_ChannelDelete = {
  __typename?: 'ChannelDelete';
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  channelErrors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
  errors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
};

export type SaleorGraphql_ChannelDeleteInput = {
  /** ID of channel to migrate orders from origin channel. */
  channelId: Scalars['ID']['input'];
};

/**
 * Event sent when channel is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ChannelDeleted = SaleorGraphql_Event & {
  __typename?: 'ChannelDeleted';
  /** The channel the event relates to. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_ChannelError = {
  __typename?: 'ChannelError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ChannelErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of shipping zone IDs which causes the error. */
  shippingZones?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of warehouses IDs which causes the error. */
  warehouses?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_ChannelErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  ChannelsCurrencyMustBeTheSame = 'CHANNELS_CURRENCY_MUST_BE_THE_SAME',
  ChannelWithOrders = 'CHANNEL_WITH_ORDERS',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_ChannelListingUpdateInput = {
  /** ID of a channel listing. */
  channelListing: Scalars['ID']['input'];
  /** Cost price of the variant in channel. */
  costPrice?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** The threshold for preorder variant in channel. */
  preorderThreshold?: InputMaybe<Scalars['Int']['input']>;
  /** Price of the particular variant in channel. */
  price?: InputMaybe<Scalars['PositiveDecimal']['input']>;
};

/**
 * Event sent when channel metadata is updated.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_ChannelMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'ChannelMetadataUpdated';
  /** The channel the event relates to. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Reorder the warehouses of a channel.
 *
 * Added in Saleor 3.7.
 *
 * Requires one of the following permissions: MANAGE_CHANNELS.
 */
export type SaleorGraphql_ChannelReorderWarehouses = {
  __typename?: 'ChannelReorderWarehouses';
  /** Channel within the warehouses are reordered. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  errors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
};

/**
 * Event sent when channel status has changed.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ChannelStatusChanged = SaleorGraphql_Event & {
  __typename?: 'ChannelStatusChanged';
  /** The channel the event relates to. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Update a channel.
 *
 * Requires one of the following permissions: MANAGE_CHANNELS.
 * Requires one of the following permissions when updating only `orderSettings` field: `MANAGE_CHANNELS`, `MANAGE_ORDERS`.
 * Requires one of the following permissions when updating only `checkoutSettings` field: `MANAGE_CHANNELS`, `MANAGE_CHECKOUTS`.
 * Requires one of the following permissions when updating only `paymentSettings` field: `MANAGE_CHANNELS`, `HANDLE_PAYMENTS`.
 *
 * Triggers the following webhook events:
 * - CHANNEL_UPDATED (async): A channel was updated.
 * - CHANNEL_METADATA_UPDATED (async): Optionally triggered when public or private metadata is updated.
 */
export type SaleorGraphql_ChannelUpdate = {
  __typename?: 'ChannelUpdate';
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  channelErrors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
  errors: Array<FieldWrapper<SaleorGraphql_ChannelError>>;
};

export type SaleorGraphql_ChannelUpdateInput = {
  /** List of shipping zones to assign to the channel. */
  addShippingZones?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * List of warehouses to assign to the channel.
   *
   * Added in Saleor 3.5.
   */
  addWarehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * The channel checkout settings
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  checkoutSettings?: InputMaybe<SaleorGraphql_CheckoutSettingsInput>;
  /**
   * Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.
   *
   * Added in Saleor 3.1.
   */
  defaultCountry?: InputMaybe<SaleorGraphql_CountryCode | '%future added value'>;
  /** Determine if channel will be set active or not. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Channel public metadata.
   *
   * Added in Saleor 3.15.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Name of the channel. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * The channel order settings
   *
   * Added in Saleor 3.12.
   */
  orderSettings?: InputMaybe<SaleorGraphql_OrderSettingsInput>;
  /**
   * The channel payment settings
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  paymentSettings?: InputMaybe<SaleorGraphql_PaymentSettingsInput>;
  /**
   * Channel private metadata.
   *
   * Added in Saleor 3.15.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** List of shipping zones to unassign from the channel. */
  removeShippingZones?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * List of warehouses to unassign from the channel.
   *
   * Added in Saleor 3.5.
   */
  removeWarehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Slug of the channel. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /**
   * The channel stock settings.
   *
   * Added in Saleor 3.7.
   */
  stockSettings?: InputMaybe<SaleorGraphql_StockSettingsInput>;
};

/**
 * Event sent when channel is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ChannelUpdated = SaleorGraphql_Event & {
  __typename?: 'ChannelUpdated';
  /** The channel the event relates to. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Checkout object. */
export type SaleorGraphql_Checkout = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Checkout';
  /**
   * The authorize status of the checkout.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  authorizeStatus: FieldWrapper<SaleorGraphql_CheckoutAuthorizeStatusEnum | '%future added value'>;
  /**
   * Collection points that can be used for this order.
   *
   * Added in Saleor 3.1.
   */
  availableCollectionPoints: Array<FieldWrapper<SaleorGraphql_Warehouse>>;
  /**
   * List of available payment gateways.
   *
   * Triggers the following webhook events:
   * - PAYMENT_LIST_GATEWAYS (sync): Fetch payment gateways available for checkout.
   */
  availablePaymentGateways: Array<FieldWrapper<SaleorGraphql_PaymentGateway>>;
  /**
   * Shipping methods that can be used with this checkout.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
   * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
   * @deprecated This field will be removed in Saleor 4.0. Use `shippingMethods` instead.
   */
  availableShippingMethods: Array<FieldWrapper<SaleorGraphql_ShippingMethod>>;
  /** The billing address of the checkout. */
  billingAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** The channel for which checkout was created. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /**
   * The charge status of the checkout.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  chargeStatus: FieldWrapper<SaleorGraphql_CheckoutChargeStatusEnum | '%future added value'>;
  /** The date and time when the checkout was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * The delivery method selected for this checkout.
   *
   * Added in Saleor 3.1.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
   * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
   */
  deliveryMethod?: Maybe<FieldWrapper<SaleorGraphql_DeliveryMethod>>;
  /** The total discount applied to the checkout. Note: Only discount created via voucher are included in this field. */
  discount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** The name of voucher assigned to the checkout. */
  discountName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Determines whether displayed prices should include taxes.
   *
   * Added in Saleor 3.9.
   */
  displayGrossPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /** Email of a customer. */
  email?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of gift cards associated with this checkout. */
  giftCards: Array<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** The ID of the checkout. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Returns True, if checkout requires shipping. */
  isShippingRequired: FieldWrapper<Scalars['Boolean']['output']>;
  /** Checkout language code. */
  languageCode: FieldWrapper<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `updatedAt` instead. */
  lastChange: FieldWrapper<Scalars['DateTime']['output']>;
  /** A list of checkout lines, each containing information about an item in the checkout. */
  lines: Array<FieldWrapper<SaleorGraphql_CheckoutLine>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The note for the checkout. */
  note: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * List of problems with the checkout.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  problems?: Maybe<Array<FieldWrapper<SaleorGraphql_CheckoutProblem>>>;
  /** The number of items purchased. */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /** The shipping address of the checkout. */
  shippingAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /**
   * The shipping method related with checkout.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
   * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
   * @deprecated This field will be removed in Saleor 4.0. Use `deliveryMethod` instead.
   */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethod>>;
  /**
   * Shipping methods that can be used with this checkout.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
   * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
   */
  shippingMethods: Array<FieldWrapper<SaleorGraphql_ShippingMethod>>;
  /**
   * The price of the shipping, with all the taxes included. Set to 0 when no delivery method is selected.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  shippingPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /**
   * Date when oldest stock reservation for this checkout expires or null if no stock is reserved.
   *
   * Added in Saleor 3.1.
   */
  stockReservationExpires?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * List of user's stored payment methods that can be used in this checkout session. It uses the channel that the checkout was created in. When `amount` is not provided, `checkout.total` will be used as a default value.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  storedPaymentMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_StoredPaymentMethod>>>;
  /**
   * The price of the checkout before shipping, with taxes included.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  subtotalPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /**
   * Returns True if checkout has to be exempt from taxes.
   *
   * Added in Saleor 3.8.
   */
  taxExemption: FieldWrapper<Scalars['Boolean']['output']>;
  /** The checkout's token. */
  token: FieldWrapper<Scalars['UUID']['output']>;
  /**
   * The difference between the paid and the checkout total amount.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  totalBalance: FieldWrapper<SaleorGraphql_Money>;
  /**
   * The sum of the the checkout line prices, with all the taxes,shipping costs, and discounts included.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  totalPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /**
   * List of transactions for the checkout. Requires one of the following permissions: MANAGE_CHECKOUTS, HANDLE_PAYMENTS.
   *
   * Added in Saleor 3.4.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  transactions?: Maybe<Array<FieldWrapper<SaleorGraphql_TransactionItem>>>;
  /** Translation of the discountName field in the language set in Checkout.languageCode field.Note: this field is set automatically when Checkout.languageCode is defined; otherwise it's null */
  translatedDiscountName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Time of last modification of the given checkout.
   *
   * Added in Saleor 3.13.
   */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** The user assigned to the checkout. Requires one of the following permissions: MANAGE_USERS, HANDLE_PAYMENTS, OWNER. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /**
   * The voucher assigned to the checkout.
   *
   * Added in Saleor 3.18.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
  /** The code of voucher assigned to the checkout. */
  voucherCode?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/** Checkout object. */
export type SaleorGraphql_CheckoutMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Checkout object. */
export type SaleorGraphql_CheckoutMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Checkout object. */
export type SaleorGraphql_CheckoutPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Checkout object. */
export type SaleorGraphql_CheckoutPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Checkout object. */
export type SaleorGraphql_CheckoutStoredPaymentMethodsArgs = {
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
};

/**
 * Adds a gift card or a voucher to a checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutAddPromoCode = {
  __typename?: 'CheckoutAddPromoCode';
  /** The checkout with the added gift card or voucher. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

export type SaleorGraphql_CheckoutAddressValidationRules = {
  /** Determines if an error should be raised when the provided address doesn't match the expected format. Example: using letters for postal code when the numbers are expected. */
  checkFieldsFormat?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines if an error should be raised when the provided address doesn't have all the required fields. The list of required fields is dynamic and depends on the country code (use the `addressValidationRules` query to fetch them). Note: country code is mandatory for all addresses regardless of the rules provided in this input. */
  checkRequiredFields?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines if Saleor should apply normalization on address fields. Example: converting city field to uppercase letters. */
  enableFieldsNormalization?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Determine a current authorize status for checkout.
 *
 *     We treat the checkout as fully authorized when the sum of authorized and charged
 *     funds cover the checkout.total.
 *     We treat the checkout as partially authorized when the sum of authorized and charged
 *     funds covers only part of the checkout.total
 *     We treat the checkout as not authorized when the sum of authorized and charged funds
 *     is 0.
 *
 *     NONE - the funds are not authorized
 *     PARTIAL - the cover funds don't cover fully the checkout's total
 *     FULL - the cover funds covers the checkout's total
 */
export enum SaleorGraphql_CheckoutAuthorizeStatusEnum {
  Full = 'FULL',
  None = 'NONE',
  Partial = 'PARTIAL'
}

/**
 * Update billing address in the existing checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutBillingAddressUpdate = {
  __typename?: 'CheckoutBillingAddressUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Determine the current charge status for the checkout.
 *
 *     The checkout is considered overcharged when the sum of the transactionItem's charge
 *     amounts exceeds the value of `checkout.total`.
 *     If the sum of the transactionItem's charge amounts equals
 *     `checkout.total`, we consider the checkout to be fully charged.
 *     If the sum of the transactionItem's charge amounts covers a part of the
 *     `checkout.total`, we treat the checkout as partially charged.
 *
 *
 *     NONE - the funds are not charged.
 *     PARTIAL - the funds that are charged don't cover the checkout's total
 *     FULL - the funds that are charged fully cover the checkout's total
 *     OVERCHARGED - the charged funds are bigger than checkout's total
 */
export enum SaleorGraphql_CheckoutChargeStatusEnum {
  Full = 'FULL',
  None = 'NONE',
  Overcharged = 'OVERCHARGED',
  Partial = 'PARTIAL'
}

/**
 * Completes the checkout. As a result a new order is created. The mutation allows to create the unpaid order when setting `orderSettings.allowUnpaidOrders` for given `Channel` is set to `true`. When `orderSettings.allowUnpaidOrders` is set to `false`, checkout can be completed only when attached `Payment`/`TransactionItem`s fully cover the checkout's total. When processing the checkout with `Payment`, in case of required additional confirmation step like 3D secure, the `confirmationNeeded` flag will be set to True and no order will be created until payment is confirmed with second call of this mutation.
 *
 * Triggers the following webhook events:
 * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
 * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
 * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
 * - ORDER_CREATED (async): Triggered when order is created.
 * - NOTIFY_USER (async): A notification for order placement.
 * - NOTIFY_USER (async): A staff notification for order placement.
 * - ORDER_UPDATED (async): Triggered when order received the update after placement.
 * - ORDER_PAID (async): Triggered when newly created order is paid.
 * - ORDER_FULLY_PAID (async): Triggered when newly created order is fully paid.
 * - ORDER_CONFIRMED (async): Optionally triggered when newly created order are automatically marked as confirmed.
 */
export type SaleorGraphql_CheckoutComplete = {
  __typename?: 'CheckoutComplete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  /** Confirmation data used to process additional authorization steps. */
  confirmationData?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** Set to true if payment needs to be confirmed before checkout is complete. */
  confirmationNeeded: FieldWrapper<Scalars['Boolean']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  /** Placed order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_CheckoutCountableConnection = {
  __typename?: 'CheckoutCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_CheckoutCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_CheckoutCountableEdge = {
  __typename?: 'CheckoutCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Checkout>;
};

/**
 * Create a new checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_CREATED (async): A checkout was created.
 */
export type SaleorGraphql_CheckoutCreate = {
  __typename?: 'CheckoutCreate';
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  /**
   * Whether the checkout was created or the current active one was returned. Refer to checkoutLinesAdd and checkoutLinesUpdate to merge a cart with an active checkout.
   * @deprecated This field will be removed in Saleor 4.0. Always returns `true`.
   */
  created?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Create new checkout from existing order.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutCreateFromOrder = {
  __typename?: 'CheckoutCreateFromOrder';
  /** Created checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutCreateFromOrderError>>;
  /** Variants that were not attached to the checkout. */
  unavailableVariants?: Maybe<Array<FieldWrapper<SaleorGraphql_CheckoutCreateFromOrderUnavailableVariant>>>;
};

export type SaleorGraphql_CheckoutCreateFromOrderError = {
  __typename?: 'CheckoutCreateFromOrderError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_CheckoutCreateFromOrderErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_CheckoutCreateFromOrderErrorCode {
  ChannelInactive = 'CHANNEL_INACTIVE',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  OrderNotFound = 'ORDER_NOT_FOUND',
  TaxError = 'TAX_ERROR'
}

export type SaleorGraphql_CheckoutCreateFromOrderUnavailableVariant = {
  __typename?: 'CheckoutCreateFromOrderUnavailableVariant';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_CheckoutCreateFromOrderUnavailableVariantErrorCode | '%future added value'>;
  /** Order line ID that is unavailable. */
  lineId: FieldWrapper<Scalars['ID']['output']>;
  /** The error message. */
  message: FieldWrapper<Scalars['String']['output']>;
  /** Variant ID that is unavailable. */
  variantId: FieldWrapper<Scalars['ID']['output']>;
};

/** An enumeration. */
export enum SaleorGraphql_CheckoutCreateFromOrderUnavailableVariantErrorCode {
  InsufficientStock = 'INSUFFICIENT_STOCK',
  NotFound = 'NOT_FOUND',
  ProductNotPublished = 'PRODUCT_NOT_PUBLISHED',
  ProductUnavailableForPurchase = 'PRODUCT_UNAVAILABLE_FOR_PURCHASE',
  QuantityGreaterThanLimit = 'QUANTITY_GREATER_THAN_LIMIT',
  UnavailableVariantInChannel = 'UNAVAILABLE_VARIANT_IN_CHANNEL'
}

export type SaleorGraphql_CheckoutCreateInput = {
  /** Billing address of the customer. */
  billingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Slug of a channel in which to create a checkout. */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** The customer's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Checkout language code. */
  languageCode?: InputMaybe<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** A list of checkout lines, each containing information about an item in the checkout. */
  lines: Array<SaleorGraphql_CheckoutLineInput>;
  /** The mailing address to where the checkout will be shipped. Note: the address will be ignored if the checkout doesn't contain shippable items. */
  shippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /**
   * The checkout validation rules that can be changed.
   *
   * Added in Saleor 3.5.
   */
  validationRules?: InputMaybe<SaleorGraphql_CheckoutValidationRules>;
};

/**
 * Event sent when new checkout is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CheckoutCreated = SaleorGraphql_Event & {
  __typename?: 'CheckoutCreated';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Sets the customer as the owner of the checkout.
 *
 * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutCustomerAttach = {
  __typename?: 'CheckoutCustomerAttach';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Removes the user assigned as the owner of the checkout.
 *
 * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutCustomerDetach = {
  __typename?: 'CheckoutCustomerDetach';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Updates the delivery method (shipping method or pick up point) of the checkout. Updates the checkout shipping_address for click and collect delivery for a warehouse address.
 *
 * Added in Saleor 3.1.
 *
 * Triggers the following webhook events:
 * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Triggered when updating the checkout delivery method with the external one.
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutDeliveryMethodUpdate = {
  __typename?: 'CheckoutDeliveryMethodUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Updates email address in the existing checkout object.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutEmailUpdate = {
  __typename?: 'CheckoutEmailUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

export type SaleorGraphql_CheckoutError = {
  __typename?: 'CheckoutError';
  /** A type of address that causes the error. */
  addressType?: Maybe<FieldWrapper<SaleorGraphql_AddressTypeEnum | '%future added value'>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_CheckoutErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of line Ids which cause the error. */
  lines?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of varint IDs which causes the error. */
  variants?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_CheckoutErrorCode {
  BillingAddressNotSet = 'BILLING_ADDRESS_NOT_SET',
  ChannelInactive = 'CHANNEL_INACTIVE',
  CheckoutNotFullyPaid = 'CHECKOUT_NOT_FULLY_PAID',
  DeliveryMethodNotApplicable = 'DELIVERY_METHOD_NOT_APPLICABLE',
  EmailNotSet = 'EMAIL_NOT_SET',
  GiftCardNotApplicable = 'GIFT_CARD_NOT_APPLICABLE',
  GraphqlError = 'GRAPHQL_ERROR',
  InactivePayment = 'INACTIVE_PAYMENT',
  InsufficientStock = 'INSUFFICIENT_STOCK',
  Invalid = 'INVALID',
  InvalidShippingMethod = 'INVALID_SHIPPING_METHOD',
  MissingChannelSlug = 'MISSING_CHANNEL_SLUG',
  NonEditableGiftLine = 'NON_EDITABLE_GIFT_LINE',
  NonRemovableGiftLine = 'NON_REMOVABLE_GIFT_LINE',
  NotFound = 'NOT_FOUND',
  NoLines = 'NO_LINES',
  PaymentError = 'PAYMENT_ERROR',
  ProductNotPublished = 'PRODUCT_NOT_PUBLISHED',
  ProductUnavailableForPurchase = 'PRODUCT_UNAVAILABLE_FOR_PURCHASE',
  QuantityGreaterThanLimit = 'QUANTITY_GREATER_THAN_LIMIT',
  Required = 'REQUIRED',
  ShippingAddressNotSet = 'SHIPPING_ADDRESS_NOT_SET',
  ShippingChangeForbidden = 'SHIPPING_CHANGE_FORBIDDEN',
  ShippingMethodNotApplicable = 'SHIPPING_METHOD_NOT_APPLICABLE',
  ShippingMethodNotSet = 'SHIPPING_METHOD_NOT_SET',
  ShippingNotRequired = 'SHIPPING_NOT_REQUIRED',
  TaxError = 'TAX_ERROR',
  UnavailableVariantInChannel = 'UNAVAILABLE_VARIANT_IN_CHANNEL',
  Unique = 'UNIQUE',
  VoucherNotApplicable = 'VOUCHER_NOT_APPLICABLE',
  ZeroQuantity = 'ZERO_QUANTITY'
}

export type SaleorGraphql_CheckoutFilterInput = {
  authorizeStatus?: InputMaybe<Array<SaleorGraphql_CheckoutAuthorizeStatusEnum | '%future added value'>>;
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  chargeStatus?: InputMaybe<Array<SaleorGraphql_CheckoutChargeStatusEnum | '%future added value'>>;
  created?: InputMaybe<SaleorGraphql_DateRangeInput>;
  customer?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<SaleorGraphql_DateRangeInput>;
};

/**
 * Filter shipping methods for checkout.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_CheckoutFilterShippingMethods = SaleorGraphql_Event & {
  __typename?: 'CheckoutFilterShippingMethods';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * Shipping methods that can be used with this checkout.
   *
   * Added in Saleor 3.6.
   */
  shippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethod>>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when checkout is fully paid with transactions.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutFullyPaid = SaleorGraphql_Event & {
  __typename?: 'CheckoutFullyPaid';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Update language code in the existing checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutLanguageCodeUpdate = {
  __typename?: 'CheckoutLanguageCodeUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/** Represents an item in the checkout. */
export type SaleorGraphql_CheckoutLine = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'CheckoutLine';
  /** The ID of the checkout line. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Determine if the line is a gift.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  isGift?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /**
   * List of public metadata items. Can be accessed without permissions.
   *
   * Added in Saleor 3.5.
   */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.5.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.5.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * List of private metadata items. Requires staff permissions to access.
   *
   * Added in Saleor 3.5.
   */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.5.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.5.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * List of problems with the checkout line.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  problems?: Maybe<Array<FieldWrapper<SaleorGraphql_CheckoutLineProblem>>>;
  /** The quantity of product variant assigned to the checkout line. */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /** Indicates whether the item need to be delivered. */
  requiresShipping: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * The sum of the checkout line price, taxes and discounts.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  totalPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** The sum of the checkout line price, without discounts. */
  undiscountedTotalPrice: FieldWrapper<SaleorGraphql_Money>;
  /** The unit price of the checkout line, without discounts. */
  undiscountedUnitPrice: FieldWrapper<SaleorGraphql_Money>;
  /**
   * The unit price of the checkout line, with taxes and discounts.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   */
  unitPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** The product variant from which the checkout line was created. */
  variant: FieldWrapper<SaleorGraphql_ProductVariant>;
};


/** Represents an item in the checkout. */
export type SaleorGraphql_CheckoutLineMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an item in the checkout. */
export type SaleorGraphql_CheckoutLineMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents an item in the checkout. */
export type SaleorGraphql_CheckoutLinePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an item in the checkout. */
export type SaleorGraphql_CheckoutLinePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_CheckoutLineCountableConnection = {
  __typename?: 'CheckoutLineCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_CheckoutLineCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_CheckoutLineCountableEdge = {
  __typename?: 'CheckoutLineCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_CheckoutLine>;
};

/**
 * Deletes a CheckoutLine.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutLineDelete = {
  __typename?: 'CheckoutLineDelete';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

export type SaleorGraphql_CheckoutLineInput = {
  /**
   * Flag that allow force splitting the same variant into multiple lines by skipping the matching logic.
   *
   * Added in Saleor 3.6.
   */
  forceNewLine?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Fields required to update the object's metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Custom price of the item. Can be set only by apps with `HANDLE_CHECKOUTS` permission. When the line with the same variant will be provided multiple times, the last price will be used.
   *
   * Added in Saleor 3.1.
   */
  price?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** The number of items purchased. */
  quantity: Scalars['Int']['input'];
  /** ID of the product variant. */
  variantId: Scalars['ID']['input'];
};

/**
 * Represents an problem in the checkout line.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutLineProblem = SaleorGraphql_CheckoutLineProblemInsufficientStock | SaleorGraphql_CheckoutLineProblemVariantNotAvailable;

/**
 * Indicates insufficient stock for a given checkout line.Placing the order will not be possible until solving this problem.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutLineProblemInsufficientStock = {
  __typename?: 'CheckoutLineProblemInsufficientStock';
  /** Available quantity of a variant. */
  availableQuantity?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The line that has variant with insufficient stock. */
  line: FieldWrapper<SaleorGraphql_CheckoutLine>;
  /** The variant with insufficient stock. */
  variant: FieldWrapper<SaleorGraphql_ProductVariant>;
};

/**
 * The variant assigned to the checkout line is not available.Placing the order will not be possible until solving this problem.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutLineProblemVariantNotAvailable = {
  __typename?: 'CheckoutLineProblemVariantNotAvailable';
  /** The line that has variant that is not available. */
  line: FieldWrapper<SaleorGraphql_CheckoutLine>;
};

export type SaleorGraphql_CheckoutLineUpdateInput = {
  /**
   * ID of the line.
   *
   * Added in Saleor 3.6.
   */
  lineId?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Custom price of the item. Can be set only by apps with `HANDLE_CHECKOUTS` permission. When the line with the same variant will be provided multiple times, the last price will be used.
   *
   * Added in Saleor 3.1.
   */
  price?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** The number of items purchased. Optional for apps, required for any other users. */
  quantity?: InputMaybe<Scalars['Int']['input']>;
  /**
   * ID of the product variant.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `lineId` instead.
   */
  variantId?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Adds a checkout line to the existing checkout.If line was already in checkout, its quantity will be increased.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutLinesAdd = {
  __typename?: 'CheckoutLinesAdd';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Deletes checkout lines.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutLinesDelete = {
  __typename?: 'CheckoutLinesDelete';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Updates checkout line in the existing checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutLinesUpdate = {
  __typename?: 'CheckoutLinesUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Event sent when checkout metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_CheckoutMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'CheckoutMetadataUpdated';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Create a new payment for given checkout. */
export type SaleorGraphql_CheckoutPaymentCreate = {
  __typename?: 'CheckoutPaymentCreate';
  /** Related checkout object. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  errors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
  /** A newly created payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  paymentErrors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
};

/**
 * Represents an problem in the checkout.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutProblem = SaleorGraphql_CheckoutLineProblemInsufficientStock | SaleorGraphql_CheckoutLineProblemVariantNotAvailable;

/**
 * Remove a gift card or a voucher from a checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutRemovePromoCode = {
  __typename?: 'CheckoutRemovePromoCode';
  /** The checkout with the removed gift card or voucher. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Represents the channel-specific checkout settings.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_CheckoutSettings = {
  __typename?: 'CheckoutSettings';
  /**
   * Default `true`. Determines if the checkout mutations should use legacy error flow. In legacy flow, all mutations can raise an exception unrelated to the requested action - (e.g. out-of-stock exception when updating checkoutShippingAddress.) If `false`, the errors will be aggregated in `checkout.problems` field. Some of the `problems` can block the finalizing checkout process. The legacy flow will be removed in Saleor 4.0. The flow with `checkout.problems` will be the default one.
   *
   * Added in Saleor 3.15.This field will be removed in Saleor 4.0.
   */
  useLegacyErrorFlow: FieldWrapper<Scalars['Boolean']['output']>;
};

export type SaleorGraphql_CheckoutSettingsInput = {
  /**
   * Default `true`. Determines if the checkout mutations should use legacy error flow. In legacy flow, all mutations can raise an exception unrelated to the requested action - (e.g. out-of-stock exception when updating checkoutShippingAddress.) If `false`, the errors will be aggregated in `checkout.problems` field. Some of the `problems` can block the finalizing checkout process. The legacy flow will be removed in Saleor 4.0. The flow with `checkout.problems` will be the default one.
   *
   * Added in Saleor 3.15.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  useLegacyErrorFlow?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Update shipping address in the existing checkout.
 *
 * Triggers the following webhook events:
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutShippingAddressUpdate = {
  __typename?: 'CheckoutShippingAddressUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

/**
 * Updates the shipping method of the checkout.
 *
 * Triggers the following webhook events:
 * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Triggered when updating the checkout shipping method with the external one.
 * - CHECKOUT_UPDATED (async): A checkout was updated.
 */
export type SaleorGraphql_CheckoutShippingMethodUpdate = {
  __typename?: 'CheckoutShippingMethodUpdate';
  /** An updated checkout. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  checkoutErrors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CheckoutError>>;
};

export enum SaleorGraphql_CheckoutSortField {
  /** Sort checkouts by creation date. */
  CreationDate = 'CREATION_DATE',
  /** Sort checkouts by customer. */
  Customer = 'CUSTOMER',
  /** Sort checkouts by payment. */
  Payment = 'PAYMENT'
}

export type SaleorGraphql_CheckoutSortingInput = {
  /** Specifies the direction in which to sort checkouts. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort checkouts by the selected field. */
  field: SaleorGraphql_CheckoutSortField | '%future added value';
};

/**
 * Event sent when checkout is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CheckoutUpdated = SaleorGraphql_Event & {
  __typename?: 'CheckoutUpdated';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_CheckoutValidationRules = {
  /** The validation rules that can be applied to provided billing address data. */
  billingAddress?: InputMaybe<SaleorGraphql_CheckoutAddressValidationRules>;
  /** The validation rules that can be applied to provided shipping address data. */
  shippingAddress?: InputMaybe<SaleorGraphql_CheckoutAddressValidationRules>;
};

export type SaleorGraphql_ChoiceValue = {
  __typename?: 'ChoiceValue';
  /** The raw name of the choice. */
  raw?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The verbose name of the choice. */
  verbose?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents a collection of products. */
export type SaleorGraphql_Collection = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Collection';
  /** Background image of the collection. */
  backgroundImage?: Maybe<FieldWrapper<SaleorGraphql_Image>>;
  /** Channel given to retrieve this collection. Also used by federation gateway to resolve this object in a federated query. */
  channel?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of channels in which the collection is available.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  channelListings?: Maybe<Array<FieldWrapper<SaleorGraphql_CollectionChannelListing>>>;
  /**
   * Description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the collection. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the collection. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of products in this collection. */
  products?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /** SEO description of the collection. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title of the collection. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Slug of the collection. */
  slug: FieldWrapper<Scalars['String']['output']>;
  /** Returns translated collection fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_CollectionTranslation>>;
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionBackgroundImageArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ProductFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_ProductOrder>;
  where?: InputMaybe<SaleorGraphql_ProductWhereInput>;
};


/** Represents a collection of products. */
export type SaleorGraphql_CollectionTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Adds products to a collection.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionAddProducts = {
  __typename?: 'CollectionAddProducts';
  /** Collection to which products will be added. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

/**
 * Deletes collections.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionBulkDelete = {
  __typename?: 'CollectionBulkDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

/** Represents collection channel listing. */
export type SaleorGraphql_CollectionChannelListing = SaleorGraphql_Node & {
  __typename?: 'CollectionChannelListing';
  /** The channel to which the collection belongs. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** The ID of the collection channel listing. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Indicates if the collection is published in the channel. */
  isPublished: FieldWrapper<Scalars['Boolean']['output']>;
  /** @deprecated This field will be removed in Saleor 4.0. Use the `publishedAt` field to fetch the publication date. */
  publicationDate?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /**
   * The collection publication date.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
};

export type SaleorGraphql_CollectionChannelListingError = {
  __typename?: 'CollectionChannelListingError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of channels IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/**
 * Manage collection's availability in channels.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionChannelListingUpdate = {
  __typename?: 'CollectionChannelListingUpdate';
  /** An updated collection instance. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionChannelListingErrors: Array<FieldWrapper<SaleorGraphql_CollectionChannelListingError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionChannelListingError>>;
};

export type SaleorGraphql_CollectionChannelListingUpdateInput = {
  /** List of channels to which the collection should be assigned. */
  addChannels?: InputMaybe<Array<SaleorGraphql_PublishableChannelListingInput>>;
  /** List of channels from which the collection should be unassigned. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Represents a connection to a list of collections. */
export type SaleorGraphql_CollectionCountableConnection = {
  __typename?: 'CollectionCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_CollectionCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_CollectionCountableEdge = {
  __typename?: 'CollectionCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Collection>;
};

/**
 * Creates a new collection.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionCreate = {
  __typename?: 'CollectionCreate';
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

export type SaleorGraphql_CollectionCreateInput = {
  /** Background image file. */
  backgroundImage?: InputMaybe<Scalars['Upload']['input']>;
  /** Alt text for an image. */
  backgroundImageAlt?: InputMaybe<Scalars['String']['input']>;
  /**
   * Description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /** Informs whether a collection is published. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Fields required to update the collection metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Name of the collection. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the collection private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** List of products to be added to the collection. */
  products?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Publication date. ISO 8601 standard.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  publicationDate?: InputMaybe<Scalars['Date']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Slug of the collection. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new collection is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CollectionCreated = SaleorGraphql_Event & {
  __typename?: 'CollectionCreated';
  /** The collection the event relates to. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new collection is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CollectionCreatedCollectionArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a collection.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionDelete = {
  __typename?: 'CollectionDelete';
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

/**
 * Event sent when collection is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CollectionDeleted = SaleorGraphql_Event & {
  __typename?: 'CollectionDeleted';
  /** The collection the event relates to. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when collection is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CollectionDeletedCollectionArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_CollectionError = {
  __typename?: 'CollectionError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_CollectionErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of products IDs which causes the error. */
  products?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_CollectionErrorCode {
  CannotManageProductWithoutVariant = 'CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_CollectionFilterInput = {
  /**
   * Specifies the channel by which the data should be filtered.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  published?: InputMaybe<SaleorGraphql_CollectionPublished | '%future added value'>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_CollectionInput = {
  /** Background image file. */
  backgroundImage?: InputMaybe<Scalars['Upload']['input']>;
  /** Alt text for an image. */
  backgroundImageAlt?: InputMaybe<Scalars['String']['input']>;
  /**
   * Description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /** Informs whether a collection is published. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Fields required to update the collection metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Name of the collection. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the collection private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Publication date. ISO 8601 standard.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  publicationDate?: InputMaybe<Scalars['Date']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Slug of the collection. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when collection metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_CollectionMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'CollectionMetadataUpdated';
  /** The collection the event relates to. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when collection metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_CollectionMetadataUpdatedCollectionArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export enum SaleorGraphql_CollectionPublished {
  Hidden = 'HIDDEN',
  Published = 'PUBLISHED'
}

/**
 * Remove products from a collection.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionRemoveProducts = {
  __typename?: 'CollectionRemoveProducts';
  /** Collection from which products will be removed. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

/**
 * Reorder the products of a collection.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionReorderProducts = {
  __typename?: 'CollectionReorderProducts';
  /** Collection from which products are reordered. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

export enum SaleorGraphql_CollectionSortField {
  /**
   * Sort collections by availability.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  Availability = 'AVAILABILITY',
  /** Sort collections by name. */
  Name = 'NAME',
  /** Sort collections by product count. */
  ProductCount = 'PRODUCT_COUNT',
  /**
   * Sort collections by publication date.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  PublicationDate = 'PUBLICATION_DATE',
  /**
   * Sort collections by publication date.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  PublishedAt = 'PUBLISHED_AT'
}

export type SaleorGraphql_CollectionSortingInput = {
  /**
   * Specifies the channel in which to sort the data.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** Specifies the direction in which to sort collections. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort collections by the selected field. */
  field: SaleorGraphql_CollectionSortField | '%future added value';
};

/** Represents collection's original translatable fields and related translations. */
export type SaleorGraphql_CollectionTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'CollectionTranslatableContent';
  /**
   * Represents a collection of products.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /**
   * The ID of the collection to translate.
   *
   * Added in Saleor 3.14.
   */
  collectionId: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Collection's description to translate.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the collection translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Collection's name to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** SEO description to translate. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title to translate. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Returns translated collection fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_CollectionTranslation>>;
};


/** Represents collection's original translatable fields and related translations. */
export type SaleorGraphql_CollectionTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a collection.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_CollectionTranslate = {
  __typename?: 'CollectionTranslate';
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** Represents collection translations. */
export type SaleorGraphql_CollectionTranslation = SaleorGraphql_Node & {
  __typename?: 'CollectionTranslation';
  /**
   * Translated description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Translated description of the collection.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the collection translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated collection name. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO description. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO title. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the collection fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_CollectionTranslatableContent>>;
};

/**
 * Updates a collection.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_CollectionUpdate = {
  __typename?: 'CollectionUpdate';
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  collectionErrors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
  errors: Array<FieldWrapper<SaleorGraphql_CollectionError>>;
};

/**
 * Event sent when collection is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CollectionUpdated = SaleorGraphql_Event & {
  __typename?: 'CollectionUpdated';
  /** The collection the event relates to. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when collection is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CollectionUpdatedCollectionArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_CollectionWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_CollectionWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_CollectionWhereInput>>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
};

/** Stores information about a single configuration field. */
export type SaleorGraphql_ConfigurationItem = {
  __typename?: 'ConfigurationItem';
  /** Help text for the field. */
  helpText?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Label for the field. */
  label?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Name of the field. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Type of the field. */
  type?: Maybe<FieldWrapper<SaleorGraphql_ConfigurationTypeFieldEnum | '%future added value'>>;
  /** Current value of the field. */
  value?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_ConfigurationItemInput = {
  /** Name of the field to update. */
  name: Scalars['String']['input'];
  /** Value of the given field to update. */
  value?: InputMaybe<Scalars['String']['input']>;
};

/** An enumeration. */
export enum SaleorGraphql_ConfigurationTypeFieldEnum {
  Boolean = 'BOOLEAN',
  Multiline = 'MULTILINE',
  Output = 'OUTPUT',
  Password = 'PASSWORD',
  Secret = 'SECRET',
  Secretmultiline = 'SECRETMULTILINE',
  String = 'STRING'
}

/**
 * Confirm user account with token sent by email during registration.
 *
 * Triggers the following webhook events:
 * - ACCOUNT_CONFIRMED (async): Account was confirmed.
 */
export type SaleorGraphql_ConfirmAccount = {
  __typename?: 'ConfirmAccount';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** An activated user account. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Confirm the email change of the logged-in user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A customer account was updated.
 * - NOTIFY_USER (async): A notification that account email change was confirmed.
 * - ACCOUNT_EMAIL_CHANGED (async): An account email was changed.
 */
export type SaleorGraphql_ConfirmEmailChange = {
  __typename?: 'ConfirmEmailChange';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance with a new email. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** An enumeration. */
export enum SaleorGraphql_CountryCode {
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  As = 'AS',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cc = 'CC',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cu = 'CU',
  Cv = 'CV',
  Cw = 'CW',
  Cx = 'CX',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Eu = 'EU',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fm = 'FM',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hm = 'HM',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Ir = 'IR',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kp = 'KP',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mh = 'MH',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mp = 'MP',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Nf = 'NF',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Pw = 'PW',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Sd = 'SD',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sy = 'SY',
  Sz = 'SZ',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Um = 'UM',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vi = 'VI',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW'
}

export type SaleorGraphql_CountryDisplay = {
  __typename?: 'CountryDisplay';
  /** Country code. */
  code: FieldWrapper<Scalars['String']['output']>;
  /** Country name. */
  country: FieldWrapper<Scalars['String']['output']>;
  /**
   * Country tax.
   * @deprecated This field will be removed in Saleor 4.0. Always returns `null`. Use `TaxClassCountryRate` type to manage tax rates per country.
   */
  vat?: Maybe<FieldWrapper<SaleorGraphql_Vat>>;
};

export type SaleorGraphql_CountryFilterInput = {
  /** Boolean for filtering countries by having shipping zone assigned.If 'true', return countries with shipping zone assigned.If 'false', return countries without any shipping zone assigned.If the argument is not provided (null), return all countries. */
  attachedToShippingZones?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_CountryRateInput = {
  /** Country in which this rate applies. */
  countryCode: SaleorGraphql_CountryCode | '%future added value';
  /** Tax rate value provided as percentage. Example: provide `23` to represent `23%` tax rate. */
  rate: Scalars['Float']['input'];
};

export type SaleorGraphql_CountryRateUpdateInput = {
  /** Country in which this rate applies. */
  countryCode: SaleorGraphql_CountryCode | '%future added value';
  /** Tax rate value provided as percentage. Example: provide `23` to represent `23%` tax rate. Provide `null` to remove the particular rate. */
  rate?: InputMaybe<Scalars['Float']['input']>;
};

/** Create JWT token. */
export type SaleorGraphql_CreateToken = {
  __typename?: 'CreateToken';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** CSRF token required to re-generate access token. */
  csrfToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** JWT refresh token, required to re-generate access token. */
  refreshToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** JWT token, required to authenticate. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

export type SaleorGraphql_CreditCard = {
  __typename?: 'CreditCard';
  /** Card brand. */
  brand: FieldWrapper<Scalars['String']['output']>;
  /** Two-digit number representing the card’s expiration month. */
  expMonth?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Four-digit number representing the card’s expiration year. */
  expYear?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** First 4 digits of the card number. */
  firstDigits?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Last 4 digits of the card number. */
  lastDigits: FieldWrapper<Scalars['String']['output']>;
};

/**
 * Deletes customers.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_DELETED (async): A customer account was deleted.
 */
export type SaleorGraphql_CustomerBulkDelete = {
  __typename?: 'CustomerBulkDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
};

export type SaleorGraphql_CustomerBulkResult = {
  __typename?: 'CustomerBulkResult';
  /** Customer data. */
  customer?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** List of errors that occurred during the update attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_CustomerBulkUpdateError>>>;
};

/**
 * Updates customers.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A customer account was updated.
 * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
 */
export type SaleorGraphql_CustomerBulkUpdate = {
  __typename?: 'CustomerBulkUpdate';
  /** Returns how many objects were created. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_CustomerBulkUpdateError>>;
  /** List of the updated customers. */
  results: Array<FieldWrapper<SaleorGraphql_CustomerBulkResult>>;
};

export type SaleorGraphql_CustomerBulkUpdateError = {
  __typename?: 'CustomerBulkUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_CustomerBulkUpdateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_CustomerBulkUpdateErrorCode {
  Blank = 'BLANK',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MaxLength = 'MAX_LENGTH',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_CustomerBulkUpdateInput = {
  /** External ID of a customer to update. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** ID of a customer to update. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** Fields required to update a customer. */
  input: SaleorGraphql_CustomerInput;
};

/**
 * Creates a new customer.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_CREATED (async): A new customer account was created.
 * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
 * - NOTIFY_USER (async): A notification for setting the password.
 * - ACCOUNT_SET_PASSWORD_REQUESTED (async): Setting a new password for the account is requested.
 */
export type SaleorGraphql_CustomerCreate = {
  __typename?: 'CustomerCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when new customer user is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CustomerCreated = SaleorGraphql_Event & {
  __typename?: 'CustomerCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a customer.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_DELETED (async): A customer account was deleted.
 */
export type SaleorGraphql_CustomerDelete = {
  __typename?: 'CustomerDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** History log of the customer. */
export type SaleorGraphql_CustomerEvent = SaleorGraphql_Node & {
  __typename?: 'CustomerEvent';
  /** App that performed the action. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Number of objects concerned by the event. */
  count?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Date when event happened at in ISO 8601 format. */
  date?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The ID of the customer event. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Content of the event. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The concerned order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The concerned order line. */
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
  /** Customer event type. */
  type?: Maybe<FieldWrapper<SaleorGraphql_CustomerEventsEnum | '%future added value'>>;
  /** User who performed the action. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** An enumeration. */
export enum SaleorGraphql_CustomerEventsEnum {
  AccountActivated = 'ACCOUNT_ACTIVATED',
  AccountCreated = 'ACCOUNT_CREATED',
  AccountDeactivated = 'ACCOUNT_DEACTIVATED',
  CustomerDeleted = 'CUSTOMER_DELETED',
  DigitalLinkDownloaded = 'DIGITAL_LINK_DOWNLOADED',
  EmailAssigned = 'EMAIL_ASSIGNED',
  EmailChanged = 'EMAIL_CHANGED',
  EmailChangedRequest = 'EMAIL_CHANGED_REQUEST',
  NameAssigned = 'NAME_ASSIGNED',
  NoteAdded = 'NOTE_ADDED',
  NoteAddedToOrder = 'NOTE_ADDED_TO_ORDER',
  PasswordChanged = 'PASSWORD_CHANGED',
  PasswordReset = 'PASSWORD_RESET',
  PasswordResetLinkSent = 'PASSWORD_RESET_LINK_SENT',
  PlacedOrder = 'PLACED_ORDER'
}

export type SaleorGraphql_CustomerFilterInput = {
  dateJoined?: InputMaybe<SaleorGraphql_DateRangeInput>;
  /**
   * Filter by ids.
   *
   * Added in Saleor 3.8.
   */
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  numberOfOrders?: InputMaybe<SaleorGraphql_IntRangeInput>;
  placedOrders?: InputMaybe<SaleorGraphql_DateRangeInput>;
  search?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

export type SaleorGraphql_CustomerInput = {
  /** Billing address of the customer. */
  defaultBillingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Shipping address of the customer. */
  defaultShippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** The unique email address of the user. */
  email?: InputMaybe<Scalars['String']['input']>;
  /**
   * External ID of the customer.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User account is active. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * User account is confirmed.
   *
   * Added in Saleor 3.15.
   */
  isConfirmed?: InputMaybe<Scalars['Boolean']['input']>;
  /** User language code. */
  languageCode?: InputMaybe<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** A note about the user. */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user private metadata.
   *
   * Added in Saleor 3.14.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
};

/**
 * Event sent when customer user metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_CustomerMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'CustomerMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Updates an existing customer.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 *
 * Triggers the following webhook events:
 * - CUSTOMER_UPDATED (async): A new customer account was updated.
 * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
 */
export type SaleorGraphql_CustomerUpdate = {
  __typename?: 'CustomerUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when customer user is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_CustomerUpdated = SaleorGraphql_Event & {
  __typename?: 'CustomerUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_DateRangeInput = {
  /** Start date. */
  gte?: InputMaybe<Scalars['Date']['input']>;
  /** End date. */
  lte?: InputMaybe<Scalars['Date']['input']>;
};

/**
 * Define the filtering options for date time fields.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_DateTimeFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<Scalars['DateTime']['input']>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  /** The value in range. */
  range?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

export type SaleorGraphql_DateTimeRangeInput = {
  /** Start date. */
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** End date. */
  lte?: InputMaybe<Scalars['DateTime']['input']>;
};

/**
 * Deactivate all JWT tokens of the currently authenticated user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 */
export type SaleorGraphql_DeactivateAllUserTokens = {
  __typename?: 'DeactivateAllUserTokens';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
};

/**
 * Define the filtering options for decimal fields.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_DecimalFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<Scalars['Decimal']['input']>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  /** The value in range. */
  range?: InputMaybe<SaleorGraphql_DecimalRangeInput>;
};

export type SaleorGraphql_DecimalRangeInput = {
  /** Decimal value greater than or equal to. */
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  /** Decimal value less than or equal to. */
  lte?: InputMaybe<Scalars['Decimal']['input']>;
};

/** Delete metadata of an object. To use it, you need to have access to the modified object. */
export type SaleorGraphql_DeleteMetadata = {
  __typename?: 'DeleteMetadata';
  errors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
  item?: Maybe<FieldWrapper<SaleorGraphql_ObjectWithMetadata>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  metadataErrors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
};

/** Delete object's private metadata. To use it, you need to be an authenticated staff user or an app and have access to the modified object. */
export type SaleorGraphql_DeletePrivateMetadata = {
  __typename?: 'DeletePrivateMetadata';
  errors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
  item?: Maybe<FieldWrapper<SaleorGraphql_ObjectWithMetadata>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  metadataErrors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
};

/**
 * Represents a delivery method chosen for the checkout. `Warehouse` type is used when checkout is marked as "click and collect" and `ShippingMethod` otherwise.
 *
 * Added in Saleor 3.1.
 */
export type SaleorGraphql_DeliveryMethod = SaleorGraphql_ShippingMethod | SaleorGraphql_Warehouse;

/** Represents digital content associated with a product variant. */
export type SaleorGraphql_DigitalContent = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'DigitalContent';
  /** Indicator for automatic fulfillment of digital content. */
  automaticFulfillment: FieldWrapper<Scalars['Boolean']['output']>;
  /** File associated with digital content. */
  contentFile: FieldWrapper<Scalars['String']['output']>;
  /** The ID of the digital content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Maximum number of allowed downloads for the digital content. */
  maxDownloads?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Product variant assigned to digital content. */
  productVariant: FieldWrapper<SaleorGraphql_ProductVariant>;
  /** Number of days the URL for the digital content remains valid. */
  urlValidDays?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** List of URLs for the digital variant. */
  urls?: Maybe<Array<FieldWrapper<SaleorGraphql_DigitalContentUrl>>>;
  /** Default settings indicator for digital content. */
  useDefaultSettings: FieldWrapper<Scalars['Boolean']['output']>;
};


/** Represents digital content associated with a product variant. */
export type SaleorGraphql_DigitalContentMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents digital content associated with a product variant. */
export type SaleorGraphql_DigitalContentMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents digital content associated with a product variant. */
export type SaleorGraphql_DigitalContentPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents digital content associated with a product variant. */
export type SaleorGraphql_DigitalContentPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** A connection to a list of digital content items. */
export type SaleorGraphql_DigitalContentCountableConnection = {
  __typename?: 'DigitalContentCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_DigitalContentCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_DigitalContentCountableEdge = {
  __typename?: 'DigitalContentCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_DigitalContent>;
};

/**
 * Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_DigitalContentCreate = {
  __typename?: 'DigitalContentCreate';
  content?: Maybe<FieldWrapper<SaleorGraphql_DigitalContent>>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  variant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Remove digital content assigned to given variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_DigitalContentDelete = {
  __typename?: 'DigitalContentDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  variant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

export type SaleorGraphql_DigitalContentInput = {
  /** Overwrite default automatic_fulfillment setting for variant. */
  automaticFulfillment?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines how many times a download link can be accessed by a customer. */
  maxDownloads?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Fields required to update the digital content metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Fields required to update the digital content private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Determines for how many days a download link is active since it was generated. */
  urlValidDays?: InputMaybe<Scalars['Int']['input']>;
  /** Use default digital content settings for this product. */
  useDefaultSettings: Scalars['Boolean']['input'];
};

/**
 * Update digital content.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_DigitalContentUpdate = {
  __typename?: 'DigitalContentUpdate';
  content?: Maybe<FieldWrapper<SaleorGraphql_DigitalContent>>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  variant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

export type SaleorGraphql_DigitalContentUploadInput = {
  /** Overwrite default automatic_fulfillment setting for variant. */
  automaticFulfillment?: InputMaybe<Scalars['Boolean']['input']>;
  /** Represents an file in a multipart request. */
  contentFile: Scalars['Upload']['input'];
  /** Determines how many times a download link can be accessed by a customer. */
  maxDownloads?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Fields required to update the digital content metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Fields required to update the digital content private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Determines for how many days a download link is active since it was generated. */
  urlValidDays?: InputMaybe<Scalars['Int']['input']>;
  /** Use default digital content settings for this product. */
  useDefaultSettings: Scalars['Boolean']['input'];
};

/** Represents a URL for digital content. */
export type SaleorGraphql_DigitalContentUrl = SaleorGraphql_Node & {
  __typename?: 'DigitalContentUrl';
  /** Digital content associated with the URL. */
  content: FieldWrapper<SaleorGraphql_DigitalContent>;
  /** Date and time when the digital content URL was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** Number of times digital content has been downloaded. */
  downloadNum: FieldWrapper<Scalars['Int']['output']>;
  /** The ID of the digital content URL. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** UUID of digital content. */
  token: FieldWrapper<Scalars['UUID']['output']>;
  /** URL for digital content. */
  url?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Generate new URL to digital content.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_DigitalContentUrlCreate = {
  __typename?: 'DigitalContentUrlCreate';
  digitalContentUrl?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentUrl>>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_DigitalContentUrlCreateInput = {
  /** Digital content ID which URL will belong to. */
  content: Scalars['ID']['input'];
};

export type SaleorGraphql_DiscountError = {
  __typename?: 'DiscountError';
  /** List of channels IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_DiscountErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of products IDs which causes the error. */
  products?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /**
   * List of voucher codes which causes the error.
   *
   * Added in Saleor 3.18.
   */
  voucherCodes?: Maybe<Array<FieldWrapper<Scalars['String']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_DiscountErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  CannotManageProductWithoutVariant = 'CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE',
  VoucherAlreadyUsed = 'VOUCHER_ALREADY_USED'
}

export enum SaleorGraphql_DiscountStatusEnum {
  Active = 'ACTIVE',
  Expired = 'EXPIRED',
  Scheduled = 'SCHEDULED'
}

export enum SaleorGraphql_DiscountValueTypeEnum {
  Fixed = 'FIXED',
  Percentage = 'PERCENTAGE'
}

export type SaleorGraphql_DiscountedObjectWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_DiscountedObjectWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_DiscountedObjectWhereInput>>;
  /** Filter by the base subtotal price. */
  baseSubtotalPrice?: InputMaybe<SaleorGraphql_DecimalFilterInput>;
  /** Filter by the base total price. */
  baseTotalPrice?: InputMaybe<SaleorGraphql_DecimalFilterInput>;
};

/** An enumeration. */
export enum SaleorGraphql_DistanceUnitsEnum {
  Cm = 'CM',
  Dm = 'DM',
  Ft = 'FT',
  Inch = 'INCH',
  Km = 'KM',
  M = 'M',
  Mm = 'MM',
  Yd = 'YD'
}

/** Represents API domain. */
export type SaleorGraphql_Domain = {
  __typename?: 'Domain';
  /** The host name of the domain. */
  host: FieldWrapper<Scalars['String']['output']>;
  /** Inform if SSL is enabled. */
  sslEnabled: FieldWrapper<Scalars['Boolean']['output']>;
  /** The absolute URL of the API. */
  url: FieldWrapper<Scalars['String']['output']>;
};

/**
 * Deletes draft orders.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_DraftOrderBulkDelete = {
  __typename?: 'DraftOrderBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Completes creating an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_DraftOrderComplete = {
  __typename?: 'DraftOrderComplete';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Completed order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Creates a new draft order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_DraftOrderCreate = {
  __typename?: 'DraftOrderCreate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_DraftOrderCreateInput = {
  /** Billing address of the customer. */
  billingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** ID of the channel associated with the order. */
  channelId?: InputMaybe<Scalars['ID']['input']>;
  /** A note from a customer. Visible by customers in the order summary. */
  customerNote?: InputMaybe<Scalars['String']['input']>;
  /** Discount amount for the order. */
  discount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /**
   * External ID of this order.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Variant line input consisting of variant ID and quantity of products. */
  lines?: InputMaybe<Array<SaleorGraphql_OrderLineCreateInput>>;
  /** URL of a view where users should be redirected to see the order details. URL in RFC 1808 format. */
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
  /** Shipping address of the customer. */
  shippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** ID of a selected shipping method. */
  shippingMethod?: InputMaybe<Scalars['ID']['input']>;
  /** Customer associated with the draft order. */
  user?: InputMaybe<Scalars['ID']['input']>;
  /** Email address of the customer. */
  userEmail?: InputMaybe<Scalars['String']['input']>;
  /** ID of the voucher associated with the order. */
  voucher?: InputMaybe<Scalars['ID']['input']>;
  /**
   * A code of the voucher associated with the order.
   *
   * Added in Saleor 3.18.
   */
  voucherCode?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new draft order is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_DraftOrderCreated = SaleorGraphql_Event & {
  __typename?: 'DraftOrderCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a draft order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_DraftOrderDelete = {
  __typename?: 'DraftOrderDelete';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Event sent when draft order is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_DraftOrderDeleted = SaleorGraphql_Event & {
  __typename?: 'DraftOrderDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_DraftOrderInput = {
  /** Billing address of the customer. */
  billingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** ID of the channel associated with the order. */
  channelId?: InputMaybe<Scalars['ID']['input']>;
  /** A note from a customer. Visible by customers in the order summary. */
  customerNote?: InputMaybe<Scalars['String']['input']>;
  /** Discount amount for the order. */
  discount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /**
   * External ID of this order.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** URL of a view where users should be redirected to see the order details. URL in RFC 1808 format. */
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
  /** Shipping address of the customer. */
  shippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** ID of a selected shipping method. */
  shippingMethod?: InputMaybe<Scalars['ID']['input']>;
  /** Customer associated with the draft order. */
  user?: InputMaybe<Scalars['ID']['input']>;
  /** Email address of the customer. */
  userEmail?: InputMaybe<Scalars['String']['input']>;
  /** ID of the voucher associated with the order. */
  voucher?: InputMaybe<Scalars['ID']['input']>;
  /**
   * A code of the voucher associated with the order.
   *
   * Added in Saleor 3.18.
   */
  voucherCode?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes order lines.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_DraftOrderLinesBulkDelete = {
  __typename?: 'DraftOrderLinesBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Updates a draft order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_DraftOrderUpdate = {
  __typename?: 'DraftOrderUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Event sent when draft order is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_DraftOrderUpdated = SaleorGraphql_Event & {
  __typename?: 'DraftOrderUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export enum SaleorGraphql_ErrorPolicyEnum {
  /** Save what is possible within a single row. If there are errors in an input data row, try to save it partially and skip the invalid part. */
  IgnoreFailed = 'IGNORE_FAILED',
  /** Reject all rows if there is at least one error in any of them. */
  RejectEverything = 'REJECT_EVERYTHING',
  /** Reject rows with errors. */
  RejectFailedRows = 'REJECT_FAILED_ROWS'
}

export type SaleorGraphql_Event = {
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Event delivery. */
export type SaleorGraphql_EventDelivery = SaleorGraphql_Node & {
  __typename?: 'EventDelivery';
  /** Event delivery attempts. */
  attempts?: Maybe<FieldWrapper<SaleorGraphql_EventDeliveryAttemptCountableConnection>>;
  /** Creation time of an event delivery. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** Webhook event type. */
  eventType: FieldWrapper<SaleorGraphql_WebhookEventTypeEnum | '%future added value'>;
  /** The ID of an event delivery. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Event payload. */
  payload?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Event delivery status. */
  status: FieldWrapper<SaleorGraphql_EventDeliveryStatusEnum | '%future added value'>;
};


/** Event delivery. */
export type SaleorGraphql_EventDeliveryAttemptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_EventDeliveryAttemptSortingInput>;
};

/** Event delivery attempts. */
export type SaleorGraphql_EventDeliveryAttempt = SaleorGraphql_Node & {
  __typename?: 'EventDeliveryAttempt';
  /** Event delivery creation date and time. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** Delivery attempt duration. */
  duration?: Maybe<FieldWrapper<Scalars['Float']['output']>>;
  /** The ID of Event Delivery Attempt. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Request headers for delivery attempt. */
  requestHeaders?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Delivery attempt response content. */
  response?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Response headers for delivery attempt. */
  responseHeaders?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Delivery attempt response status code. */
  responseStatusCode?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Event delivery status. */
  status: FieldWrapper<SaleorGraphql_EventDeliveryStatusEnum | '%future added value'>;
  /** Task id for delivery attempt. */
  taskId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_EventDeliveryAttemptCountableConnection = {
  __typename?: 'EventDeliveryAttemptCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_EventDeliveryAttemptCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_EventDeliveryAttemptCountableEdge = {
  __typename?: 'EventDeliveryAttemptCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_EventDeliveryAttempt>;
};

export enum SaleorGraphql_EventDeliveryAttemptSortField {
  /** Sort event delivery attempts by created at. */
  CreatedAt = 'CREATED_AT'
}

export type SaleorGraphql_EventDeliveryAttemptSortingInput = {
  /** Specifies the direction in which to sort attempts. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort attempts by the selected field. */
  field: SaleorGraphql_EventDeliveryAttemptSortField | '%future added value';
};

export type SaleorGraphql_EventDeliveryCountableConnection = {
  __typename?: 'EventDeliveryCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_EventDeliveryCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_EventDeliveryCountableEdge = {
  __typename?: 'EventDeliveryCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_EventDelivery>;
};

export type SaleorGraphql_EventDeliveryFilterInput = {
  eventType?: InputMaybe<SaleorGraphql_WebhookEventTypeEnum | '%future added value'>;
  status?: InputMaybe<SaleorGraphql_EventDeliveryStatusEnum | '%future added value'>;
};

/**
 * Retries event delivery.
 *
 * Requires one of the following permissions: MANAGE_APPS.
 */
export type SaleorGraphql_EventDeliveryRetry = {
  __typename?: 'EventDeliveryRetry';
  /** Event delivery. */
  delivery?: Maybe<FieldWrapper<SaleorGraphql_EventDelivery>>;
  errors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
};

export enum SaleorGraphql_EventDeliverySortField {
  /** Sort event deliveries by created at. */
  CreatedAt = 'CREATED_AT'
}

export type SaleorGraphql_EventDeliverySortingInput = {
  /** Specifies the direction in which to sort deliveries. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort deliveries by the selected field. */
  field: SaleorGraphql_EventDeliverySortField | '%future added value';
};

export enum SaleorGraphql_EventDeliveryStatusEnum {
  Failed = 'FAILED',
  Pending = 'PENDING',
  Success = 'SUCCESS'
}

export type SaleorGraphql_ExportError = {
  __typename?: 'ExportError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ExportErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_ExportErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

/** History log of export file. */
export type SaleorGraphql_ExportEvent = SaleorGraphql_Node & {
  __typename?: 'ExportEvent';
  /** App which performed the action. Requires one of the following permissions: OWNER, MANAGE_APPS. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Date when event happened at in ISO 8601 format. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Content of the event. */
  message: FieldWrapper<Scalars['String']['output']>;
  /** Export event type. */
  type: FieldWrapper<SaleorGraphql_ExportEventsEnum | '%future added value'>;
  /** User who performed the action. Requires one of the following permissions: OWNER, MANAGE_STAFF. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** An enumeration. */
export enum SaleorGraphql_ExportEventsEnum {
  ExportedFileSent = 'EXPORTED_FILE_SENT',
  ExportDeleted = 'EXPORT_DELETED',
  ExportFailed = 'EXPORT_FAILED',
  ExportFailedInfoSent = 'EXPORT_FAILED_INFO_SENT',
  ExportPending = 'EXPORT_PENDING',
  ExportSuccess = 'EXPORT_SUCCESS'
}

/** Represents a job data of exported file. */
export type SaleorGraphql_ExportFile = SaleorGraphql_Job & SaleorGraphql_Node & {
  __typename?: 'ExportFile';
  /** The app which requests file export. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Created date time of job in ISO 8601 format. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** List of events associated with the export. */
  events?: Maybe<Array<FieldWrapper<SaleorGraphql_ExportEvent>>>;
  /** The ID of the export file. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Job message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Job status. */
  status: FieldWrapper<SaleorGraphql_JobStatusEnum | '%future added value'>;
  /** Date time of job last update in ISO 8601 format. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** The URL of field to download. */
  url?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user who requests file export. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

export type SaleorGraphql_ExportFileCountableConnection = {
  __typename?: 'ExportFileCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_ExportFileCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_ExportFileCountableEdge = {
  __typename?: 'ExportFileCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_ExportFile>;
};

export type SaleorGraphql_ExportFileFilterInput = {
  app?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
  status?: InputMaybe<SaleorGraphql_JobStatusEnum | '%future added value'>;
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
  user?: InputMaybe<Scalars['String']['input']>;
};

export enum SaleorGraphql_ExportFileSortField {
  CreatedAt = 'CREATED_AT',
  LastModifiedAt = 'LAST_MODIFIED_AT',
  Status = 'STATUS',
  UpdatedAt = 'UPDATED_AT'
}

export type SaleorGraphql_ExportFileSortingInput = {
  /** Specifies the direction in which to sort export file. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort export file by the selected field. */
  field: SaleorGraphql_ExportFileSortField | '%future added value';
};

/**
 * Export gift cards to csv file.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for the exported file.
 * - GIFT_CARD_EXPORT_COMPLETED (async): A notification for the exported file.
 */
export type SaleorGraphql_ExportGiftCards = {
  __typename?: 'ExportGiftCards';
  errors: Array<FieldWrapper<SaleorGraphql_ExportError>>;
  /** The newly created export file job which is responsible for export data. */
  exportFile?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
};

export type SaleorGraphql_ExportGiftCardsInput = {
  /** Type of exported file. */
  fileType: SaleorGraphql_FileTypesEnum | '%future added value';
  /** Filtering options for gift cards. */
  filter?: InputMaybe<SaleorGraphql_GiftCardFilterInput>;
  /** List of gift cards IDs to export. */
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Determine which gift cards should be exported. */
  scope: SaleorGraphql_ExportScope | '%future added value';
};

export type SaleorGraphql_ExportInfoInput = {
  /** List of attribute ids witch should be exported. */
  attributes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of channels ids which should be exported. */
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of product fields witch should be exported. */
  fields?: InputMaybe<Array<SaleorGraphql_ProductFieldEnum | '%future added value'>>;
  /** List of warehouse ids witch should be exported. */
  warehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Export products to csv file.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for the exported file.
 * - PRODUCT_EXPORT_COMPLETED (async): A notification for the exported file.
 */
export type SaleorGraphql_ExportProducts = {
  __typename?: 'ExportProducts';
  errors: Array<FieldWrapper<SaleorGraphql_ExportError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  exportErrors: Array<FieldWrapper<SaleorGraphql_ExportError>>;
  /** The newly created export file job which is responsible for export data. */
  exportFile?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
};

export type SaleorGraphql_ExportProductsInput = {
  /** Input with info about fields which should be exported. */
  exportInfo?: InputMaybe<SaleorGraphql_ExportInfoInput>;
  /** Type of exported file. */
  fileType: SaleorGraphql_FileTypesEnum | '%future added value';
  /** Filtering options for products. */
  filter?: InputMaybe<SaleorGraphql_ProductFilterInput>;
  /** List of products IDs to export. */
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Determine which products should be exported. */
  scope: SaleorGraphql_ExportScope | '%future added value';
};

export enum SaleorGraphql_ExportScope {
  /** Export all products. */
  All = 'ALL',
  /** Export the filtered products. */
  Filter = 'FILTER',
  /** Export products with given ids. */
  Ids = 'IDS'
}

/**
 * Export voucher codes to csv/xlsx file.
 *
 * Added in Saleor 3.18.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_CODE_EXPORT_COMPLETED (async): A notification for the exported file.
 */
export type SaleorGraphql_ExportVoucherCodes = {
  __typename?: 'ExportVoucherCodes';
  errors: Array<FieldWrapper<SaleorGraphql_ExportError>>;
  /** The newly created export file job which is responsible for export data. */
  exportFile?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
};

export type SaleorGraphql_ExportVoucherCodesInput = {
  /** Type of exported file. */
  fileType: SaleorGraphql_FileTypesEnum | '%future added value';
  /** List of voucher code IDs to export. */
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** The ID of the voucher. If provided, exports all codes belonging to the voucher. */
  voucherId?: InputMaybe<Scalars['ID']['input']>;
};

/** External authentication plugin. */
export type SaleorGraphql_ExternalAuthentication = {
  __typename?: 'ExternalAuthentication';
  /** ID of external authentication plugin. */
  id: FieldWrapper<Scalars['String']['output']>;
  /** Name of external authentication plugin. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Prepare external authentication URL for user by custom plugin. */
export type SaleorGraphql_ExternalAuthenticationUrl = {
  __typename?: 'ExternalAuthenticationUrl';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** The data returned by authentication plugin. */
  authenticationData?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
};

/** Logout user by custom plugin. */
export type SaleorGraphql_ExternalLogout = {
  __typename?: 'ExternalLogout';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** The data returned by authentication plugin. */
  logoutData?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
};

export type SaleorGraphql_ExternalNotificationError = {
  __typename?: 'ExternalNotificationError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ExternalNotificationErrorCodes | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_ExternalNotificationErrorCodes {
  ChannelInactive = 'CHANNEL_INACTIVE',
  InvalidModelType = 'INVALID_MODEL_TYPE',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

/**
 * Trigger sending a notification with the notify plugin method. Serializes nodes provided as ids parameter and includes this data in the notification payload.
 *
 * Added in Saleor 3.1.
 */
export type SaleorGraphql_ExternalNotificationTrigger = {
  __typename?: 'ExternalNotificationTrigger';
  errors: Array<FieldWrapper<SaleorGraphql_ExternalNotificationError>>;
};

export type SaleorGraphql_ExternalNotificationTriggerInput = {
  /** External event type. This field is passed to a plugin as an event type. */
  externalEventType: Scalars['String']['input'];
  /** Additional payload that will be merged with the one based on the bussines object ID. */
  extraPayload?: InputMaybe<Scalars['JSONString']['input']>;
  /** The list of customers or orders node IDs that will be serialized and included in the notification payload. */
  ids: Array<Scalars['ID']['input']>;
};

/** Obtain external access tokens for user by custom plugin. */
export type SaleorGraphql_ExternalObtainAccessTokens = {
  __typename?: 'ExternalObtainAccessTokens';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** CSRF token required to re-generate external access token. */
  csrfToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** The refresh token, required to re-generate external access token. */
  refreshToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The token, required to authenticate. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Refresh user's access by custom plugin. */
export type SaleorGraphql_ExternalRefresh = {
  __typename?: 'ExternalRefresh';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** CSRF token required to re-generate external access token. */
  csrfToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** The refresh token, required to re-generate external access token. */
  refreshToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The token, required to authenticate. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Verify external authentication data by plugin. */
export type SaleorGraphql_ExternalVerify = {
  __typename?: 'ExternalVerify';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** Determine if authentication data is valid or not. */
  isValid: FieldWrapper<Scalars['Boolean']['output']>;
  /** User assigned to data. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** External data. */
  verifyData?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
};

export type SaleorGraphql_File = {
  __typename?: 'File';
  /** Content type of the file. */
  contentType?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The URL of the file. */
  url: FieldWrapper<Scalars['String']['output']>;
};

/** An enumeration. */
export enum SaleorGraphql_FileTypesEnum {
  Csv = 'CSV',
  Xlsx = 'XLSX'
}

/**
 * Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
 *
 * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
 */
export type SaleorGraphql_FileUpload = {
  __typename?: 'FileUpload';
  errors: Array<FieldWrapper<SaleorGraphql_UploadError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  uploadErrors: Array<FieldWrapper<SaleorGraphql_UploadError>>;
  uploadedFile?: Maybe<FieldWrapper<SaleorGraphql_File>>;
};

/** Represents order fulfillment. */
export type SaleorGraphql_Fulfillment = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Fulfillment';
  /** Date and time when fulfillment was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** Sequence in which the fulfillments were created for an order. */
  fulfillmentOrder: FieldWrapper<Scalars['Int']['output']>;
  /** ID of the fulfillment. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of lines for the fulfillment. */
  lines?: Maybe<Array<FieldWrapper<SaleorGraphql_FulfillmentLine>>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Amount of refunded shipping price.
   *
   * Added in Saleor 3.14.
   */
  shippingRefundedAmount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Status of fulfillment. */
  status: FieldWrapper<SaleorGraphql_FulfillmentStatus | '%future added value'>;
  /** User-friendly fulfillment status. */
  statusDisplay?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Total refunded amount assigned to this fulfillment.
   *
   * Added in Saleor 3.14.
   */
  totalRefundedAmount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Fulfillment tracking number. */
  trackingNumber: FieldWrapper<Scalars['String']['output']>;
  /** Warehouse from fulfillment was fulfilled. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};


/** Represents order fulfillment. */
export type SaleorGraphql_FulfillmentMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents order fulfillment. */
export type SaleorGraphql_FulfillmentMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents order fulfillment. */
export type SaleorGraphql_FulfillmentPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents order fulfillment. */
export type SaleorGraphql_FulfillmentPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Approve existing fulfillment.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 *
 * Triggers the following webhook events:
 * - FULFILLMENT_APPROVED (async): Fulfillment is approved.
 */
export type SaleorGraphql_FulfillmentApprove = {
  __typename?: 'FulfillmentApprove';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** An approved fulfillment. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Order which fulfillment was approved. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Event sent when fulfillment is approved.
 *
 * Added in Saleor 3.7.
 */
export type SaleorGraphql_FulfillmentApproved = SaleorGraphql_Event & {
  __typename?: 'FulfillmentApproved';
  /** The fulfillment the event relates to. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /**
   * If true, send a notification to the customer.
   *
   * Added in Saleor 3.16.
   */
  notifyCustomer: FieldWrapper<Scalars['Boolean']['output']>;
  /** The order the fulfillment belongs to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Cancels existing fulfillment and optionally restocks items.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_FulfillmentCancel = {
  __typename?: 'FulfillmentCancel';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A canceled fulfillment. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Order which fulfillment was cancelled. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_FulfillmentCancelInput = {
  /** ID of a warehouse where items will be restocked. Optional when fulfillment is in WAITING_FOR_APPROVAL state. */
  warehouseId?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Event sent when fulfillment is canceled.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_FulfillmentCanceled = SaleorGraphql_Event & {
  __typename?: 'FulfillmentCanceled';
  /** The fulfillment the event relates to. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the fulfillment belongs to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when new fulfillment is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_FulfillmentCreated = SaleorGraphql_Event & {
  __typename?: 'FulfillmentCreated';
  /** The fulfillment the event relates to. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /**
   * If true, the app should send a notification to the customer.
   *
   * Added in Saleor 3.16.
   */
  notifyCustomer: FieldWrapper<Scalars['Boolean']['output']>;
  /** The order the fulfillment belongs to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents line of the fulfillment. */
export type SaleorGraphql_FulfillmentLine = SaleorGraphql_Node & {
  __typename?: 'FulfillmentLine';
  /** ID of the fulfillment line. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The order line to which the fulfillment line is related. */
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
  /** The number of items included in the fulfillment line. */
  quantity: FieldWrapper<Scalars['Int']['output']>;
};

/**
 * Event sent when fulfillment metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_FulfillmentMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'FulfillmentMetadataUpdated';
  /** The fulfillment the event relates to. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the fulfillment belongs to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Refund products.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_FulfillmentRefundProducts = {
  __typename?: 'FulfillmentRefundProducts';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A refunded fulfillment. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Order which fulfillment was refunded. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Return products.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_FulfillmentReturnProducts = {
  __typename?: 'FulfillmentReturnProducts';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order which fulfillment was returned. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A replace fulfillment. */
  replaceFulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** A draft order which was created for products with replace flag. */
  replaceOrder?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** A return fulfillment. */
  returnFulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
};

/** An enumeration. */
export enum SaleorGraphql_FulfillmentStatus {
  Canceled = 'CANCELED',
  Fulfilled = 'FULFILLED',
  Refunded = 'REFUNDED',
  RefundedAndReturned = 'REFUNDED_AND_RETURNED',
  Replaced = 'REPLACED',
  Returned = 'RETURNED',
  WaitingForApproval = 'WAITING_FOR_APPROVAL'
}

/**
 * Event sent when the tracking number is updated.
 *
 * Added in Saleor 3.16.
 */
export type SaleorGraphql_FulfillmentTrackingNumberUpdated = SaleorGraphql_Event & {
  __typename?: 'FulfillmentTrackingNumberUpdated';
  /** The fulfillment the event relates to. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the fulfillment belongs to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Updates a fulfillment for an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 *
 * Triggers the following webhook events:
 * - FULFILLMENT_TRACKING_NUMBER_UPDATED (async): Fulfillment tracking number is updated.
 */
export type SaleorGraphql_FulfillmentUpdateTracking = {
  __typename?: 'FulfillmentUpdateTracking';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A fulfillment with updated tracking. */
  fulfillment?: Maybe<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** Order for which fulfillment was updated. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_FulfillmentUpdateTrackingInput = {
  /** If true, send an email notification to the customer. */
  notifyCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  /** Fulfillment tracking number. */
  trackingNumber?: InputMaybe<Scalars['String']['input']>;
};

/** Payment gateway client configuration key and value pair. */
export type SaleorGraphql_GatewayConfigLine = {
  __typename?: 'GatewayConfigLine';
  /** Gateway config key. */
  field: FieldWrapper<Scalars['String']['output']>;
  /** Gateway config value for key. */
  value?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes. */
export type SaleorGraphql_GiftCard = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'GiftCard';
  /**
   * App which created the gift card.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_APPS, OWNER.
   */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * Slug of the channel where the gift card was bought.
   *
   * Added in Saleor 3.1.
   */
  boughtInChannel?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Gift card code. It can be fetched both by a staff member with 'MANAGE_GIFT_CARD' when gift card hasn't been used yet or a user who bought or issued the gift card.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD, OWNER.
   */
  code: FieldWrapper<Scalars['String']['output']>;
  /** Date and time when gift card was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * The user who bought or issued a gift card.
   *
   * Added in Saleor 3.1.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /**
   * Email address of the user who bought or issued gift card.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_USERS, OWNER.
   */
  createdByEmail?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  currentBalance: FieldWrapper<SaleorGraphql_Money>;
  /** Code in format which allows displaying in a user interface. */
  displayCode: FieldWrapper<Scalars['String']['output']>;
  /**
   * End date of gift card.
   * @deprecated This field will be removed in Saleor 4.0. Use `expiryDate` field instead.
   */
  endDate?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * List of events associated with the gift card.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  events: Array<FieldWrapper<SaleorGraphql_GiftCardEvent>>;
  /** Expiry date of the gift card. */
  expiryDate?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /** ID of the gift card. */
  id: FieldWrapper<Scalars['ID']['output']>;
  initialBalance: FieldWrapper<SaleorGraphql_Money>;
  isActive: FieldWrapper<Scalars['Boolean']['output']>;
  /** Last 4 characters of gift card code. */
  last4CodeChars: FieldWrapper<Scalars['String']['output']>;
  /** Date and time when gift card was last used. */
  lastUsedOn?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Related gift card product.
   *
   * Added in Saleor 3.1.
   */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /**
   * Start date of gift card.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  startDate?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * The gift card tag.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  tags: Array<FieldWrapper<SaleorGraphql_GiftCardTag>>;
  /**
   * The customer who used a gift card.
   *
   * Added in Saleor 3.1.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  usedBy?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /**
   * Email address of the customer who used a gift card.
   *
   * Added in Saleor 3.1.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  usedByEmail?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The customer who bought a gift card.
   * @deprecated This field will be removed in Saleor 4.0. Use `createdBy` field instead.
   */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};


/** A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes. */
export type SaleorGraphql_GiftCardEventsArgs = {
  filter?: InputMaybe<SaleorGraphql_GiftCardEventFilterInput>;
};


/** A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes. */
export type SaleorGraphql_GiftCardMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes. */
export type SaleorGraphql_GiftCardMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes. */
export type SaleorGraphql_GiftCardPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** A gift card is a prepaid electronic payment card accepted in stores. They can be used during checkout by providing a valid gift card codes. */
export type SaleorGraphql_GiftCardPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Activate a gift card.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_STATUS_CHANGED (async): A gift card was activated.
 */
export type SaleorGraphql_GiftCardActivate = {
  __typename?: 'GiftCardActivate';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  /** Activated gift card. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  giftCardErrors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

/**
 * Adds note to the gift card.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_UPDATED (async): A gift card was updated.
 */
export type SaleorGraphql_GiftCardAddNote = {
  __typename?: 'GiftCardAddNote';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  /** Gift card note created. */
  event?: Maybe<FieldWrapper<SaleorGraphql_GiftCardEvent>>;
  /** Gift card with the note added. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
};

export type SaleorGraphql_GiftCardAddNoteInput = {
  /** Note message. */
  message: Scalars['String']['input'];
};

/**
 * Activate gift cards.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_STATUS_CHANGED (async): A gift card was activated.
 */
export type SaleorGraphql_GiftCardBulkActivate = {
  __typename?: 'GiftCardBulkActivate';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

/**
 * Create gift cards.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_CREATED (async): A gift card was created.
 * - NOTIFY_USER (async): A notification for created gift card.
 */
export type SaleorGraphql_GiftCardBulkCreate = {
  __typename?: 'GiftCardBulkCreate';
  /** Returns how many objects were created. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  /** List of created gift cards. */
  giftCards: Array<FieldWrapper<SaleorGraphql_GiftCard>>;
};

export type SaleorGraphql_GiftCardBulkCreateInput = {
  /** Balance of the gift card. */
  balance: SaleorGraphql_PriceInput;
  /** The number of cards to issue. */
  count: Scalars['Int']['input'];
  /** The gift card expiry date. */
  expiryDate?: InputMaybe<Scalars['Date']['input']>;
  /** Determine if gift card is active. */
  isActive: Scalars['Boolean']['input'];
  /** The gift card tags. */
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Deactivate gift cards.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_STATUS_CHANGED (async): A gift card was deactivated.
 */
export type SaleorGraphql_GiftCardBulkDeactivate = {
  __typename?: 'GiftCardBulkDeactivate';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

/**
 * Delete gift cards.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_DELETED (async): A gift card was deleted.
 */
export type SaleorGraphql_GiftCardBulkDelete = {
  __typename?: 'GiftCardBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

export type SaleorGraphql_GiftCardCountableConnection = {
  __typename?: 'GiftCardCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_GiftCardCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_GiftCardCountableEdge = {
  __typename?: 'GiftCardCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_GiftCard>;
};

/**
 * Creates a new gift card.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_CREATED (async): A gift card was created.
 * - NOTIFY_USER (async): A notification for created gift card.
 */
export type SaleorGraphql_GiftCardCreate = {
  __typename?: 'GiftCardCreate';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  giftCardErrors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

export type SaleorGraphql_GiftCardCreateInput = {
  /**
   * The gift card tags to add.
   *
   * Added in Saleor 3.1.
   */
  addTags?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Balance of the gift card. */
  balance: SaleorGraphql_PriceInput;
  /**
   * Slug of a channel from which the email should be sent.
   *
   * Added in Saleor 3.1.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  /**
   * Code to use the gift card.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. The code is now auto generated.
   */
  code?: InputMaybe<Scalars['String']['input']>;
  /**
   * End date of the gift card in ISO 8601 format.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `expiryDate` from `expirySettings` instead.
   */
  endDate?: InputMaybe<Scalars['Date']['input']>;
  /**
   * The gift card expiry date.
   *
   * Added in Saleor 3.1.
   */
  expiryDate?: InputMaybe<Scalars['Date']['input']>;
  /**
   * Determine if gift card is active.
   *
   * Added in Saleor 3.1.
   */
  isActive: Scalars['Boolean']['input'];
  /**
   * The gift card note from the staff member.
   *
   * Added in Saleor 3.1.
   */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Start date of the gift card in ISO 8601 format.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  startDate?: InputMaybe<Scalars['Date']['input']>;
  /** Email of the customer to whom gift card will be sent. */
  userEmail?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new gift card is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_GiftCardCreated = SaleorGraphql_Event & {
  __typename?: 'GiftCardCreated';
  /** The gift card the event relates to. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deactivate a gift card.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_STATUS_CHANGED (async): A gift card was deactivated.
 */
export type SaleorGraphql_GiftCardDeactivate = {
  __typename?: 'GiftCardDeactivate';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  /** Deactivated gift card. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  giftCardErrors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

/**
 * Delete gift card.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_DELETED (async): A gift card was deleted.
 */
export type SaleorGraphql_GiftCardDelete = {
  __typename?: 'GiftCardDelete';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  giftCardErrors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

/**
 * Event sent when gift card is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_GiftCardDeleted = SaleorGraphql_Event & {
  __typename?: 'GiftCardDeleted';
  /** The gift card the event relates to. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_GiftCardError = {
  __typename?: 'GiftCardError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_GiftCardErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of tag values that cause the error. */
  tags?: Maybe<Array<FieldWrapper<Scalars['String']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_GiftCardErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  ExpiredGiftCard = 'EXPIRED_GIFT_CARD',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

/**
 * History log of the gift card.
 *
 * Added in Saleor 3.1.
 */
export type SaleorGraphql_GiftCardEvent = SaleorGraphql_Node & {
  __typename?: 'GiftCardEvent';
  /** App that performed the action. Requires one of the following permissions: MANAGE_APPS, OWNER. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The gift card balance. */
  balance?: Maybe<FieldWrapper<SaleorGraphql_GiftCardEventBalance>>;
  /** Date when event happened at in ISO 8601 format. */
  date?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** Email of the customer. */
  email?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The gift card expiry date. */
  expiryDate?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /** ID of the event associated with a gift card. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Content of the event. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Previous gift card expiry date. */
  oldExpiryDate?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /** The list of old gift card tags. */
  oldTags?: Maybe<Array<FieldWrapper<Scalars['String']['output']>>>;
  /** The order ID where gift card was used or bought. */
  orderId?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /** User-friendly number of an order where gift card was used or bought. */
  orderNumber?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The list of gift card tags. */
  tags?: Maybe<Array<FieldWrapper<Scalars['String']['output']>>>;
  /** Gift card event type. */
  type?: Maybe<FieldWrapper<SaleorGraphql_GiftCardEventsEnum | '%future added value'>>;
  /** User who performed the action. Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF, OWNER. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

export type SaleorGraphql_GiftCardEventBalance = {
  __typename?: 'GiftCardEventBalance';
  /** Current balance of the gift card. */
  currentBalance: FieldWrapper<SaleorGraphql_Money>;
  /** Initial balance of the gift card. */
  initialBalance?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Previous current balance of the gift card. */
  oldCurrentBalance?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Previous initial balance of the gift card. */
  oldInitialBalance?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
};

export type SaleorGraphql_GiftCardEventFilterInput = {
  orders?: InputMaybe<Array<Scalars['ID']['input']>>;
  type?: InputMaybe<SaleorGraphql_GiftCardEventsEnum | '%future added value'>;
};

/** An enumeration. */
export enum SaleorGraphql_GiftCardEventsEnum {
  Activated = 'ACTIVATED',
  BalanceReset = 'BALANCE_RESET',
  Bought = 'BOUGHT',
  Deactivated = 'DEACTIVATED',
  ExpiryDateUpdated = 'EXPIRY_DATE_UPDATED',
  Issued = 'ISSUED',
  NoteAdded = 'NOTE_ADDED',
  Resent = 'RESENT',
  SentToCustomer = 'SENT_TO_CUSTOMER',
  TagsUpdated = 'TAGS_UPDATED',
  Updated = 'UPDATED',
  UsedInOrder = 'USED_IN_ORDER'
}

/**
 * Event sent when gift card export is completed.
 *
 * Added in Saleor 3.16.
 */
export type SaleorGraphql_GiftCardExportCompleted = SaleorGraphql_Event & {
  __typename?: 'GiftCardExportCompleted';
  /** The export file for gift cards. */
  export?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_GiftCardFilterInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  createdByEmail?: InputMaybe<Scalars['String']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  currentBalance?: InputMaybe<SaleorGraphql_PriceRangeInput>;
  initialBalance?: InputMaybe<SaleorGraphql_PriceRangeInput>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  products?: InputMaybe<Array<Scalars['ID']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  used?: InputMaybe<Scalars['Boolean']['input']>;
  usedBy?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Event sent when gift card metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_GiftCardMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'GiftCardMetadataUpdated';
  /** The gift card the event relates to. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Resend a gift card.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for gift card resend.
 */
export type SaleorGraphql_GiftCardResend = {
  __typename?: 'GiftCardResend';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  /** Gift card which has been sent. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
};

export type SaleorGraphql_GiftCardResendInput = {
  /** Slug of a channel from which the email should be sent. */
  channel: Scalars['String']['input'];
  /** Email to which gift card should be send. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** ID of a gift card to resend. */
  id: Scalars['ID']['input'];
};

/**
 * Event sent when gift card is e-mailed.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_GiftCardSent = SaleorGraphql_Event & {
  __typename?: 'GiftCardSent';
  /** Slug of a channel for which this gift card email was sent. */
  channel?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The gift card the event relates to. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** E-mail address to which gift card was sent. */
  sentToEmail?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Gift card related settings from site settings. */
export type SaleorGraphql_GiftCardSettings = {
  __typename?: 'GiftCardSettings';
  /** The gift card expiry period settings. */
  expiryPeriod?: Maybe<FieldWrapper<SaleorGraphql_TimePeriod>>;
  /** The gift card expiry type settings. */
  expiryType: FieldWrapper<SaleorGraphql_GiftCardSettingsExpiryTypeEnum | '%future added value'>;
};

export type SaleorGraphql_GiftCardSettingsError = {
  __typename?: 'GiftCardSettingsError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_GiftCardSettingsErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_GiftCardSettingsErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  Required = 'REQUIRED'
}

/** An enumeration. */
export enum SaleorGraphql_GiftCardSettingsExpiryTypeEnum {
  ExpiryPeriod = 'EXPIRY_PERIOD',
  NeverExpire = 'NEVER_EXPIRE'
}

/**
 * Update gift card settings.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 */
export type SaleorGraphql_GiftCardSettingsUpdate = {
  __typename?: 'GiftCardSettingsUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardSettingsError>>;
  /** Gift card settings. */
  giftCardSettings?: Maybe<FieldWrapper<SaleorGraphql_GiftCardSettings>>;
};

export type SaleorGraphql_GiftCardSettingsUpdateInput = {
  /** Defines gift card expiry period. */
  expiryPeriod?: InputMaybe<SaleorGraphql_TimePeriodInputType>;
  /** Defines gift card default expiry settings. */
  expiryType?: InputMaybe<SaleorGraphql_GiftCardSettingsExpiryTypeEnum | '%future added value'>;
};

export enum SaleorGraphql_GiftCardSortField {
  /**
   * Sort gift cards by created at.
   *
   * Added in Saleor 3.8.
   */
  CreatedAt = 'CREATED_AT',
  /** Sort gift cards by current balance. */
  CurrentBalance = 'CURRENT_BALANCE',
  /** Sort gift cards by product. */
  Product = 'PRODUCT',
  /** Sort gift cards by used by. */
  UsedBy = 'USED_BY'
}

export type SaleorGraphql_GiftCardSortingInput = {
  /** Specifies the direction in which to sort gift cards. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort gift cards by the selected field. */
  field: SaleorGraphql_GiftCardSortField | '%future added value';
};

/**
 * Event sent when gift card status has changed.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_GiftCardStatusChanged = SaleorGraphql_Event & {
  __typename?: 'GiftCardStatusChanged';
  /** The gift card the event relates to. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * The gift card tag.
 *
 * Added in Saleor 3.1.
 */
export type SaleorGraphql_GiftCardTag = SaleorGraphql_Node & {
  __typename?: 'GiftCardTag';
  /** ID of the tag associated with a gift card. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the tag associated with a gift card. */
  name: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_GiftCardTagCountableConnection = {
  __typename?: 'GiftCardTagCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_GiftCardTagCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_GiftCardTagCountableEdge = {
  __typename?: 'GiftCardTagCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_GiftCardTag>;
};

export type SaleorGraphql_GiftCardTagFilterInput = {
  search?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Update a gift card.
 *
 * Requires one of the following permissions: MANAGE_GIFT_CARD.
 *
 * Triggers the following webhook events:
 * - GIFT_CARD_UPDATED (async): A gift card was updated.
 */
export type SaleorGraphql_GiftCardUpdate = {
  __typename?: 'GiftCardUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  giftCardErrors: Array<FieldWrapper<SaleorGraphql_GiftCardError>>;
};

export type SaleorGraphql_GiftCardUpdateInput = {
  /**
   * The gift card tags to add.
   *
   * Added in Saleor 3.1.
   */
  addTags?: InputMaybe<Array<Scalars['String']['input']>>;
  /**
   * The gift card balance amount.
   *
   * Added in Saleor 3.1.
   */
  balanceAmount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /**
   * End date of the gift card in ISO 8601 format.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `expiryDate` from `expirySettings` instead.
   */
  endDate?: InputMaybe<Scalars['Date']['input']>;
  /**
   * The gift card expiry date.
   *
   * Added in Saleor 3.1.
   */
  expiryDate?: InputMaybe<Scalars['Date']['input']>;
  /**
   * The gift card tags to remove.
   *
   * Added in Saleor 3.1.
   */
  removeTags?: InputMaybe<Array<Scalars['String']['input']>>;
  /**
   * Start date of the gift card in ISO 8601 format.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  startDate?: InputMaybe<Scalars['Date']['input']>;
};

/**
 * Event sent when gift card is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_GiftCardUpdated = SaleorGraphql_Event & {
  __typename?: 'GiftCardUpdated';
  /** The gift card the event relates to. */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Define the filtering options for foreign key fields.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_GlobalIdFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<Scalars['ID']['input']>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Represents permission group data. */
export type SaleorGraphql_Group = SaleorGraphql_Node & {
  __typename?: 'Group';
  /**
   * List of channels the group has access to.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  accessibleChannels?: Maybe<Array<FieldWrapper<SaleorGraphql_Channel>>>;
  /** The ID of the group. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The name of the group. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of group permissions */
  permissions?: Maybe<Array<FieldWrapper<SaleorGraphql_Permission>>>;
  /**
   * Determine if the group have restricted access to channels.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  restrictedAccessToChannels: FieldWrapper<Scalars['Boolean']['output']>;
  /** True, if the currently authenticated user has rights to manage a group. */
  userCanManage: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * List of group users
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   */
  users?: Maybe<Array<FieldWrapper<SaleorGraphql_User>>>;
};

export type SaleorGraphql_GroupCountableConnection = {
  __typename?: 'GroupCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_GroupCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_GroupCountableEdge = {
  __typename?: 'GroupCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Group>;
};

/** Thumbnail formats for icon images. */
export enum SaleorGraphql_IconThumbnailFormatEnum {
  Original = 'ORIGINAL',
  Webp = 'WEBP'
}

/** Represents an image. */
export type SaleorGraphql_Image = {
  __typename?: 'Image';
  /** Alt text for an image. */
  alt?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The URL of the image. */
  url: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_IntRangeInput = {
  /** Value greater than or equal to. */
  gte?: InputMaybe<Scalars['Int']['input']>;
  /** Value less than or equal to. */
  lte?: InputMaybe<Scalars['Int']['input']>;
};

/** Represents an Invoice. */
export type SaleorGraphql_Invoice = SaleorGraphql_Job & SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Invoice';
  /** Date and time at which invoice was created. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * URL to view an invoice.
   * @deprecated This field will be removed in Saleor 4.0. Use `url` field.This field will be removed in 4.0
   */
  externalUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Message associated with an invoice. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Invoice number. */
  number?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Order related to the invoice.
   *
   * Added in Saleor 3.10.
   */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Job status. */
  status: FieldWrapper<SaleorGraphql_JobStatusEnum | '%future added value'>;
  /** Date and time at which invoice was updated. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** URL to view/download an invoice. This can be an internal URL if the Invoicing Plugin was used or an external URL if it has been provided. */
  url?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/** Represents an Invoice. */
export type SaleorGraphql_InvoiceMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an Invoice. */
export type SaleorGraphql_InvoiceMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents an Invoice. */
export type SaleorGraphql_InvoicePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an Invoice. */
export type SaleorGraphql_InvoicePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Creates a ready to send invoice.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_InvoiceCreate = {
  __typename?: 'InvoiceCreate';
  errors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  invoiceErrors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
};

export type SaleorGraphql_InvoiceCreateInput = {
  /**
   * Fields required to update the invoice metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Invoice number. */
  number: Scalars['String']['input'];
  /**
   * Fields required to update the invoice private metadata.
   *
   * Added in Saleor 3.14.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of an invoice to download. */
  url: Scalars['String']['input'];
};

/**
 * Deletes an invoice.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_InvoiceDelete = {
  __typename?: 'InvoiceDelete';
  errors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  invoiceErrors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
};

/**
 * Event sent when invoice is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_InvoiceDeleted = SaleorGraphql_Event & {
  __typename?: 'InvoiceDeleted';
  /** The invoice the event relates to. */
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /**
   * Order related to the invoice.
   *
   * Added in Saleor 3.10.
   */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_InvoiceError = {
  __typename?: 'InvoiceError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_InvoiceErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_InvoiceErrorCode {
  EmailNotSet = 'EMAIL_NOT_SET',
  InvalidStatus = 'INVALID_STATUS',
  NotFound = 'NOT_FOUND',
  NotReady = 'NOT_READY',
  NoInvoicePlugin = 'NO_INVOICE_PLUGIN',
  NumberNotSet = 'NUMBER_NOT_SET',
  Required = 'REQUIRED',
  UrlNotSet = 'URL_NOT_SET'
}

/**
 * Request an invoice for the order using plugin.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 *
 * Triggers the following webhook events:
 * - INVOICE_REQUESTED (async): An invoice was requested.
 */
export type SaleorGraphql_InvoiceRequest = {
  __typename?: 'InvoiceRequest';
  errors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  invoiceErrors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  /** Order related to an invoice. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

/**
 * Requests deletion of an invoice.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 *
 * Triggers the following webhook events:
 * - INVOICE_DELETED (async): An invoice was requested to delete.
 */
export type SaleorGraphql_InvoiceRequestDelete = {
  __typename?: 'InvoiceRequestDelete';
  errors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  invoiceErrors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
};

/**
 * Event sent when invoice is requested.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_InvoiceRequested = SaleorGraphql_Event & {
  __typename?: 'InvoiceRequested';
  /** The invoice the event relates to. */
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /**
   * Order related to the invoice.
   *
   * Added in Saleor 3.10.
   */
  order: FieldWrapper<SaleorGraphql_Order>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Send an invoice notification to the customer.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 *
 * Triggers the following webhook events:
 * - INVOICE_SENT (async): A notification for invoice send
 * - NOTIFY_USER (async): A notification for invoice send
 */
export type SaleorGraphql_InvoiceSendNotification = {
  __typename?: 'InvoiceSendNotification';
  errors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  invoiceErrors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
};

/**
 * Event sent when invoice is sent.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_InvoiceSent = SaleorGraphql_Event & {
  __typename?: 'InvoiceSent';
  /** The invoice the event relates to. */
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /**
   * Order related to the invoice.
   *
   * Added in Saleor 3.10.
   */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Updates an invoice.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_InvoiceUpdate = {
  __typename?: 'InvoiceUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
  invoice?: Maybe<FieldWrapper<SaleorGraphql_Invoice>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  invoiceErrors: Array<FieldWrapper<SaleorGraphql_InvoiceError>>;
};

export type SaleorGraphql_IssuingPrincipal = SaleorGraphql_App | SaleorGraphql_User;

export type SaleorGraphql_Job = {
  /** Created date time of job in ISO 8601 format. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** Job message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Job status. */
  status: FieldWrapper<SaleorGraphql_JobStatusEnum | '%future added value'>;
  /** Date time of job last update in ISO 8601 format. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
};

/** An enumeration. */
export enum SaleorGraphql_JobStatusEnum {
  Deleted = 'DELETED',
  Failed = 'FAILED',
  Pending = 'PENDING',
  Success = 'SUCCESS'
}

/** An enumeration. */
export enum SaleorGraphql_LanguageCodeEnum {
  Af = 'AF',
  AfNa = 'AF_NA',
  AfZa = 'AF_ZA',
  Agq = 'AGQ',
  AgqCm = 'AGQ_CM',
  Ak = 'AK',
  AkGh = 'AK_GH',
  Am = 'AM',
  AmEt = 'AM_ET',
  Ar = 'AR',
  ArAe = 'AR_AE',
  ArBh = 'AR_BH',
  ArDj = 'AR_DJ',
  ArDz = 'AR_DZ',
  ArEg = 'AR_EG',
  ArEh = 'AR_EH',
  ArEr = 'AR_ER',
  ArIl = 'AR_IL',
  ArIq = 'AR_IQ',
  ArJo = 'AR_JO',
  ArKm = 'AR_KM',
  ArKw = 'AR_KW',
  ArLb = 'AR_LB',
  ArLy = 'AR_LY',
  ArMa = 'AR_MA',
  ArMr = 'AR_MR',
  ArOm = 'AR_OM',
  ArPs = 'AR_PS',
  ArQa = 'AR_QA',
  ArSa = 'AR_SA',
  ArSd = 'AR_SD',
  ArSo = 'AR_SO',
  ArSs = 'AR_SS',
  ArSy = 'AR_SY',
  ArTd = 'AR_TD',
  ArTn = 'AR_TN',
  ArYe = 'AR_YE',
  As = 'AS',
  Asa = 'ASA',
  AsaTz = 'ASA_TZ',
  Ast = 'AST',
  AstEs = 'AST_ES',
  AsIn = 'AS_IN',
  Az = 'AZ',
  AzCyrl = 'AZ_CYRL',
  AzCyrlAz = 'AZ_CYRL_AZ',
  AzLatn = 'AZ_LATN',
  AzLatnAz = 'AZ_LATN_AZ',
  Bas = 'BAS',
  BasCm = 'BAS_CM',
  Be = 'BE',
  Bem = 'BEM',
  BemZm = 'BEM_ZM',
  Bez = 'BEZ',
  BezTz = 'BEZ_TZ',
  BeBy = 'BE_BY',
  Bg = 'BG',
  BgBg = 'BG_BG',
  Bm = 'BM',
  BmMl = 'BM_ML',
  Bn = 'BN',
  BnBd = 'BN_BD',
  BnIn = 'BN_IN',
  Bo = 'BO',
  BoCn = 'BO_CN',
  BoIn = 'BO_IN',
  Br = 'BR',
  Brx = 'BRX',
  BrxIn = 'BRX_IN',
  BrFr = 'BR_FR',
  Bs = 'BS',
  BsCyrl = 'BS_CYRL',
  BsCyrlBa = 'BS_CYRL_BA',
  BsLatn = 'BS_LATN',
  BsLatnBa = 'BS_LATN_BA',
  Ca = 'CA',
  CaAd = 'CA_AD',
  CaEs = 'CA_ES',
  CaEsValencia = 'CA_ES_VALENCIA',
  CaFr = 'CA_FR',
  CaIt = 'CA_IT',
  Ccp = 'CCP',
  CcpBd = 'CCP_BD',
  CcpIn = 'CCP_IN',
  Ce = 'CE',
  Ceb = 'CEB',
  CebPh = 'CEB_PH',
  CeRu = 'CE_RU',
  Cgg = 'CGG',
  CggUg = 'CGG_UG',
  Chr = 'CHR',
  ChrUs = 'CHR_US',
  Ckb = 'CKB',
  CkbIq = 'CKB_IQ',
  CkbIr = 'CKB_IR',
  Cs = 'CS',
  CsCz = 'CS_CZ',
  Cu = 'CU',
  CuRu = 'CU_RU',
  Cy = 'CY',
  CyGb = 'CY_GB',
  Da = 'DA',
  Dav = 'DAV',
  DavKe = 'DAV_KE',
  DaDk = 'DA_DK',
  DaGl = 'DA_GL',
  De = 'DE',
  DeAt = 'DE_AT',
  DeBe = 'DE_BE',
  DeCh = 'DE_CH',
  DeDe = 'DE_DE',
  DeIt = 'DE_IT',
  DeLi = 'DE_LI',
  DeLu = 'DE_LU',
  Dje = 'DJE',
  DjeNe = 'DJE_NE',
  Dsb = 'DSB',
  DsbDe = 'DSB_DE',
  Dua = 'DUA',
  DuaCm = 'DUA_CM',
  Dyo = 'DYO',
  DyoSn = 'DYO_SN',
  Dz = 'DZ',
  DzBt = 'DZ_BT',
  Ebu = 'EBU',
  EbuKe = 'EBU_KE',
  Ee = 'EE',
  EeGh = 'EE_GH',
  EeTg = 'EE_TG',
  El = 'EL',
  ElCy = 'EL_CY',
  ElGr = 'EL_GR',
  En = 'EN',
  EnAe = 'EN_AE',
  EnAg = 'EN_AG',
  EnAi = 'EN_AI',
  EnAs = 'EN_AS',
  EnAt = 'EN_AT',
  EnAu = 'EN_AU',
  EnBb = 'EN_BB',
  EnBe = 'EN_BE',
  EnBi = 'EN_BI',
  EnBm = 'EN_BM',
  EnBs = 'EN_BS',
  EnBw = 'EN_BW',
  EnBz = 'EN_BZ',
  EnCa = 'EN_CA',
  EnCc = 'EN_CC',
  EnCh = 'EN_CH',
  EnCk = 'EN_CK',
  EnCm = 'EN_CM',
  EnCx = 'EN_CX',
  EnCy = 'EN_CY',
  EnDe = 'EN_DE',
  EnDg = 'EN_DG',
  EnDk = 'EN_DK',
  EnDm = 'EN_DM',
  EnEr = 'EN_ER',
  EnFi = 'EN_FI',
  EnFj = 'EN_FJ',
  EnFk = 'EN_FK',
  EnFm = 'EN_FM',
  EnGb = 'EN_GB',
  EnGd = 'EN_GD',
  EnGg = 'EN_GG',
  EnGh = 'EN_GH',
  EnGi = 'EN_GI',
  EnGm = 'EN_GM',
  EnGu = 'EN_GU',
  EnGy = 'EN_GY',
  EnHk = 'EN_HK',
  EnIe = 'EN_IE',
  EnIl = 'EN_IL',
  EnIm = 'EN_IM',
  EnIn = 'EN_IN',
  EnIo = 'EN_IO',
  EnJe = 'EN_JE',
  EnJm = 'EN_JM',
  EnKe = 'EN_KE',
  EnKi = 'EN_KI',
  EnKn = 'EN_KN',
  EnKy = 'EN_KY',
  EnLc = 'EN_LC',
  EnLr = 'EN_LR',
  EnLs = 'EN_LS',
  EnMg = 'EN_MG',
  EnMh = 'EN_MH',
  EnMo = 'EN_MO',
  EnMp = 'EN_MP',
  EnMs = 'EN_MS',
  EnMt = 'EN_MT',
  EnMu = 'EN_MU',
  EnMw = 'EN_MW',
  EnMy = 'EN_MY',
  EnNa = 'EN_NA',
  EnNf = 'EN_NF',
  EnNg = 'EN_NG',
  EnNl = 'EN_NL',
  EnNr = 'EN_NR',
  EnNu = 'EN_NU',
  EnNz = 'EN_NZ',
  EnPg = 'EN_PG',
  EnPh = 'EN_PH',
  EnPk = 'EN_PK',
  EnPn = 'EN_PN',
  EnPr = 'EN_PR',
  EnPw = 'EN_PW',
  EnRw = 'EN_RW',
  EnSb = 'EN_SB',
  EnSc = 'EN_SC',
  EnSd = 'EN_SD',
  EnSe = 'EN_SE',
  EnSg = 'EN_SG',
  EnSh = 'EN_SH',
  EnSi = 'EN_SI',
  EnSl = 'EN_SL',
  EnSs = 'EN_SS',
  EnSx = 'EN_SX',
  EnSz = 'EN_SZ',
  EnTc = 'EN_TC',
  EnTk = 'EN_TK',
  EnTo = 'EN_TO',
  EnTt = 'EN_TT',
  EnTv = 'EN_TV',
  EnTz = 'EN_TZ',
  EnUg = 'EN_UG',
  EnUm = 'EN_UM',
  EnUs = 'EN_US',
  EnVc = 'EN_VC',
  EnVg = 'EN_VG',
  EnVi = 'EN_VI',
  EnVu = 'EN_VU',
  EnWs = 'EN_WS',
  EnZa = 'EN_ZA',
  EnZm = 'EN_ZM',
  EnZw = 'EN_ZW',
  Eo = 'EO',
  Es = 'ES',
  EsAr = 'ES_AR',
  EsBo = 'ES_BO',
  EsBr = 'ES_BR',
  EsBz = 'ES_BZ',
  EsCl = 'ES_CL',
  EsCo = 'ES_CO',
  EsCr = 'ES_CR',
  EsCu = 'ES_CU',
  EsDo = 'ES_DO',
  EsEa = 'ES_EA',
  EsEc = 'ES_EC',
  EsEs = 'ES_ES',
  EsGq = 'ES_GQ',
  EsGt = 'ES_GT',
  EsHn = 'ES_HN',
  EsIc = 'ES_IC',
  EsMx = 'ES_MX',
  EsNi = 'ES_NI',
  EsPa = 'ES_PA',
  EsPe = 'ES_PE',
  EsPh = 'ES_PH',
  EsPr = 'ES_PR',
  EsPy = 'ES_PY',
  EsSv = 'ES_SV',
  EsUs = 'ES_US',
  EsUy = 'ES_UY',
  EsVe = 'ES_VE',
  Et = 'ET',
  EtEe = 'ET_EE',
  Eu = 'EU',
  EuEs = 'EU_ES',
  Ewo = 'EWO',
  EwoCm = 'EWO_CM',
  Fa = 'FA',
  FaAf = 'FA_AF',
  FaIr = 'FA_IR',
  Ff = 'FF',
  FfAdlm = 'FF_ADLM',
  FfAdlmBf = 'FF_ADLM_BF',
  FfAdlmCm = 'FF_ADLM_CM',
  FfAdlmGh = 'FF_ADLM_GH',
  FfAdlmGm = 'FF_ADLM_GM',
  FfAdlmGn = 'FF_ADLM_GN',
  FfAdlmGw = 'FF_ADLM_GW',
  FfAdlmLr = 'FF_ADLM_LR',
  FfAdlmMr = 'FF_ADLM_MR',
  FfAdlmNe = 'FF_ADLM_NE',
  FfAdlmNg = 'FF_ADLM_NG',
  FfAdlmSl = 'FF_ADLM_SL',
  FfAdlmSn = 'FF_ADLM_SN',
  FfLatn = 'FF_LATN',
  FfLatnBf = 'FF_LATN_BF',
  FfLatnCm = 'FF_LATN_CM',
  FfLatnGh = 'FF_LATN_GH',
  FfLatnGm = 'FF_LATN_GM',
  FfLatnGn = 'FF_LATN_GN',
  FfLatnGw = 'FF_LATN_GW',
  FfLatnLr = 'FF_LATN_LR',
  FfLatnMr = 'FF_LATN_MR',
  FfLatnNe = 'FF_LATN_NE',
  FfLatnNg = 'FF_LATN_NG',
  FfLatnSl = 'FF_LATN_SL',
  FfLatnSn = 'FF_LATN_SN',
  Fi = 'FI',
  Fil = 'FIL',
  FilPh = 'FIL_PH',
  FiFi = 'FI_FI',
  Fo = 'FO',
  FoDk = 'FO_DK',
  FoFo = 'FO_FO',
  Fr = 'FR',
  FrBe = 'FR_BE',
  FrBf = 'FR_BF',
  FrBi = 'FR_BI',
  FrBj = 'FR_BJ',
  FrBl = 'FR_BL',
  FrCa = 'FR_CA',
  FrCd = 'FR_CD',
  FrCf = 'FR_CF',
  FrCg = 'FR_CG',
  FrCh = 'FR_CH',
  FrCi = 'FR_CI',
  FrCm = 'FR_CM',
  FrDj = 'FR_DJ',
  FrDz = 'FR_DZ',
  FrFr = 'FR_FR',
  FrGa = 'FR_GA',
  FrGf = 'FR_GF',
  FrGn = 'FR_GN',
  FrGp = 'FR_GP',
  FrGq = 'FR_GQ',
  FrHt = 'FR_HT',
  FrKm = 'FR_KM',
  FrLu = 'FR_LU',
  FrMa = 'FR_MA',
  FrMc = 'FR_MC',
  FrMf = 'FR_MF',
  FrMg = 'FR_MG',
  FrMl = 'FR_ML',
  FrMq = 'FR_MQ',
  FrMr = 'FR_MR',
  FrMu = 'FR_MU',
  FrNc = 'FR_NC',
  FrNe = 'FR_NE',
  FrPf = 'FR_PF',
  FrPm = 'FR_PM',
  FrRe = 'FR_RE',
  FrRw = 'FR_RW',
  FrSc = 'FR_SC',
  FrSn = 'FR_SN',
  FrSy = 'FR_SY',
  FrTd = 'FR_TD',
  FrTg = 'FR_TG',
  FrTn = 'FR_TN',
  FrVu = 'FR_VU',
  FrWf = 'FR_WF',
  FrYt = 'FR_YT',
  Fur = 'FUR',
  FurIt = 'FUR_IT',
  Fy = 'FY',
  FyNl = 'FY_NL',
  Ga = 'GA',
  GaGb = 'GA_GB',
  GaIe = 'GA_IE',
  Gd = 'GD',
  GdGb = 'GD_GB',
  Gl = 'GL',
  GlEs = 'GL_ES',
  Gsw = 'GSW',
  GswCh = 'GSW_CH',
  GswFr = 'GSW_FR',
  GswLi = 'GSW_LI',
  Gu = 'GU',
  Guz = 'GUZ',
  GuzKe = 'GUZ_KE',
  GuIn = 'GU_IN',
  Gv = 'GV',
  GvIm = 'GV_IM',
  Ha = 'HA',
  Haw = 'HAW',
  HawUs = 'HAW_US',
  HaGh = 'HA_GH',
  HaNe = 'HA_NE',
  HaNg = 'HA_NG',
  He = 'HE',
  HeIl = 'HE_IL',
  Hi = 'HI',
  HiIn = 'HI_IN',
  Hr = 'HR',
  HrBa = 'HR_BA',
  HrHr = 'HR_HR',
  Hsb = 'HSB',
  HsbDe = 'HSB_DE',
  Hu = 'HU',
  HuHu = 'HU_HU',
  Hy = 'HY',
  HyAm = 'HY_AM',
  Ia = 'IA',
  Id = 'ID',
  IdId = 'ID_ID',
  Ig = 'IG',
  IgNg = 'IG_NG',
  Ii = 'II',
  IiCn = 'II_CN',
  Is = 'IS',
  IsIs = 'IS_IS',
  It = 'IT',
  ItCh = 'IT_CH',
  ItIt = 'IT_IT',
  ItSm = 'IT_SM',
  ItVa = 'IT_VA',
  Ja = 'JA',
  JaJp = 'JA_JP',
  Jgo = 'JGO',
  JgoCm = 'JGO_CM',
  Jmc = 'JMC',
  JmcTz = 'JMC_TZ',
  Jv = 'JV',
  JvId = 'JV_ID',
  Ka = 'KA',
  Kab = 'KAB',
  KabDz = 'KAB_DZ',
  Kam = 'KAM',
  KamKe = 'KAM_KE',
  KaGe = 'KA_GE',
  Kde = 'KDE',
  KdeTz = 'KDE_TZ',
  Kea = 'KEA',
  KeaCv = 'KEA_CV',
  Khq = 'KHQ',
  KhqMl = 'KHQ_ML',
  Ki = 'KI',
  KiKe = 'KI_KE',
  Kk = 'KK',
  Kkj = 'KKJ',
  KkjCm = 'KKJ_CM',
  KkKz = 'KK_KZ',
  Kl = 'KL',
  Kln = 'KLN',
  KlnKe = 'KLN_KE',
  KlGl = 'KL_GL',
  Km = 'KM',
  KmKh = 'KM_KH',
  Kn = 'KN',
  KnIn = 'KN_IN',
  Ko = 'KO',
  Kok = 'KOK',
  KokIn = 'KOK_IN',
  KoKp = 'KO_KP',
  KoKr = 'KO_KR',
  Ks = 'KS',
  Ksb = 'KSB',
  KsbTz = 'KSB_TZ',
  Ksf = 'KSF',
  KsfCm = 'KSF_CM',
  Ksh = 'KSH',
  KshDe = 'KSH_DE',
  KsArab = 'KS_ARAB',
  KsArabIn = 'KS_ARAB_IN',
  Ku = 'KU',
  KuTr = 'KU_TR',
  Kw = 'KW',
  KwGb = 'KW_GB',
  Ky = 'KY',
  KyKg = 'KY_KG',
  Lag = 'LAG',
  LagTz = 'LAG_TZ',
  Lb = 'LB',
  LbLu = 'LB_LU',
  Lg = 'LG',
  LgUg = 'LG_UG',
  Lkt = 'LKT',
  LktUs = 'LKT_US',
  Ln = 'LN',
  LnAo = 'LN_AO',
  LnCd = 'LN_CD',
  LnCf = 'LN_CF',
  LnCg = 'LN_CG',
  Lo = 'LO',
  LoLa = 'LO_LA',
  Lrc = 'LRC',
  LrcIq = 'LRC_IQ',
  LrcIr = 'LRC_IR',
  Lt = 'LT',
  LtLt = 'LT_LT',
  Lu = 'LU',
  Luo = 'LUO',
  LuoKe = 'LUO_KE',
  Luy = 'LUY',
  LuyKe = 'LUY_KE',
  LuCd = 'LU_CD',
  Lv = 'LV',
  LvLv = 'LV_LV',
  Mai = 'MAI',
  MaiIn = 'MAI_IN',
  Mas = 'MAS',
  MasKe = 'MAS_KE',
  MasTz = 'MAS_TZ',
  Mer = 'MER',
  MerKe = 'MER_KE',
  Mfe = 'MFE',
  MfeMu = 'MFE_MU',
  Mg = 'MG',
  Mgh = 'MGH',
  MghMz = 'MGH_MZ',
  Mgo = 'MGO',
  MgoCm = 'MGO_CM',
  MgMg = 'MG_MG',
  Mi = 'MI',
  MiNz = 'MI_NZ',
  Mk = 'MK',
  MkMk = 'MK_MK',
  Ml = 'ML',
  MlIn = 'ML_IN',
  Mn = 'MN',
  Mni = 'MNI',
  MniBeng = 'MNI_BENG',
  MniBengIn = 'MNI_BENG_IN',
  MnMn = 'MN_MN',
  Mr = 'MR',
  MrIn = 'MR_IN',
  Ms = 'MS',
  MsBn = 'MS_BN',
  MsId = 'MS_ID',
  MsMy = 'MS_MY',
  MsSg = 'MS_SG',
  Mt = 'MT',
  MtMt = 'MT_MT',
  Mua = 'MUA',
  MuaCm = 'MUA_CM',
  My = 'MY',
  MyMm = 'MY_MM',
  Mzn = 'MZN',
  MznIr = 'MZN_IR',
  Naq = 'NAQ',
  NaqNa = 'NAQ_NA',
  Nb = 'NB',
  NbNo = 'NB_NO',
  NbSj = 'NB_SJ',
  Nd = 'ND',
  Nds = 'NDS',
  NdsDe = 'NDS_DE',
  NdsNl = 'NDS_NL',
  NdZw = 'ND_ZW',
  Ne = 'NE',
  NeIn = 'NE_IN',
  NeNp = 'NE_NP',
  Nl = 'NL',
  NlAw = 'NL_AW',
  NlBe = 'NL_BE',
  NlBq = 'NL_BQ',
  NlCw = 'NL_CW',
  NlNl = 'NL_NL',
  NlSr = 'NL_SR',
  NlSx = 'NL_SX',
  Nmg = 'NMG',
  NmgCm = 'NMG_CM',
  Nn = 'NN',
  Nnh = 'NNH',
  NnhCm = 'NNH_CM',
  NnNo = 'NN_NO',
  Nus = 'NUS',
  NusSs = 'NUS_SS',
  Nyn = 'NYN',
  NynUg = 'NYN_UG',
  Om = 'OM',
  OmEt = 'OM_ET',
  OmKe = 'OM_KE',
  Or = 'OR',
  OrIn = 'OR_IN',
  Os = 'OS',
  OsGe = 'OS_GE',
  OsRu = 'OS_RU',
  Pa = 'PA',
  PaArab = 'PA_ARAB',
  PaArabPk = 'PA_ARAB_PK',
  PaGuru = 'PA_GURU',
  PaGuruIn = 'PA_GURU_IN',
  Pcm = 'PCM',
  PcmNg = 'PCM_NG',
  Pl = 'PL',
  PlPl = 'PL_PL',
  Prg = 'PRG',
  Ps = 'PS',
  PsAf = 'PS_AF',
  PsPk = 'PS_PK',
  Pt = 'PT',
  PtAo = 'PT_AO',
  PtBr = 'PT_BR',
  PtCh = 'PT_CH',
  PtCv = 'PT_CV',
  PtGq = 'PT_GQ',
  PtGw = 'PT_GW',
  PtLu = 'PT_LU',
  PtMo = 'PT_MO',
  PtMz = 'PT_MZ',
  PtPt = 'PT_PT',
  PtSt = 'PT_ST',
  PtTl = 'PT_TL',
  Qu = 'QU',
  QuBo = 'QU_BO',
  QuEc = 'QU_EC',
  QuPe = 'QU_PE',
  Rm = 'RM',
  RmCh = 'RM_CH',
  Rn = 'RN',
  RnBi = 'RN_BI',
  Ro = 'RO',
  Rof = 'ROF',
  RofTz = 'ROF_TZ',
  RoMd = 'RO_MD',
  RoRo = 'RO_RO',
  Ru = 'RU',
  RuBy = 'RU_BY',
  RuKg = 'RU_KG',
  RuKz = 'RU_KZ',
  RuMd = 'RU_MD',
  RuRu = 'RU_RU',
  RuUa = 'RU_UA',
  Rw = 'RW',
  Rwk = 'RWK',
  RwkTz = 'RWK_TZ',
  RwRw = 'RW_RW',
  Sah = 'SAH',
  SahRu = 'SAH_RU',
  Saq = 'SAQ',
  SaqKe = 'SAQ_KE',
  Sat = 'SAT',
  SatOlck = 'SAT_OLCK',
  SatOlckIn = 'SAT_OLCK_IN',
  Sbp = 'SBP',
  SbpTz = 'SBP_TZ',
  Sd = 'SD',
  SdArab = 'SD_ARAB',
  SdArabPk = 'SD_ARAB_PK',
  SdDeva = 'SD_DEVA',
  SdDevaIn = 'SD_DEVA_IN',
  Se = 'SE',
  Seh = 'SEH',
  SehMz = 'SEH_MZ',
  Ses = 'SES',
  SesMl = 'SES_ML',
  SeFi = 'SE_FI',
  SeNo = 'SE_NO',
  SeSe = 'SE_SE',
  Sg = 'SG',
  SgCf = 'SG_CF',
  Shi = 'SHI',
  ShiLatn = 'SHI_LATN',
  ShiLatnMa = 'SHI_LATN_MA',
  ShiTfng = 'SHI_TFNG',
  ShiTfngMa = 'SHI_TFNG_MA',
  Si = 'SI',
  SiLk = 'SI_LK',
  Sk = 'SK',
  SkSk = 'SK_SK',
  Sl = 'SL',
  SlSi = 'SL_SI',
  Smn = 'SMN',
  SmnFi = 'SMN_FI',
  Sn = 'SN',
  SnZw = 'SN_ZW',
  So = 'SO',
  SoDj = 'SO_DJ',
  SoEt = 'SO_ET',
  SoKe = 'SO_KE',
  SoSo = 'SO_SO',
  Sq = 'SQ',
  SqAl = 'SQ_AL',
  SqMk = 'SQ_MK',
  SqXk = 'SQ_XK',
  Sr = 'SR',
  SrCyrl = 'SR_CYRL',
  SrCyrlBa = 'SR_CYRL_BA',
  SrCyrlMe = 'SR_CYRL_ME',
  SrCyrlRs = 'SR_CYRL_RS',
  SrCyrlXk = 'SR_CYRL_XK',
  SrLatn = 'SR_LATN',
  SrLatnBa = 'SR_LATN_BA',
  SrLatnMe = 'SR_LATN_ME',
  SrLatnRs = 'SR_LATN_RS',
  SrLatnXk = 'SR_LATN_XK',
  Su = 'SU',
  SuLatn = 'SU_LATN',
  SuLatnId = 'SU_LATN_ID',
  Sv = 'SV',
  SvAx = 'SV_AX',
  SvFi = 'SV_FI',
  SvSe = 'SV_SE',
  Sw = 'SW',
  SwCd = 'SW_CD',
  SwKe = 'SW_KE',
  SwTz = 'SW_TZ',
  SwUg = 'SW_UG',
  Ta = 'TA',
  TaIn = 'TA_IN',
  TaLk = 'TA_LK',
  TaMy = 'TA_MY',
  TaSg = 'TA_SG',
  Te = 'TE',
  Teo = 'TEO',
  TeoKe = 'TEO_KE',
  TeoUg = 'TEO_UG',
  TeIn = 'TE_IN',
  Tg = 'TG',
  TgTj = 'TG_TJ',
  Th = 'TH',
  ThTh = 'TH_TH',
  Ti = 'TI',
  TiEr = 'TI_ER',
  TiEt = 'TI_ET',
  Tk = 'TK',
  TkTm = 'TK_TM',
  To = 'TO',
  ToTo = 'TO_TO',
  Tr = 'TR',
  TrCy = 'TR_CY',
  TrTr = 'TR_TR',
  Tt = 'TT',
  TtRu = 'TT_RU',
  Twq = 'TWQ',
  TwqNe = 'TWQ_NE',
  Tzm = 'TZM',
  TzmMa = 'TZM_MA',
  Ug = 'UG',
  UgCn = 'UG_CN',
  Uk = 'UK',
  UkUa = 'UK_UA',
  Ur = 'UR',
  UrIn = 'UR_IN',
  UrPk = 'UR_PK',
  Uz = 'UZ',
  UzArab = 'UZ_ARAB',
  UzArabAf = 'UZ_ARAB_AF',
  UzCyrl = 'UZ_CYRL',
  UzCyrlUz = 'UZ_CYRL_UZ',
  UzLatn = 'UZ_LATN',
  UzLatnUz = 'UZ_LATN_UZ',
  Vai = 'VAI',
  VaiLatn = 'VAI_LATN',
  VaiLatnLr = 'VAI_LATN_LR',
  VaiVaii = 'VAI_VAII',
  VaiVaiiLr = 'VAI_VAII_LR',
  Vi = 'VI',
  ViVn = 'VI_VN',
  Vo = 'VO',
  Vun = 'VUN',
  VunTz = 'VUN_TZ',
  Wae = 'WAE',
  WaeCh = 'WAE_CH',
  Wo = 'WO',
  WoSn = 'WO_SN',
  Xh = 'XH',
  XhZa = 'XH_ZA',
  Xog = 'XOG',
  XogUg = 'XOG_UG',
  Yav = 'YAV',
  YavCm = 'YAV_CM',
  Yi = 'YI',
  Yo = 'YO',
  YoBj = 'YO_BJ',
  YoNg = 'YO_NG',
  Yue = 'YUE',
  YueHans = 'YUE_HANS',
  YueHansCn = 'YUE_HANS_CN',
  YueHant = 'YUE_HANT',
  YueHantHk = 'YUE_HANT_HK',
  Zgh = 'ZGH',
  ZghMa = 'ZGH_MA',
  Zh = 'ZH',
  ZhHans = 'ZH_HANS',
  ZhHansCn = 'ZH_HANS_CN',
  ZhHansHk = 'ZH_HANS_HK',
  ZhHansMo = 'ZH_HANS_MO',
  ZhHansSg = 'ZH_HANS_SG',
  ZhHant = 'ZH_HANT',
  ZhHantHk = 'ZH_HANT_HK',
  ZhHantMo = 'ZH_HANT_MO',
  ZhHantTw = 'ZH_HANT_TW',
  Zu = 'ZU',
  ZuZa = 'ZU_ZA'
}

export type SaleorGraphql_LanguageDisplay = {
  __typename?: 'LanguageDisplay';
  /** ISO 639 representation of the language name. */
  code: FieldWrapper<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** Full name of the language. */
  language: FieldWrapper<Scalars['String']['output']>;
};

/** Store the current and allowed usage. */
export type SaleorGraphql_LimitInfo = {
  __typename?: 'LimitInfo';
  /** Defines the allowed maximum resource usage, null means unlimited. */
  allowedUsage: FieldWrapper<SaleorGraphql_Limits>;
  /** Defines the current resource usage. */
  currentUsage: FieldWrapper<SaleorGraphql_Limits>;
};

export type SaleorGraphql_Limits = {
  __typename?: 'Limits';
  /** Defines the number of channels. */
  channels?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Defines the number of order. */
  orders?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Defines the number of product variants. */
  productVariants?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Defines the number of staff users. */
  staffUsers?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Defines the number of warehouses. */
  warehouses?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

/**
 * List payment methods stored for the user by payment gateway.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_ListStoredPaymentMethods = SaleorGraphql_Event & {
  __typename?: 'ListStoredPaymentMethods';
  /** Channel in context which was used to fetch the list of payment methods. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user for which the app should return a list of payment methods. */
  user: FieldWrapper<SaleorGraphql_User>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** The manifest definition. */
export type SaleorGraphql_Manifest = {
  __typename?: 'Manifest';
  /** Description of the app displayed in the dashboard. */
  about?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** App website rendered in the dashboard. */
  appUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The audience that will be included in all JWT tokens for the app.
   *
   * Added in Saleor 3.8.
   */
  audience?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The App's author name.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  author?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * App's brand data.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  brand?: Maybe<FieldWrapper<SaleorGraphql_AppManifestBrand>>;
  /**
   * URL to iframe with the configuration for the app.
   * @deprecated This field will be removed in Saleor 4.0. Use `appUrl` instead.
   */
  configurationUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Description of the data privacy defined for this app.
   * @deprecated This field will be removed in Saleor 4.0. Use `dataPrivacyUrl` instead.
   */
  dataPrivacy?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** URL to the full privacy policy. */
  dataPrivacyUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of extensions that will be mounted in Saleor's dashboard. For details, please [see the extension section.](https://docs.saleor.io/docs/3.x/developer/extending/apps/extending-dashboard-with-apps#key-concepts) */
  extensions: Array<FieldWrapper<SaleorGraphql_AppManifestExtension>>;
  /** External URL to the app homepage. */
  homepageUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The identifier of the manifest for the app. */
  identifier: FieldWrapper<Scalars['String']['output']>;
  /** The name of the manifest for the app . */
  name: FieldWrapper<Scalars['String']['output']>;
  /** The array permissions required for the app. */
  permissions?: Maybe<Array<FieldWrapper<SaleorGraphql_Permission>>>;
  /**
   * Determines the app's required Saleor version as semver range.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  requiredSaleorVersion?: Maybe<FieldWrapper<SaleorGraphql_AppManifestRequiredSaleorVersion>>;
  /** External URL to the page where app users can find support. */
  supportUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Endpoint used during process of app installation, [see installing an app.](https://docs.saleor.io/docs/3.x/developer/extending/apps/installing-apps#installing-an-app) */
  tokenTargetUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The version of the manifest for the app. */
  version: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of the app's webhooks.
   *
   * Added in Saleor 3.5.
   */
  webhooks: Array<FieldWrapper<SaleorGraphql_AppManifestWebhook>>;
};

/** Metadata for the Margin class. */
export type SaleorGraphql_Margin = {
  __typename?: 'Margin';
  /** The starting value of the margin. */
  start?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The ending value of the margin. */
  stop?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

/**
 * Determine the mark as paid strategy for the channel.
 *
 *     TRANSACTION_FLOW - new orders marked as paid will receive a
 *     `TransactionItem` object, that will cover the `order.total`.
 *
 *     PAYMENT_FLOW - new orders marked as paid will receive a
 *     `Payment` object, that will cover the `order.total`.
 */
export enum SaleorGraphql_MarkAsPaidStrategyEnum {
  PaymentFlow = 'PAYMENT_FLOW',
  TransactionFlow = 'TRANSACTION_FLOW'
}

/** An enumeration. */
export enum SaleorGraphql_MeasurementUnitsEnum {
  AcreFt = 'ACRE_FT',
  AcreIn = 'ACRE_IN',
  Cm = 'CM',
  CubicCentimeter = 'CUBIC_CENTIMETER',
  CubicDecimeter = 'CUBIC_DECIMETER',
  CubicFoot = 'CUBIC_FOOT',
  CubicInch = 'CUBIC_INCH',
  CubicMeter = 'CUBIC_METER',
  CubicMillimeter = 'CUBIC_MILLIMETER',
  CubicYard = 'CUBIC_YARD',
  Dm = 'DM',
  FlOz = 'FL_OZ',
  Ft = 'FT',
  G = 'G',
  Inch = 'INCH',
  Kg = 'KG',
  Km = 'KM',
  Lb = 'LB',
  Liter = 'LITER',
  M = 'M',
  Mm = 'MM',
  Oz = 'OZ',
  Pint = 'PINT',
  Qt = 'QT',
  SqCm = 'SQ_CM',
  SqDm = 'SQ_DM',
  SqFt = 'SQ_FT',
  SqInch = 'SQ_INCH',
  SqKm = 'SQ_KM',
  SqM = 'SQ_M',
  SqMm = 'SQ_MM',
  SqYd = 'SQ_YD',
  Tonne = 'TONNE',
  Yd = 'YD'
}

export type SaleorGraphql_MeasurementUnitsEnumFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<SaleorGraphql_MeasurementUnitsEnum | '%future added value'>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<SaleorGraphql_MeasurementUnitsEnum | '%future added value'>>;
};

export enum SaleorGraphql_MediaChoicesSortField {
  /** Sort media by ID. */
  Id = 'ID'
}

export type SaleorGraphql_MediaInput = {
  /** Alt text for a product media. */
  alt?: InputMaybe<Scalars['String']['input']>;
  /** Represents an image file in a multipart request. */
  image?: InputMaybe<Scalars['Upload']['input']>;
  /** Represents an URL to an external media. */
  mediaUrl?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_MediaSortingInput = {
  /** Specifies the direction in which to sort media. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort media by the selected field. */
  field: SaleorGraphql_MediaChoicesSortField | '%future added value';
};

/** Represents a single menu - an object that is used to help navigate through the store. */
export type SaleorGraphql_Menu = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Menu';
  /** The ID of the menu. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Menu items associated with this menu. */
  items?: Maybe<Array<FieldWrapper<SaleorGraphql_MenuItem>>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The name of the menu. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Slug of the menu. */
  slug: FieldWrapper<Scalars['String']['output']>;
};


/** Represents a single menu - an object that is used to help navigate through the store. */
export type SaleorGraphql_MenuMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a single menu - an object that is used to help navigate through the store. */
export type SaleorGraphql_MenuMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a single menu - an object that is used to help navigate through the store. */
export type SaleorGraphql_MenuPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a single menu - an object that is used to help navigate through the store. */
export type SaleorGraphql_MenuPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Deletes menus.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_DELETED (async): A menu was deleted.
 */
export type SaleorGraphql_MenuBulkDelete = {
  __typename?: 'MenuBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

export type SaleorGraphql_MenuCountableConnection = {
  __typename?: 'MenuCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_MenuCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_MenuCountableEdge = {
  __typename?: 'MenuCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Menu>;
};

/**
 * Creates a new Menu.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_CREATED (async): A menu was created.
 */
export type SaleorGraphql_MenuCreate = {
  __typename?: 'MenuCreate';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

export type SaleorGraphql_MenuCreateInput = {
  /** List of menu items. */
  items?: InputMaybe<Array<SaleorGraphql_MenuItemInput>>;
  /** Name of the menu. */
  name: Scalars['String']['input'];
  /** Slug of the menu. Will be generated if not provided. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new menu is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuCreated = SaleorGraphql_Event & {
  __typename?: 'MenuCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The menu the event relates to. */
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new menu is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuCreatedMenuArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a menu.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_DELETED (async): A menu was deleted.
 */
export type SaleorGraphql_MenuDelete = {
  __typename?: 'MenuDelete';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

/**
 * Event sent when menu is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuDeleted = SaleorGraphql_Event & {
  __typename?: 'MenuDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The menu the event relates to. */
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when menu is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuDeletedMenuArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_MenuError = {
  __typename?: 'MenuError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_MenuErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_MenuErrorCode {
  CannotAssignNode = 'CANNOT_ASSIGN_NODE',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidMenuItem = 'INVALID_MENU_ITEM',
  NotFound = 'NOT_FOUND',
  NoMenuItemProvided = 'NO_MENU_ITEM_PROVIDED',
  Required = 'REQUIRED',
  TooManyMenuItems = 'TOO_MANY_MENU_ITEMS',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_MenuFilterInput = {
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Array<Scalars['String']['input']>>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_MenuInput = {
  /** Name of the menu. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Slug of the menu. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Represents a single item of the related menu. Can store categories, collection or pages. */
export type SaleorGraphql_MenuItem = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'MenuItem';
  /** Category associated with the menu item. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Represents the child items of the current menu item. */
  children?: Maybe<Array<FieldWrapper<SaleorGraphql_MenuItem>>>;
  /** A collection associated with this menu item. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** The ID of the menu item. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Indicates the position of the menu item within the menu structure. */
  level: FieldWrapper<Scalars['Int']['output']>;
  /** Represents the menu to which the menu item belongs. */
  menu: FieldWrapper<SaleorGraphql_Menu>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The name of the menu item. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** A page associated with this menu item. Requires one of the following permissions to include unpublished items: MANAGE_PAGES. */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** ID of parent menu item. If empty, menu will be top level menu. */
  parent?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Returns translated menu item fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_MenuItemTranslation>>;
  /** URL to the menu item. */
  url?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/** Represents a single item of the related menu. Can store categories, collection or pages. */
export type SaleorGraphql_MenuItemMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a single item of the related menu. Can store categories, collection or pages. */
export type SaleorGraphql_MenuItemMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a single item of the related menu. Can store categories, collection or pages. */
export type SaleorGraphql_MenuItemPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a single item of the related menu. Can store categories, collection or pages. */
export type SaleorGraphql_MenuItemPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a single item of the related menu. Can store categories, collection or pages. */
export type SaleorGraphql_MenuItemTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Deletes menu items.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_ITEM_DELETED (async): A menu item was deleted.
 */
export type SaleorGraphql_MenuItemBulkDelete = {
  __typename?: 'MenuItemBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

export type SaleorGraphql_MenuItemCountableConnection = {
  __typename?: 'MenuItemCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_MenuItemCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_MenuItemCountableEdge = {
  __typename?: 'MenuItemCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_MenuItem>;
};

/**
 * Creates a new menu item.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_ITEM_CREATED (async): A menu item was created.
 */
export type SaleorGraphql_MenuItemCreate = {
  __typename?: 'MenuItemCreate';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
};

export type SaleorGraphql_MenuItemCreateInput = {
  /** Category to which item points. */
  category?: InputMaybe<Scalars['ID']['input']>;
  /** Collection to which item points. */
  collection?: InputMaybe<Scalars['ID']['input']>;
  /** Menu to which item belongs. */
  menu: Scalars['ID']['input'];
  /** Name of the menu item. */
  name: Scalars['String']['input'];
  /** Page to which item points. */
  page?: InputMaybe<Scalars['ID']['input']>;
  /** ID of the parent menu. If empty, menu will be top level menu. */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** URL of the pointed item. */
  url?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new menu item is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuItemCreated = SaleorGraphql_Event & {
  __typename?: 'MenuItemCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The menu item the event relates to. */
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new menu item is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuItemCreatedMenuItemArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a menu item.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_ITEM_DELETED (async): A menu item was deleted.
 */
export type SaleorGraphql_MenuItemDelete = {
  __typename?: 'MenuItemDelete';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
};

/**
 * Event sent when menu item is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuItemDeleted = SaleorGraphql_Event & {
  __typename?: 'MenuItemDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The menu item the event relates to. */
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when menu item is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuItemDeletedMenuItemArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_MenuItemFilterInput = {
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_MenuItemInput = {
  /** Category to which item points. */
  category?: InputMaybe<Scalars['ID']['input']>;
  /** Collection to which item points. */
  collection?: InputMaybe<Scalars['ID']['input']>;
  /** Name of the menu item. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Page to which item points. */
  page?: InputMaybe<Scalars['ID']['input']>;
  /** URL of the pointed item. */
  url?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Moves items of menus.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_ITEM_UPDATED (async): Optionally triggered when sort order or parent changed for menu item.
 */
export type SaleorGraphql_MenuItemMove = {
  __typename?: 'MenuItemMove';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** Assigned menu to move within. */
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

export type SaleorGraphql_MenuItemMoveInput = {
  /** The menu item ID to move. */
  itemId: Scalars['ID']['input'];
  /** ID of the parent menu. If empty, menu will be top level menu. */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged. */
  sortOrder?: InputMaybe<Scalars['Int']['input']>;
};

export type SaleorGraphql_MenuItemSortingInput = {
  /** Specifies the direction in which to sort menu items. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort menu items by the selected field. */
  field: SaleorGraphql_MenuItemsSortField | '%future added value';
};

/** Represents menu item's original translatable fields and related translations. */
export type SaleorGraphql_MenuItemTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'MenuItemTranslatableContent';
  /** The ID of the menu item translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Represents a single item of the related menu. Can store categories, collection or pages.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /**
   * The ID of the menu item to translate.
   *
   * Added in Saleor 3.14.
   */
  menuItemId: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the menu item to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Returns translated menu item fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_MenuItemTranslation>>;
};


/** Represents menu item's original translatable fields and related translations. */
export type SaleorGraphql_MenuItemTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a menu item.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_MenuItemTranslate = {
  __typename?: 'MenuItemTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** Represents menu item translations. */
export type SaleorGraphql_MenuItemTranslation = SaleorGraphql_Node & {
  __typename?: 'MenuItemTranslation';
  /** The ID of the menu item translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated menu item name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Represents the menu item fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_MenuItemTranslatableContent>>;
};

/**
 * Updates a menu item.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_ITEM_UPDATED (async): A menu item was updated.
 */
export type SaleorGraphql_MenuItemUpdate = {
  __typename?: 'MenuItemUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
};

/**
 * Event sent when menu item is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuItemUpdated = SaleorGraphql_Event & {
  __typename?: 'MenuItemUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The menu item the event relates to. */
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when menu item is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuItemUpdatedMenuItemArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export enum SaleorGraphql_MenuItemsSortField {
  /** Sort menu items by name. */
  Name = 'NAME'
}

export enum SaleorGraphql_MenuSortField {
  /** Sort menus by items count. */
  ItemsCount = 'ITEMS_COUNT',
  /** Sort menus by name. */
  Name = 'NAME'
}

export type SaleorGraphql_MenuSortingInput = {
  /** Specifies the direction in which to sort menus. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort menus by the selected field. */
  field: SaleorGraphql_MenuSortField | '%future added value';
};

/**
 * Updates a menu.
 *
 * Requires one of the following permissions: MANAGE_MENUS.
 *
 * Triggers the following webhook events:
 * - MENU_UPDATED (async): A menu was updated.
 */
export type SaleorGraphql_MenuUpdate = {
  __typename?: 'MenuUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  menuErrors: Array<FieldWrapper<SaleorGraphql_MenuError>>;
};

/**
 * Event sent when menu is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuUpdated = SaleorGraphql_Event & {
  __typename?: 'MenuUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The menu the event relates to. */
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when menu is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_MenuUpdatedMenuArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_MetadataError = {
  __typename?: 'MetadataError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_MetadataErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_MetadataErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  NotUpdated = 'NOT_UPDATED',
  Required = 'REQUIRED'
}

export type SaleorGraphql_MetadataFilter = {
  /** Key of a metadata item. */
  key: Scalars['String']['input'];
  /** Value of a metadata item. */
  value?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_MetadataInput = {
  /** Key of a metadata item. */
  key: Scalars['String']['input'];
  /** Value of a metadata item. */
  value: Scalars['String']['input'];
};

export type SaleorGraphql_MetadataItem = {
  __typename?: 'MetadataItem';
  /** Key of a metadata item. */
  key: FieldWrapper<Scalars['String']['output']>;
  /** Value of a metadata item. */
  value: FieldWrapper<Scalars['String']['output']>;
};

/** Represents amount of money in specific currency. */
export type SaleorGraphql_Money = {
  __typename?: 'Money';
  /** Amount of money. */
  amount: FieldWrapper<Scalars['Float']['output']>;
  /** Currency code. */
  currency: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_MoneyInput = {
  /** Amount of money. */
  amount: Scalars['PositiveDecimal']['input'];
  /** Currency code. */
  currency: Scalars['String']['input'];
};

/** Represents a range of amounts of money. */
export type SaleorGraphql_MoneyRange = {
  __typename?: 'MoneyRange';
  /** Lower bound of a price range. */
  start?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Upper bound of a price range. */
  stop?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
};

export type SaleorGraphql_MoveProductInput = {
  /** The ID of the product to move. */
  productId: Scalars['ID']['input'];
  /** The relative sorting position of the product (from -inf to +inf) starting from the first given product's actual position.1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged. */
  sortOrder?: InputMaybe<Scalars['Int']['input']>;
};

export type SaleorGraphql_Mutation = {
  __typename?: 'Mutation';
  /**
   * Create a new address for the customer.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A customer account was updated.
   * - ADDRESS_CREATED (async): An address was created.
   */
  accountAddressCreate?: Maybe<FieldWrapper<SaleorGraphql_AccountAddressCreate>>;
  /**
   * Delete an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
   *
   * Triggers the following webhook events:
   * - ADDRESS_DELETED (async): An address was deleted.
   */
  accountAddressDelete?: Maybe<FieldWrapper<SaleorGraphql_AccountAddressDelete>>;
  /**
   * Updates an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER.
   *
   * Triggers the following webhook events:
   * - ADDRESS_UPDATED (async): An address was updated.
   */
  accountAddressUpdate?: Maybe<FieldWrapper<SaleorGraphql_AccountAddressUpdate>>;
  /**
   * Remove user account.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - ACCOUNT_DELETED (async): Account was deleted.
   */
  accountDelete?: Maybe<FieldWrapper<SaleorGraphql_AccountDelete>>;
  /**
   * Register a new user.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_CREATED (async): A new customer account was created.
   * - NOTIFY_USER (async): A notification for account confirmation.
   * - ACCOUNT_CONFIRMATION_REQUESTED (async): An user confirmation was requested. This event is always sent regardless of settings.
   */
  accountRegister?: Maybe<FieldWrapper<SaleorGraphql_AccountRegister>>;
  /**
   * Sends an email with the account removal link for the logged-in user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for account delete request.
   * - ACCOUNT_DELETE_REQUESTED (async): An account delete requested.
   */
  accountRequestDeletion?: Maybe<FieldWrapper<SaleorGraphql_AccountRequestDeletion>>;
  /**
   * Sets a default address for the authenticated user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A customer's address was updated.
   */
  accountSetDefaultAddress?: Maybe<FieldWrapper<SaleorGraphql_AccountSetDefaultAddress>>;
  /**
   * Updates the account of the logged-in user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A customer account was updated.
   * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
   */
  accountUpdate?: Maybe<FieldWrapper<SaleorGraphql_AccountUpdate>>;
  /**
   * Creates user address.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - ADDRESS_CREATED (async): A new address was created.
   */
  addressCreate?: Maybe<FieldWrapper<SaleorGraphql_AddressCreate>>;
  /**
   * Deletes an address.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - ADDRESS_DELETED (async): An address was deleted.
   */
  addressDelete?: Maybe<FieldWrapper<SaleorGraphql_AddressDelete>>;
  /**
   * Sets a default address for the given user.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A customer was updated.
   */
  addressSetDefault?: Maybe<FieldWrapper<SaleorGraphql_AddressSetDefault>>;
  /**
   * Updates an address.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - ADDRESS_UPDATED (async): An address was updated.
   */
  addressUpdate?: Maybe<FieldWrapper<SaleorGraphql_AddressUpdate>>;
  /**
   * Activate the app.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   *
   * Triggers the following webhook events:
   * - APP_STATUS_CHANGED (async): An app was activated.
   */
  appActivate?: Maybe<FieldWrapper<SaleorGraphql_AppActivate>>;
  /**
   * Creates a new app. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS.
   *
   * Triggers the following webhook events:
   * - APP_INSTALLED (async): An app was installed.
   */
  appCreate?: Maybe<FieldWrapper<SaleorGraphql_AppCreate>>;
  /**
   * Deactivate the app.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   *
   * Triggers the following webhook events:
   * - APP_STATUS_CHANGED (async): An app was deactivated.
   */
  appDeactivate?: Maybe<FieldWrapper<SaleorGraphql_AppDeactivate>>;
  /**
   * Deletes an app.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   *
   * Triggers the following webhook events:
   * - APP_DELETED (async): An app was deleted.
   */
  appDelete?: Maybe<FieldWrapper<SaleorGraphql_AppDelete>>;
  /**
   * Delete failed installation.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   */
  appDeleteFailedInstallation?: Maybe<FieldWrapper<SaleorGraphql_AppDeleteFailedInstallation>>;
  /**
   * Fetch and validate manifest.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   */
  appFetchManifest?: Maybe<FieldWrapper<SaleorGraphql_AppFetchManifest>>;
  /** Install new app by using app manifest. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS. */
  appInstall?: Maybe<FieldWrapper<SaleorGraphql_AppInstall>>;
  /**
   * Retry failed installation of new app.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   *
   * Triggers the following webhook events:
   * - APP_INSTALLED (async): An app was installed.
   */
  appRetryInstall?: Maybe<FieldWrapper<SaleorGraphql_AppRetryInstall>>;
  /**
   * Creates a new token.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   */
  appTokenCreate?: Maybe<FieldWrapper<SaleorGraphql_AppTokenCreate>>;
  /**
   * Deletes an authentication token assigned to app.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   */
  appTokenDelete?: Maybe<FieldWrapper<SaleorGraphql_AppTokenDelete>>;
  /** Verify provided app token. */
  appTokenVerify?: Maybe<FieldWrapper<SaleorGraphql_AppTokenVerify>>;
  /**
   * Updates an existing app.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   *
   * Triggers the following webhook events:
   * - APP_UPDATED (async): An app was updated.
   */
  appUpdate?: Maybe<FieldWrapper<SaleorGraphql_AppUpdate>>;
  /**
   * Assigns storefront's navigation menus.
   *
   * Requires one of the following permissions: MANAGE_MENUS, MANAGE_SETTINGS.
   */
  assignNavigation?: Maybe<FieldWrapper<SaleorGraphql_AssignNavigation>>;
  /**
   * Add shipping zone to given warehouse.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  assignWarehouseShippingZone?: Maybe<FieldWrapper<SaleorGraphql_WarehouseShippingZoneAssign>>;
  /**
   * Creates attributes.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_CREATED (async): An attribute was created.
   */
  attributeBulkCreate?: Maybe<FieldWrapper<SaleorGraphql_AttributeBulkCreate>>;
  /**
   * Deletes attributes.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_DELETED (async): An attribute was deleted.
   */
  attributeBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_AttributeBulkDelete>>;
  /**
   * Creates/updates translations for attributes.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  attributeBulkTranslate?: Maybe<FieldWrapper<SaleorGraphql_AttributeBulkTranslate>>;
  /**
   * Updates attributes.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_UPDATED (async): An attribute was updated. Optionally called when new attribute value was created or deleted.
   * - ATTRIBUTE_VALUE_CREATED (async): Called optionally when an attribute value was created.
   * - ATTRIBUTE_VALUE_DELETED (async): Called optionally when an attribute value was deleted.
   */
  attributeBulkUpdate?: Maybe<FieldWrapper<SaleorGraphql_AttributeBulkUpdate>>;
  /**
   * Creates an attribute.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_CREATED (async): An attribute was created.
   */
  attributeCreate?: Maybe<FieldWrapper<SaleorGraphql_AttributeCreate>>;
  /**
   * Deletes an attribute.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_DELETED (async): An attribute was deleted.
   */
  attributeDelete?: Maybe<FieldWrapper<SaleorGraphql_AttributeDelete>>;
  /**
   * Reorder the values of an attribute.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_VALUE_UPDATED (async): An attribute value was updated.
   * - ATTRIBUTE_UPDATED (async): An attribute was updated.
   */
  attributeReorderValues?: Maybe<FieldWrapper<SaleorGraphql_AttributeReorderValues>>;
  /**
   * Creates/updates translations for an attribute.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  attributeTranslate?: Maybe<FieldWrapper<SaleorGraphql_AttributeTranslate>>;
  /**
   * Updates attribute.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_UPDATED (async): An attribute was updated.
   */
  attributeUpdate?: Maybe<FieldWrapper<SaleorGraphql_AttributeUpdate>>;
  /**
   * Deletes values of attributes.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_VALUE_DELETED (async): An attribute value was deleted.
   * - ATTRIBUTE_UPDATED (async): An attribute was updated.
   */
  attributeValueBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueBulkDelete>>;
  /**
   * Creates/updates translations for attributes values.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  attributeValueBulkTranslate?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueBulkTranslate>>;
  /**
   * Creates a value for an attribute.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_VALUE_CREATED (async): An attribute value was created.
   * - ATTRIBUTE_UPDATED (async): An attribute was updated.
   */
  attributeValueCreate?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueCreate>>;
  /**
   * Deletes a value of an attribute.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_VALUE_DELETED (async): An attribute value was deleted.
   * - ATTRIBUTE_UPDATED (async): An attribute was updated.
   */
  attributeValueDelete?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueDelete>>;
  /**
   * Creates/updates translations for an attribute value.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  attributeValueTranslate?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueTranslate>>;
  /**
   * Updates value of an attribute.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   *
   * Triggers the following webhook events:
   * - ATTRIBUTE_VALUE_UPDATED (async): An attribute value was updated.
   * - ATTRIBUTE_UPDATED (async): An attribute was updated.
   */
  attributeValueUpdate?: Maybe<FieldWrapper<SaleorGraphql_AttributeValueUpdate>>;
  /**
   * Deletes categories.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  categoryBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_CategoryBulkDelete>>;
  /**
   * Creates a new category.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  categoryCreate?: Maybe<FieldWrapper<SaleorGraphql_CategoryCreate>>;
  /**
   * Deletes a category.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  categoryDelete?: Maybe<FieldWrapper<SaleorGraphql_CategoryDelete>>;
  /**
   * Creates/updates translations for a category.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  categoryTranslate?: Maybe<FieldWrapper<SaleorGraphql_CategoryTranslate>>;
  /**
   * Updates a category.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  categoryUpdate?: Maybe<FieldWrapper<SaleorGraphql_CategoryUpdate>>;
  /**
   * Activate a channel.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   *
   * Triggers the following webhook events:
   * - CHANNEL_STATUS_CHANGED (async): A channel was activated.
   */
  channelActivate?: Maybe<FieldWrapper<SaleorGraphql_ChannelActivate>>;
  /**
   * Creates new channel.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   *
   * Triggers the following webhook events:
   * - CHANNEL_CREATED (async): A channel was created.
   */
  channelCreate?: Maybe<FieldWrapper<SaleorGraphql_ChannelCreate>>;
  /**
   * Deactivate a channel.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   *
   * Triggers the following webhook events:
   * - CHANNEL_STATUS_CHANGED (async): A channel was deactivated.
   */
  channelDeactivate?: Maybe<FieldWrapper<SaleorGraphql_ChannelDeactivate>>;
  /**
   * Delete a channel. Orders associated with the deleted channel will be moved to the target channel. Checkouts, product availability, and pricing will be removed.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   *
   * Triggers the following webhook events:
   * - CHANNEL_DELETED (async): A channel was deleted.
   */
  channelDelete?: Maybe<FieldWrapper<SaleorGraphql_ChannelDelete>>;
  /**
   * Reorder the warehouses of a channel.
   *
   * Added in Saleor 3.7.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   */
  channelReorderWarehouses?: Maybe<FieldWrapper<SaleorGraphql_ChannelReorderWarehouses>>;
  /**
   * Update a channel.
   *
   * Requires one of the following permissions: MANAGE_CHANNELS.
   * Requires one of the following permissions when updating only `orderSettings` field: `MANAGE_CHANNELS`, `MANAGE_ORDERS`.
   * Requires one of the following permissions when updating only `checkoutSettings` field: `MANAGE_CHANNELS`, `MANAGE_CHECKOUTS`.
   * Requires one of the following permissions when updating only `paymentSettings` field: `MANAGE_CHANNELS`, `HANDLE_PAYMENTS`.
   *
   * Triggers the following webhook events:
   * - CHANNEL_UPDATED (async): A channel was updated.
   * - CHANNEL_METADATA_UPDATED (async): Optionally triggered when public or private metadata is updated.
   */
  channelUpdate?: Maybe<FieldWrapper<SaleorGraphql_ChannelUpdate>>;
  /**
   * Adds a gift card or a voucher to a checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutAddPromoCode?: Maybe<FieldWrapper<SaleorGraphql_CheckoutAddPromoCode>>;
  /**
   * Update billing address in the existing checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutBillingAddressUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutBillingAddressUpdate>>;
  /**
   * Completes the checkout. As a result a new order is created. The mutation allows to create the unpaid order when setting `orderSettings.allowUnpaidOrders` for given `Channel` is set to `true`. When `orderSettings.allowUnpaidOrders` is set to `false`, checkout can be completed only when attached `Payment`/`TransactionItem`s fully cover the checkout's total. When processing the checkout with `Payment`, in case of required additional confirmation step like 3D secure, the `confirmationNeeded` flag will be set to True and no order will be created until payment is confirmed with second call of this mutation.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
   * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   * - ORDER_CREATED (async): Triggered when order is created.
   * - NOTIFY_USER (async): A notification for order placement.
   * - NOTIFY_USER (async): A staff notification for order placement.
   * - ORDER_UPDATED (async): Triggered when order received the update after placement.
   * - ORDER_PAID (async): Triggered when newly created order is paid.
   * - ORDER_FULLY_PAID (async): Triggered when newly created order is fully paid.
   * - ORDER_CONFIRMED (async): Optionally triggered when newly created order are automatically marked as confirmed.
   */
  checkoutComplete?: Maybe<FieldWrapper<SaleorGraphql_CheckoutComplete>>;
  /**
   * Create a new checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_CREATED (async): A checkout was created.
   */
  checkoutCreate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutCreate>>;
  /**
   * Create new checkout from existing order.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  checkoutCreateFromOrder?: Maybe<FieldWrapper<SaleorGraphql_CheckoutCreateFromOrder>>;
  /**
   * Sets the customer as the owner of the checkout.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutCustomerAttach?: Maybe<FieldWrapper<SaleorGraphql_CheckoutCustomerAttach>>;
  /**
   * Removes the user assigned as the owner of the checkout.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutCustomerDetach?: Maybe<FieldWrapper<SaleorGraphql_CheckoutCustomerDetach>>;
  /**
   * Updates the delivery method (shipping method or pick up point) of the checkout. Updates the checkout shipping_address for click and collect delivery for a warehouse address.
   *
   * Added in Saleor 3.1.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Triggered when updating the checkout delivery method with the external one.
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutDeliveryMethodUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutDeliveryMethodUpdate>>;
  /**
   * Updates email address in the existing checkout object.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutEmailUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutEmailUpdate>>;
  /**
   * Update language code in the existing checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutLanguageCodeUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutLanguageCodeUpdate>>;
  /**
   * Deletes a CheckoutLine.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   * @deprecated This field will be removed in Saleor 4.0. Use `checkoutLinesDelete` instead.
   */
  checkoutLineDelete?: Maybe<FieldWrapper<SaleorGraphql_CheckoutLineDelete>>;
  /**
   * Adds a checkout line to the existing checkout.If line was already in checkout, its quantity will be increased.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutLinesAdd?: Maybe<FieldWrapper<SaleorGraphql_CheckoutLinesAdd>>;
  /**
   * Deletes checkout lines.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutLinesDelete?: Maybe<FieldWrapper<SaleorGraphql_CheckoutLinesDelete>>;
  /**
   * Updates checkout line in the existing checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutLinesUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutLinesUpdate>>;
  /** Create a new payment for given checkout. */
  checkoutPaymentCreate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutPaymentCreate>>;
  /**
   * Remove a gift card or a voucher from a checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutRemovePromoCode?: Maybe<FieldWrapper<SaleorGraphql_CheckoutRemovePromoCode>>;
  /**
   * Update shipping address in the existing checkout.
   *
   * Triggers the following webhook events:
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   */
  checkoutShippingAddressUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutShippingAddressUpdate>>;
  /**
   * Updates the shipping method of the checkout.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Triggered when updating the checkout shipping method with the external one.
   * - CHECKOUT_UPDATED (async): A checkout was updated.
   * @deprecated This field will be removed in Saleor 4.0. Use `checkoutDeliveryMethodUpdate` instead.
   */
  checkoutShippingMethodUpdate?: Maybe<FieldWrapper<SaleorGraphql_CheckoutShippingMethodUpdate>>;
  /**
   * Adds products to a collection.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionAddProducts?: Maybe<FieldWrapper<SaleorGraphql_CollectionAddProducts>>;
  /**
   * Deletes collections.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_CollectionBulkDelete>>;
  /**
   * Manage collection's availability in channels.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionChannelListingUpdate?: Maybe<FieldWrapper<SaleorGraphql_CollectionChannelListingUpdate>>;
  /**
   * Creates a new collection.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionCreate?: Maybe<FieldWrapper<SaleorGraphql_CollectionCreate>>;
  /**
   * Deletes a collection.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionDelete?: Maybe<FieldWrapper<SaleorGraphql_CollectionDelete>>;
  /**
   * Remove products from a collection.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionRemoveProducts?: Maybe<FieldWrapper<SaleorGraphql_CollectionRemoveProducts>>;
  /**
   * Reorder the products of a collection.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionReorderProducts?: Maybe<FieldWrapper<SaleorGraphql_CollectionReorderProducts>>;
  /**
   * Creates/updates translations for a collection.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  collectionTranslate?: Maybe<FieldWrapper<SaleorGraphql_CollectionTranslate>>;
  /**
   * Updates a collection.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  collectionUpdate?: Maybe<FieldWrapper<SaleorGraphql_CollectionUpdate>>;
  /**
   * Confirm user account with token sent by email during registration.
   *
   * Triggers the following webhook events:
   * - ACCOUNT_CONFIRMED (async): Account was confirmed.
   */
  confirmAccount?: Maybe<FieldWrapper<SaleorGraphql_ConfirmAccount>>;
  /**
   * Confirm the email change of the logged-in user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A customer account was updated.
   * - NOTIFY_USER (async): A notification that account email change was confirmed.
   * - ACCOUNT_EMAIL_CHANGED (async): An account email was changed.
   */
  confirmEmailChange?: Maybe<FieldWrapper<SaleorGraphql_ConfirmEmailChange>>;
  /**
   * Creates new warehouse.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  createWarehouse?: Maybe<FieldWrapper<SaleorGraphql_WarehouseCreate>>;
  /**
   * Deletes customers.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_DELETED (async): A customer account was deleted.
   */
  customerBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_CustomerBulkDelete>>;
  /**
   * Updates customers.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A customer account was updated.
   * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
   */
  customerBulkUpdate?: Maybe<FieldWrapper<SaleorGraphql_CustomerBulkUpdate>>;
  /**
   * Creates a new customer.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_CREATED (async): A new customer account was created.
   * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
   * - NOTIFY_USER (async): A notification for setting the password.
   * - ACCOUNT_SET_PASSWORD_REQUESTED (async): Setting a new password for the account is requested.
   */
  customerCreate?: Maybe<FieldWrapper<SaleorGraphql_CustomerCreate>>;
  /**
   * Deletes a customer.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_DELETED (async): A customer account was deleted.
   */
  customerDelete?: Maybe<FieldWrapper<SaleorGraphql_CustomerDelete>>;
  /**
   * Updates an existing customer.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   *
   * Triggers the following webhook events:
   * - CUSTOMER_UPDATED (async): A new customer account was updated.
   * - CUSTOMER_METADATA_UPDATED (async): Optionally called when customer's metadata was updated.
   */
  customerUpdate?: Maybe<FieldWrapper<SaleorGraphql_CustomerUpdate>>;
  /** Delete metadata of an object. To use it, you need to have access to the modified object. */
  deleteMetadata?: Maybe<FieldWrapper<SaleorGraphql_DeleteMetadata>>;
  /** Delete object's private metadata. To use it, you need to be an authenticated staff user or an app and have access to the modified object. */
  deletePrivateMetadata?: Maybe<FieldWrapper<SaleorGraphql_DeletePrivateMetadata>>;
  /**
   * Deletes selected warehouse.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  deleteWarehouse?: Maybe<FieldWrapper<SaleorGraphql_WarehouseDelete>>;
  /**
   * Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContentCreate?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentCreate>>;
  /**
   * Remove digital content assigned to given variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContentDelete?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentDelete>>;
  /**
   * Update digital content.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContentUpdate?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentUpdate>>;
  /**
   * Generate new URL to digital content.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContentUrlCreate?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentUrlCreate>>;
  /**
   * Deletes draft orders.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  draftOrderBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_DraftOrderBulkDelete>>;
  /**
   * Completes creating an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  draftOrderComplete?: Maybe<FieldWrapper<SaleorGraphql_DraftOrderComplete>>;
  /**
   * Creates a new draft order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  draftOrderCreate?: Maybe<FieldWrapper<SaleorGraphql_DraftOrderCreate>>;
  /**
   * Deletes a draft order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  draftOrderDelete?: Maybe<FieldWrapper<SaleorGraphql_DraftOrderDelete>>;
  /**
   * Deletes order lines.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  draftOrderLinesBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_DraftOrderLinesBulkDelete>>;
  /**
   * Updates a draft order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  draftOrderUpdate?: Maybe<FieldWrapper<SaleorGraphql_DraftOrderUpdate>>;
  /**
   * Retries event delivery.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   */
  eventDeliveryRetry?: Maybe<FieldWrapper<SaleorGraphql_EventDeliveryRetry>>;
  /**
   * Export gift cards to csv file.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for the exported file.
   * - GIFT_CARD_EXPORT_COMPLETED (async): A notification for the exported file.
   */
  exportGiftCards?: Maybe<FieldWrapper<SaleorGraphql_ExportGiftCards>>;
  /**
   * Export products to csv file.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for the exported file.
   * - PRODUCT_EXPORT_COMPLETED (async): A notification for the exported file.
   */
  exportProducts?: Maybe<FieldWrapper<SaleorGraphql_ExportProducts>>;
  /**
   * Export voucher codes to csv/xlsx file.
   *
   * Added in Saleor 3.18.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_CODE_EXPORT_COMPLETED (async): A notification for the exported file.
   */
  exportVoucherCodes?: Maybe<FieldWrapper<SaleorGraphql_ExportVoucherCodes>>;
  /** Prepare external authentication URL for user by custom plugin. */
  externalAuthenticationUrl?: Maybe<FieldWrapper<SaleorGraphql_ExternalAuthenticationUrl>>;
  /** Logout user by custom plugin. */
  externalLogout?: Maybe<FieldWrapper<SaleorGraphql_ExternalLogout>>;
  /**
   * Trigger sending a notification with the notify plugin method. Serializes nodes provided as ids parameter and includes this data in the notification payload.
   *
   * Added in Saleor 3.1.
   * @deprecated \n\nDEPRECATED: this mutation will be removed in Saleor 4.0.
   */
  externalNotificationTrigger?: Maybe<FieldWrapper<SaleorGraphql_ExternalNotificationTrigger>>;
  /** Obtain external access tokens for user by custom plugin. */
  externalObtainAccessTokens?: Maybe<FieldWrapper<SaleorGraphql_ExternalObtainAccessTokens>>;
  /** Refresh user's access by custom plugin. */
  externalRefresh?: Maybe<FieldWrapper<SaleorGraphql_ExternalRefresh>>;
  /** Verify external authentication data by plugin. */
  externalVerify?: Maybe<FieldWrapper<SaleorGraphql_ExternalVerify>>;
  /**
   * Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  fileUpload?: Maybe<FieldWrapper<SaleorGraphql_FileUpload>>;
  /**
   * Activate a gift card.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_STATUS_CHANGED (async): A gift card was activated.
   */
  giftCardActivate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardActivate>>;
  /**
   * Adds note to the gift card.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_UPDATED (async): A gift card was updated.
   */
  giftCardAddNote?: Maybe<FieldWrapper<SaleorGraphql_GiftCardAddNote>>;
  /**
   * Activate gift cards.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_STATUS_CHANGED (async): A gift card was activated.
   */
  giftCardBulkActivate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardBulkActivate>>;
  /**
   * Create gift cards.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_CREATED (async): A gift card was created.
   * - NOTIFY_USER (async): A notification for created gift card.
   */
  giftCardBulkCreate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardBulkCreate>>;
  /**
   * Deactivate gift cards.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_STATUS_CHANGED (async): A gift card was deactivated.
   */
  giftCardBulkDeactivate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardBulkDeactivate>>;
  /**
   * Delete gift cards.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_DELETED (async): A gift card was deleted.
   */
  giftCardBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_GiftCardBulkDelete>>;
  /**
   * Creates a new gift card.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_CREATED (async): A gift card was created.
   * - NOTIFY_USER (async): A notification for created gift card.
   */
  giftCardCreate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardCreate>>;
  /**
   * Deactivate a gift card.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_STATUS_CHANGED (async): A gift card was deactivated.
   */
  giftCardDeactivate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardDeactivate>>;
  /**
   * Delete gift card.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_DELETED (async): A gift card was deleted.
   */
  giftCardDelete?: Maybe<FieldWrapper<SaleorGraphql_GiftCardDelete>>;
  /**
   * Resend a gift card.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for gift card resend.
   */
  giftCardResend?: Maybe<FieldWrapper<SaleorGraphql_GiftCardResend>>;
  /**
   * Update gift card settings.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  giftCardSettingsUpdate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardSettingsUpdate>>;
  /**
   * Update a gift card.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   *
   * Triggers the following webhook events:
   * - GIFT_CARD_UPDATED (async): A gift card was updated.
   */
  giftCardUpdate?: Maybe<FieldWrapper<SaleorGraphql_GiftCardUpdate>>;
  /**
   * Creates a ready to send invoice.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  invoiceCreate?: Maybe<FieldWrapper<SaleorGraphql_InvoiceCreate>>;
  /**
   * Deletes an invoice.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  invoiceDelete?: Maybe<FieldWrapper<SaleorGraphql_InvoiceDelete>>;
  /**
   * Request an invoice for the order using plugin.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   *
   * Triggers the following webhook events:
   * - INVOICE_REQUESTED (async): An invoice was requested.
   */
  invoiceRequest?: Maybe<FieldWrapper<SaleorGraphql_InvoiceRequest>>;
  /**
   * Requests deletion of an invoice.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   *
   * Triggers the following webhook events:
   * - INVOICE_DELETED (async): An invoice was requested to delete.
   */
  invoiceRequestDelete?: Maybe<FieldWrapper<SaleorGraphql_InvoiceRequestDelete>>;
  /**
   * Send an invoice notification to the customer.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   *
   * Triggers the following webhook events:
   * - INVOICE_SENT (async): A notification for invoice send
   * - NOTIFY_USER (async): A notification for invoice send
   */
  invoiceSendNotification?: Maybe<FieldWrapper<SaleorGraphql_InvoiceSendNotification>>;
  /**
   * Updates an invoice.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  invoiceUpdate?: Maybe<FieldWrapper<SaleorGraphql_InvoiceUpdate>>;
  /**
   * Deletes menus.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_DELETED (async): A menu was deleted.
   */
  menuBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_MenuBulkDelete>>;
  /**
   * Creates a new Menu.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_CREATED (async): A menu was created.
   */
  menuCreate?: Maybe<FieldWrapper<SaleorGraphql_MenuCreate>>;
  /**
   * Deletes a menu.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_DELETED (async): A menu was deleted.
   */
  menuDelete?: Maybe<FieldWrapper<SaleorGraphql_MenuDelete>>;
  /**
   * Deletes menu items.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_ITEM_DELETED (async): A menu item was deleted.
   */
  menuItemBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_MenuItemBulkDelete>>;
  /**
   * Creates a new menu item.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_ITEM_CREATED (async): A menu item was created.
   */
  menuItemCreate?: Maybe<FieldWrapper<SaleorGraphql_MenuItemCreate>>;
  /**
   * Deletes a menu item.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_ITEM_DELETED (async): A menu item was deleted.
   */
  menuItemDelete?: Maybe<FieldWrapper<SaleorGraphql_MenuItemDelete>>;
  /**
   * Moves items of menus.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_ITEM_UPDATED (async): Optionally triggered when sort order or parent changed for menu item.
   */
  menuItemMove?: Maybe<FieldWrapper<SaleorGraphql_MenuItemMove>>;
  /**
   * Creates/updates translations for a menu item.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  menuItemTranslate?: Maybe<FieldWrapper<SaleorGraphql_MenuItemTranslate>>;
  /**
   * Updates a menu item.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_ITEM_UPDATED (async): A menu item was updated.
   */
  menuItemUpdate?: Maybe<FieldWrapper<SaleorGraphql_MenuItemUpdate>>;
  /**
   * Updates a menu.
   *
   * Requires one of the following permissions: MANAGE_MENUS.
   *
   * Triggers the following webhook events:
   * - MENU_UPDATED (async): A menu was updated.
   */
  menuUpdate?: Maybe<FieldWrapper<SaleorGraphql_MenuUpdate>>;
  /**
   * Adds note to the order.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   * @deprecated This field will be removed in Saleor 4.0. Use `orderNoteAdd` instead.
   */
  orderAddNote?: Maybe<FieldWrapper<SaleorGraphql_OrderAddNote>>;
  /**
   * Cancels orders.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderBulkCancel?: Maybe<FieldWrapper<SaleorGraphql_OrderBulkCancel>>;
  /**
   * Creates multiple orders.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS_IMPORT.
   */
  orderBulkCreate?: Maybe<FieldWrapper<SaleorGraphql_OrderBulkCreate>>;
  /**
   * Cancel an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderCancel?: Maybe<FieldWrapper<SaleorGraphql_OrderCancel>>;
  /**
   * Capture an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderCapture?: Maybe<FieldWrapper<SaleorGraphql_OrderCapture>>;
  /**
   * Confirms an unconfirmed order by changing status to unfulfilled.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderConfirm?: Maybe<FieldWrapper<SaleorGraphql_OrderConfirm>>;
  /**
   * Create new order from existing checkout. Requires the following permissions: AUTHENTICATED_APP and HANDLE_CHECKOUTS.
   *
   * Added in Saleor 3.2.
   *
   * Triggers the following webhook events:
   * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
   * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
   * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
   * - ORDER_CREATED (async): Triggered when order is created.
   * - NOTIFY_USER (async): A notification for order placement.
   * - NOTIFY_USER (async): A staff notification for order placement.
   * - ORDER_UPDATED (async): Triggered when order received the update after placement.
   * - ORDER_PAID (async): Triggered when newly created order is paid.
   * - ORDER_FULLY_PAID (async): Triggered when newly created order is fully paid.
   * - ORDER_CONFIRMED (async): Optionally triggered when newly created order are automatically marked as confirmed.
   */
  orderCreateFromCheckout?: Maybe<FieldWrapper<SaleorGraphql_OrderCreateFromCheckout>>;
  /**
   * Adds discount to the order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderDiscountAdd?: Maybe<FieldWrapper<SaleorGraphql_OrderDiscountAdd>>;
  /**
   * Remove discount from the order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderDiscountDelete?: Maybe<FieldWrapper<SaleorGraphql_OrderDiscountDelete>>;
  /**
   * Update discount for the order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderDiscountUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderDiscountUpdate>>;
  /**
   * Creates new fulfillments for an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   *
   * Triggers the following webhook events:
   * - FULFILLMENT_CREATED (async): A new fulfillment is created.
   * - ORDER_FULFILLED (async): Order is fulfilled.
   * - FULFILLMENT_TRACKING_NUMBER_UPDATED (async): Sent when fulfillment tracking number is updated.
   * - FULFILLMENT_APPROVED (async): A fulfillment is approved.
   */
  orderFulfill?: Maybe<FieldWrapper<SaleorGraphql_OrderFulfill>>;
  /**
   * Approve existing fulfillment.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   *
   * Triggers the following webhook events:
   * - FULFILLMENT_APPROVED (async): Fulfillment is approved.
   */
  orderFulfillmentApprove?: Maybe<FieldWrapper<SaleorGraphql_FulfillmentApprove>>;
  /**
   * Cancels existing fulfillment and optionally restocks items.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderFulfillmentCancel?: Maybe<FieldWrapper<SaleorGraphql_FulfillmentCancel>>;
  /**
   * Refund products.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderFulfillmentRefundProducts?: Maybe<FieldWrapper<SaleorGraphql_FulfillmentRefundProducts>>;
  /**
   * Return products.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderFulfillmentReturnProducts?: Maybe<FieldWrapper<SaleorGraphql_FulfillmentReturnProducts>>;
  /**
   * Updates a fulfillment for an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   *
   * Triggers the following webhook events:
   * - FULFILLMENT_TRACKING_NUMBER_UPDATED (async): Fulfillment tracking number is updated.
   */
  orderFulfillmentUpdateTracking?: Maybe<FieldWrapper<SaleorGraphql_FulfillmentUpdateTracking>>;
  /**
   * Adds granted refund to the order.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderGrantRefundCreate?: Maybe<FieldWrapper<SaleorGraphql_OrderGrantRefundCreate>>;
  /**
   * Updates granted refund.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderGrantRefundUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderGrantRefundUpdate>>;
  /**
   * Deletes an order line from an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderLineDelete?: Maybe<FieldWrapper<SaleorGraphql_OrderLineDelete>>;
  /**
   * Remove discount applied to the order line.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderLineDiscountRemove?: Maybe<FieldWrapper<SaleorGraphql_OrderLineDiscountRemove>>;
  /**
   * Update discount for the order line.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderLineDiscountUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderLineDiscountUpdate>>;
  /**
   * Updates an order line of an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderLineUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderLineUpdate>>;
  /**
   * Create order lines for an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderLinesCreate?: Maybe<FieldWrapper<SaleorGraphql_OrderLinesCreate>>;
  /**
   * Mark order as manually paid.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderMarkAsPaid?: Maybe<FieldWrapper<SaleorGraphql_OrderMarkAsPaid>>;
  /**
   * Adds note to the order.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderNoteAdd?: Maybe<FieldWrapper<SaleorGraphql_OrderNoteAdd>>;
  /**
   * Updates note of an order.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderNoteUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderNoteUpdate>>;
  /**
   * Refund an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderRefund?: Maybe<FieldWrapper<SaleorGraphql_OrderRefund>>;
  /**
   * Update shop order settings across all channels. Returns `orderSettings` for the first `channel` in alphabetical order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   * @deprecated \n\nDEPRECATED: this mutation will be removed in Saleor 4.0. Use `channelUpdate` mutation instead.
   */
  orderSettingsUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderSettingsUpdate>>;
  /**
   * Updates an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderUpdate?: Maybe<FieldWrapper<SaleorGraphql_OrderUpdate>>;
  /**
   * Updates a shipping method of the order. Requires shipping method ID to update, when null is passed then currently assigned shipping method is removed.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderUpdateShipping?: Maybe<FieldWrapper<SaleorGraphql_OrderUpdateShipping>>;
  /**
   * Void an order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orderVoid?: Maybe<FieldWrapper<SaleorGraphql_OrderVoid>>;
  /**
   * Assign attributes to a given page type.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageAttributeAssign?: Maybe<FieldWrapper<SaleorGraphql_PageAttributeAssign>>;
  /**
   * Unassign attributes from a given page type.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageAttributeUnassign?: Maybe<FieldWrapper<SaleorGraphql_PageAttributeUnassign>>;
  /**
   * Deletes pages.
   *
   * Requires one of the following permissions: MANAGE_PAGES.
   */
  pageBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_PageBulkDelete>>;
  /**
   * Publish pages.
   *
   * Requires one of the following permissions: MANAGE_PAGES.
   */
  pageBulkPublish?: Maybe<FieldWrapper<SaleorGraphql_PageBulkPublish>>;
  /**
   * Creates a new page.
   *
   * Requires one of the following permissions: MANAGE_PAGES.
   */
  pageCreate?: Maybe<FieldWrapper<SaleorGraphql_PageCreate>>;
  /**
   * Deletes a page.
   *
   * Requires one of the following permissions: MANAGE_PAGES.
   */
  pageDelete?: Maybe<FieldWrapper<SaleorGraphql_PageDelete>>;
  /**
   * Reorder page attribute values.
   *
   * Requires one of the following permissions: MANAGE_PAGES.
   */
  pageReorderAttributeValues?: Maybe<FieldWrapper<SaleorGraphql_PageReorderAttributeValues>>;
  /**
   * Creates/updates translations for a page.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  pageTranslate?: Maybe<FieldWrapper<SaleorGraphql_PageTranslate>>;
  /**
   * Delete page types.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageTypeBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_PageTypeBulkDelete>>;
  /**
   * Create a new page type.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageTypeCreate?: Maybe<FieldWrapper<SaleorGraphql_PageTypeCreate>>;
  /**
   * Delete a page type.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageTypeDelete?: Maybe<FieldWrapper<SaleorGraphql_PageTypeDelete>>;
  /**
   * Reorder the attributes of a page type.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageTypeReorderAttributes?: Maybe<FieldWrapper<SaleorGraphql_PageTypeReorderAttributes>>;
  /**
   * Update page type.
   *
   * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  pageTypeUpdate?: Maybe<FieldWrapper<SaleorGraphql_PageTypeUpdate>>;
  /**
   * Updates an existing page.
   *
   * Requires one of the following permissions: MANAGE_PAGES.
   */
  pageUpdate?: Maybe<FieldWrapper<SaleorGraphql_PageUpdate>>;
  /**
   * Change the password of the logged in user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   */
  passwordChange?: Maybe<FieldWrapper<SaleorGraphql_PasswordChange>>;
  /**
   * Captures the authorized payment amount.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  paymentCapture?: Maybe<FieldWrapper<SaleorGraphql_PaymentCapture>>;
  /** Check payment balance. */
  paymentCheckBalance?: Maybe<FieldWrapper<SaleorGraphql_PaymentCheckBalance>>;
  /**
   * Initializes a payment gateway session. It triggers the webhook `PAYMENT_GATEWAY_INITIALIZE_SESSION`, to the requested `paymentGateways`. If `paymentGateways` is not provided, the webhook will be send to all subscribed payment gateways. There is a limit of 100 transaction items per checkout / order.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  paymentGatewayInitialize?: Maybe<FieldWrapper<SaleorGraphql_PaymentGatewayInitialize>>;
  /**
   * Initializes payment gateway for tokenizing payment method session.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - PAYMENT_GATEWAY_INITIALIZE_TOKENIZATION_SESSION (sync): The customer requested to initialize payment gateway for tokenization.
   */
  paymentGatewayInitializeTokenization?: Maybe<FieldWrapper<SaleorGraphql_PaymentGatewayInitializeTokenization>>;
  /** Initializes payment process when it is required by gateway. */
  paymentInitialize?: Maybe<FieldWrapper<SaleorGraphql_PaymentInitialize>>;
  /**
   * Tokenize payment method.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - PAYMENT_METHOD_INITIALIZE_TOKENIZATION_SESSION (sync): The customer requested to tokenize payment method.
   */
  paymentMethodInitializeTokenization?: Maybe<FieldWrapper<SaleorGraphql_PaymentMethodInitializeTokenization>>;
  /**
   * Tokenize payment method.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - PAYMENT_METHOD_PROCESS_TOKENIZATION_SESSION (sync): The customer continues payment method tokenization.
   */
  paymentMethodProcessTokenization?: Maybe<FieldWrapper<SaleorGraphql_PaymentMethodProcessTokenization>>;
  /**
   * Refunds the captured payment amount.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  paymentRefund?: Maybe<FieldWrapper<SaleorGraphql_PaymentRefund>>;
  /**
   * Voids the authorized payment.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  paymentVoid?: Maybe<FieldWrapper<SaleorGraphql_PaymentVoid>>;
  /**
   * Create new permission group. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - PERMISSION_GROUP_CREATED (async)
   */
  permissionGroupCreate?: Maybe<FieldWrapper<SaleorGraphql_PermissionGroupCreate>>;
  /**
   * Delete permission group. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - PERMISSION_GROUP_DELETED (async)
   */
  permissionGroupDelete?: Maybe<FieldWrapper<SaleorGraphql_PermissionGroupDelete>>;
  /**
   * Update permission group. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - PERMISSION_GROUP_UPDATED (async)
   */
  permissionGroupUpdate?: Maybe<FieldWrapper<SaleorGraphql_PermissionGroupUpdate>>;
  /**
   * Update plugin configuration.
   *
   * Requires one of the following permissions: MANAGE_PLUGINS.
   */
  pluginUpdate?: Maybe<FieldWrapper<SaleorGraphql_PluginUpdate>>;
  /**
   * Assign attributes to a given product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productAttributeAssign?: Maybe<FieldWrapper<SaleorGraphql_ProductAttributeAssign>>;
  /**
   * Update attributes assigned to product variant for given product type.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productAttributeAssignmentUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductAttributeAssignmentUpdate>>;
  /**
   * Un-assign attributes from a given product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productAttributeUnassign?: Maybe<FieldWrapper<SaleorGraphql_ProductAttributeUnassign>>;
  /**
   * Creates products.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productBulkCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductBulkCreate>>;
  /**
   * Deletes products.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductBulkDelete>>;
  /**
   * Creates/updates translations for products.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   *
   * Triggers the following webhook events:
   * - TRANSLATION_CREATED (async): Called when a translation was created.
   * - TRANSLATION_UPDATED (async): Called when a translation was updated.
   */
  productBulkTranslate?: Maybe<FieldWrapper<SaleorGraphql_ProductBulkTranslate>>;
  /**
   * Manage product's availability in channels.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productChannelListingUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductChannelListingUpdate>>;
  /**
   * Creates a new product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductCreate>>;
  /**
   * Deletes a product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductDelete>>;
  /**
   * Deletes product media.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productMediaBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductMediaBulkDelete>>;
  /**
   * Create a media object (image or video URL) associated with product. For image, this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productMediaCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductMediaCreate>>;
  /**
   * Deletes a product media.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productMediaDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductMediaDelete>>;
  /**
   * Changes ordering of the product media.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productMediaReorder?: Maybe<FieldWrapper<SaleorGraphql_ProductMediaReorder>>;
  /**
   * Updates a product media.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productMediaUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductMediaUpdate>>;
  /**
   * Reorder product attribute values.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productReorderAttributeValues?: Maybe<FieldWrapper<SaleorGraphql_ProductReorderAttributeValues>>;
  /**
   * Creates/updates translations for a product.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  productTranslate?: Maybe<FieldWrapper<SaleorGraphql_ProductTranslate>>;
  /**
   * Deletes product types.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productTypeBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductTypeBulkDelete>>;
  /**
   * Creates a new product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productTypeCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductTypeCreate>>;
  /**
   * Deletes a product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productTypeDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductTypeDelete>>;
  /**
   * Reorder the attributes of a product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productTypeReorderAttributes?: Maybe<FieldWrapper<SaleorGraphql_ProductTypeReorderAttributes>>;
  /**
   * Updates an existing product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
   */
  productTypeUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductTypeUpdate>>;
  /**
   * Updates an existing product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductUpdate>>;
  /**
   * Creates product variants for a given product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantBulkCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantBulkCreate>>;
  /**
   * Deletes product variants.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantBulkDelete>>;
  /**
   * Creates/updates translations for products variants.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   *
   * Triggers the following webhook events:
   * - TRANSLATION_CREATED (async): A translation was created.
   * - TRANSLATION_UPDATED (async): A translation was updated.
   */
  productVariantBulkTranslate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantBulkTranslate>>;
  /**
   * Update multiple product variants.
   *
   * Added in Saleor 3.11.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantBulkUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantBulkUpdate>>;
  /**
   * Manage product variant prices in channels.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantChannelListingUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantChannelListingUpdate>>;
  /**
   * Creates a new variant for a product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantCreate>>;
  /**
   * Deletes a product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantDelete>>;
  /**
   * Deactivates product variant preorder. It changes all preorder allocation into regular allocation.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantPreorderDeactivate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantPreorderDeactivate>>;
  /**
   * Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantReorder?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantReorder>>;
  /**
   * Reorder product variant attribute values.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantReorderAttributeValues?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantReorderAttributeValues>>;
  /**
   * Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantSetDefault?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantSetDefault>>;
  /**
   * Creates stocks for product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantStocksCreate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantStocksCreate>>;
  /**
   * Delete stocks from product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantStocksDelete?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantStocksDelete>>;
  /**
   * Update stocks for product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantStocksUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantStocksUpdate>>;
  /**
   * Creates/updates translations for a product variant.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  productVariantTranslate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantTranslate>>;
  /**
   * Updates an existing variant for product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  productVariantUpdate?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantUpdate>>;
  /**
   * Deletes promotions.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_DELETED (async): A promotion was deleted.
   */
  promotionBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_PromotionBulkDelete>>;
  /**
   * Creates a new promotion.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_CREATED (async): A promotion was created.
   * - PROMOTION_STARTED (async): Optionally called if promotion was started.
   */
  promotionCreate?: Maybe<FieldWrapper<SaleorGraphql_PromotionCreate>>;
  /**
   * Deletes a promotion.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_DELETED (async): A promotion was deleted.
   */
  promotionDelete?: Maybe<FieldWrapper<SaleorGraphql_PromotionDelete>>;
  /**
   * Creates a new promotion rule.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_RULE_CREATED (async): A promotion rule was created.
   */
  promotionRuleCreate?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleCreate>>;
  /**
   * Deletes a promotion rule.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_RULE_DELETED (async): A promotion rule was deleted.
   */
  promotionRuleDelete?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleDelete>>;
  /**
   * Creates/updates translations for a promotion rule.
   *
   * Added in Saleor 3.17.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  promotionRuleTranslate?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleTranslate>>;
  /**
   * Updates an existing promotion rule.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_RULE_UPDATED (async): A promotion rule was updated.
   */
  promotionRuleUpdate?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleUpdate>>;
  /**
   * Creates/updates translations for a promotion.
   *
   * Added in Saleor 3.17.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  promotionTranslate?: Maybe<FieldWrapper<SaleorGraphql_PromotionTranslate>>;
  /**
   * Updates an existing promotion.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - PROMOTION_UPDATED (async): A promotion was updated.
   * - PROMOTION_STARTED (async): Optionally called if promotion was started.
   * - PROMOTION_ENDED (async): Optionally called if promotion was ended.
   */
  promotionUpdate?: Maybe<FieldWrapper<SaleorGraphql_PromotionUpdate>>;
  /**
   * Request email change of the logged in user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for account email change.
   * - ACCOUNT_CHANGE_EMAIL_REQUESTED (async): An account email change was requested.
   */
  requestEmailChange?: Maybe<FieldWrapper<SaleorGraphql_RequestEmailChange>>;
  /**
   * Sends an email with the account password modification link.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for password reset.
   * - ACCOUNT_SET_PASSWORD_REQUESTED (async): Setting a new password for the account is requested.
   * - STAFF_SET_PASSWORD_REQUESTED (async): Setting a new password for the staff account is requested.
   */
  requestPasswordReset?: Maybe<FieldWrapper<SaleorGraphql_RequestPasswordReset>>;
  /**
   * Deletes sales.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - SALE_DELETED (async): A sale was deleted.
   */
  saleBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_SaleBulkDelete>>;
  /**
   * Adds products, categories, collections to a sale.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionRuleCreate` mutation instead.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - SALE_UPDATED (async): A sale was updated.
   */
  saleCataloguesAdd?: Maybe<FieldWrapper<SaleorGraphql_SaleAddCatalogues>>;
  /**
   * Removes products, categories, collections from a sale.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionRuleUpdate` or `promotionRuleDelete` mutations instead.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - SALE_UPDATED (async): A sale was updated.
   */
  saleCataloguesRemove?: Maybe<FieldWrapper<SaleorGraphql_SaleRemoveCatalogues>>;
  /**
   * Manage sale's availability in channels.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionRuleCreate` or `promotionRuleUpdate` mutations instead.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  saleChannelListingUpdate?: Maybe<FieldWrapper<SaleorGraphql_SaleChannelListingUpdate>>;
  /**
   * Creates a new sale.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionCreate` mutation instead.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - SALE_CREATED (async): A sale was created.
   */
  saleCreate?: Maybe<FieldWrapper<SaleorGraphql_SaleCreate>>;
  /**
   * Deletes a sale.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionDelete` mutation instead.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - SALE_DELETED (async): A sale was deleted.
   */
  saleDelete?: Maybe<FieldWrapper<SaleorGraphql_SaleDelete>>;
  /**
   * Creates/updates translations for a sale.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `PromotionTranslate` mutation instead.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  saleTranslate?: Maybe<FieldWrapper<SaleorGraphql_SaleTranslate>>;
  /**
   * Updates a sale.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionUpdate` mutation instead.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - SALE_UPDATED (async): A sale was updated.
   * - SALE_TOGGLE (async): Optionally triggered when a sale is started or stopped.
   */
  saleUpdate?: Maybe<FieldWrapper<SaleorGraphql_SaleUpdate>>;
  /**
   * Sends a notification confirmation.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - NOTIFY_USER (async): A notification for account confirmation.
   * - ACCOUNT_CONFIRMATION_REQUESTED (async): An account confirmation was requested. This event is always sent regardless of settings.
   */
  sendConfirmationEmail?: Maybe<FieldWrapper<SaleorGraphql_SendConfirmationEmail>>;
  /** Sets the user's password from the token sent by email using the RequestPasswordReset mutation. */
  setPassword?: Maybe<FieldWrapper<SaleorGraphql_SetPassword>>;
  /**
   * Manage shipping method's availability in channels.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingMethodChannelListingUpdate?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodChannelListingUpdate>>;
  /**
   * Deletes shipping prices.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingPriceBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceBulkDelete>>;
  /**
   * Creates a new shipping price.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingPriceCreate?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceCreate>>;
  /**
   * Deletes a shipping price.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingPriceDelete?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceDelete>>;
  /**
   * Exclude products from shipping price.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingPriceExcludeProducts?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceExcludeProducts>>;
  /**
   * Remove product from excluded list for shipping price.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingPriceRemoveProductFromExclude?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceRemoveProductFromExclude>>;
  /**
   * Creates/updates translations for a shipping method.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  shippingPriceTranslate?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceTranslate>>;
  /**
   * Updates a new shipping price.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingPriceUpdate?: Maybe<FieldWrapper<SaleorGraphql_ShippingPriceUpdate>>;
  /**
   * Deletes shipping zones.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingZoneBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_ShippingZoneBulkDelete>>;
  /**
   * Creates a new shipping zone.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingZoneCreate?: Maybe<FieldWrapper<SaleorGraphql_ShippingZoneCreate>>;
  /**
   * Deletes a shipping zone.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingZoneDelete?: Maybe<FieldWrapper<SaleorGraphql_ShippingZoneDelete>>;
  /**
   * Updates a new shipping zone.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingZoneUpdate?: Maybe<FieldWrapper<SaleorGraphql_ShippingZoneUpdate>>;
  /**
   * Update the shop's address. If the `null` value is passed, the currently selected address will be deleted.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  shopAddressUpdate?: Maybe<FieldWrapper<SaleorGraphql_ShopAddressUpdate>>;
  /**
   * Updates site domain of the shop.
   *
   * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `PUBLIC_URL` environment variable instead.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   * @deprecated \n\nDEPRECATED: this mutation will be removed in Saleor 4.0. Use `PUBLIC_URL` environment variable instead.
   */
  shopDomainUpdate?: Maybe<FieldWrapper<SaleorGraphql_ShopDomainUpdate>>;
  /**
   * Fetch tax rates.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   * @deprecated \n\nDEPRECATED: this mutation will be removed in Saleor 4.0.
   */
  shopFetchTaxRates?: Maybe<FieldWrapper<SaleorGraphql_ShopFetchTaxRates>>;
  /**
   * Creates/updates translations for shop settings.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  shopSettingsTranslate?: Maybe<FieldWrapper<SaleorGraphql_ShopSettingsTranslate>>;
  /**
   * Updates shop settings.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   *
   * Triggers the following webhook events:
   * - SHOP_METADATA_UPDATED (async): Optionally triggered when public or private metadata is updated.
   */
  shopSettingsUpdate?: Maybe<FieldWrapper<SaleorGraphql_ShopSettingsUpdate>>;
  /**
   * Deletes staff users. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - STAFF_DELETED (async): A staff account was deleted.
   */
  staffBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_StaffBulkDelete>>;
  /**
   * Creates a new staff user. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - STAFF_CREATED (async): A new staff account was created.
   * - NOTIFY_USER (async): A notification for setting the password.
   * - STAFF_SET_PASSWORD_REQUESTED (async): Setting a new password for the staff account is requested.
   */
  staffCreate?: Maybe<FieldWrapper<SaleorGraphql_StaffCreate>>;
  /**
   * Deletes a staff user. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - STAFF_DELETED (async): A staff account was deleted.
   */
  staffDelete?: Maybe<FieldWrapper<SaleorGraphql_StaffDelete>>;
  /**
   * Creates a new staff notification recipient.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  staffNotificationRecipientCreate?: Maybe<FieldWrapper<SaleorGraphql_StaffNotificationRecipientCreate>>;
  /**
   * Delete staff notification recipient.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  staffNotificationRecipientDelete?: Maybe<FieldWrapper<SaleorGraphql_StaffNotificationRecipientDelete>>;
  /**
   * Updates a staff notification recipient.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  staffNotificationRecipientUpdate?: Maybe<FieldWrapper<SaleorGraphql_StaffNotificationRecipientUpdate>>;
  /**
   * Updates an existing staff user. Apps are not allowed to perform this mutation.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   *
   * Triggers the following webhook events:
   * - STAFF_UPDATED (async): A staff account was updated.
   */
  staffUpdate?: Maybe<FieldWrapper<SaleorGraphql_StaffUpdate>>;
  /**
   * Updates stocks for a given variant and warehouse. Variant and warehouse selectors have to be the same for all stock inputs. Is not allowed to use 'variantId' in one input and 'variantExternalReference' in another.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   *
   * Triggers the following webhook events:
   * - PRODUCT_VARIANT_STOCK_UPDATED (async): A product variant stock details were updated.
   */
  stockBulkUpdate?: Maybe<FieldWrapper<SaleorGraphql_StockBulkUpdate>>;
  /**
   * Request to delete a stored payment method on payment provider side.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   *
   * Triggers the following webhook events:
   * - STORED_PAYMENT_METHOD_DELETE_REQUESTED (sync): The customer requested to delete a payment method.
   */
  storedPaymentMethodRequestDelete?: Maybe<FieldWrapper<SaleorGraphql_StoredPaymentMethodRequestDelete>>;
  /**
   * Create a tax class.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxClassCreate?: Maybe<FieldWrapper<SaleorGraphql_TaxClassCreate>>;
  /**
   * Delete a tax class. After deleting the tax class any products, product types or shipping methods using it are updated to use the default tax class.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxClassDelete?: Maybe<FieldWrapper<SaleorGraphql_TaxClassDelete>>;
  /**
   * Update a tax class.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxClassUpdate?: Maybe<FieldWrapper<SaleorGraphql_TaxClassUpdate>>;
  /**
   * Update tax configuration for a channel.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxConfigurationUpdate?: Maybe<FieldWrapper<SaleorGraphql_TaxConfigurationUpdate>>;
  /**
   * Remove all tax class rates for a specific country.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxCountryConfigurationDelete?: Maybe<FieldWrapper<SaleorGraphql_TaxCountryConfigurationDelete>>;
  /**
   * Update tax class rates for a specific country.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxCountryConfigurationUpdate?: Maybe<FieldWrapper<SaleorGraphql_TaxCountryConfigurationUpdate>>;
  /**
   * Exempt checkout or order from charging the taxes. When tax exemption is enabled, taxes won't be charged for the checkout or order. Taxes may still be calculated in cases when product prices are entered with the tax included and the net price needs to be known.
   *
   * Added in Saleor 3.8.
   *
   * Requires one of the following permissions: MANAGE_TAXES.
   */
  taxExemptionManage?: Maybe<FieldWrapper<SaleorGraphql_TaxExemptionManage>>;
  /** Create JWT token. */
  tokenCreate?: Maybe<FieldWrapper<SaleorGraphql_CreateToken>>;
  /** Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `refreshToken`. `csrfToken` is required when `refreshToken` is provided as a cookie. */
  tokenRefresh?: Maybe<FieldWrapper<SaleorGraphql_RefreshToken>>;
  /** Verify JWT token. */
  tokenVerify?: Maybe<FieldWrapper<SaleorGraphql_VerifyToken>>;
  /**
   * Deactivate all JWT tokens of the currently authenticated user.
   *
   * Requires one of the following permissions: AUTHENTICATED_USER.
   */
  tokensDeactivateAll?: Maybe<FieldWrapper<SaleorGraphql_DeactivateAllUserTokens>>;
  /**
   * Create transaction for checkout or order.
   *
   * Added in Saleor 3.4.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: HANDLE_PAYMENTS.
   */
  transactionCreate?: Maybe<FieldWrapper<SaleorGraphql_TransactionCreate>>;
  /**
   * Report the event for the transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires the following permissions: OWNER and HANDLE_PAYMENTS for apps, HANDLE_PAYMENTS for staff users. Staff user cannot update a transaction that is owned by the app.
   */
  transactionEventReport?: Maybe<FieldWrapper<SaleorGraphql_TransactionEventReport>>;
  /**
   * Initializes a transaction session. It triggers the webhook `TRANSACTION_INITIALIZE_SESSION`, to the requested `paymentGateways`. There is a limit of 100 transaction items per checkout / order.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  transactionInitialize?: Maybe<FieldWrapper<SaleorGraphql_TransactionInitialize>>;
  /**
   * Processes a transaction session. It triggers the webhook `TRANSACTION_PROCESS_SESSION`, to the assigned `paymentGateways`.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  transactionProcess?: Maybe<FieldWrapper<SaleorGraphql_TransactionProcess>>;
  /**
   * Request an action for payment transaction.
   *
   * Added in Saleor 3.4.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: HANDLE_PAYMENTS.
   */
  transactionRequestAction?: Maybe<FieldWrapper<SaleorGraphql_TransactionRequestAction>>;
  /**
   * Request a refund for payment transaction based on granted refund.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: HANDLE_PAYMENTS.
   */
  transactionRequestRefundForGrantedRefund?: Maybe<FieldWrapper<SaleorGraphql_TransactionRequestRefundForGrantedRefund>>;
  /**
   * Update transaction.
   *
   * Added in Saleor 3.4.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires the following permissions: OWNER and HANDLE_PAYMENTS for apps, HANDLE_PAYMENTS for staff users. Staff user cannot update a transaction that is owned by the app.
   */
  transactionUpdate?: Maybe<FieldWrapper<SaleorGraphql_TransactionUpdate>>;
  /**
   * Remove shipping zone from given warehouse.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  unassignWarehouseShippingZone?: Maybe<FieldWrapper<SaleorGraphql_WarehouseShippingZoneUnassign>>;
  /** Updates metadata of an object. To use it, you need to have access to the modified object. */
  updateMetadata?: Maybe<FieldWrapper<SaleorGraphql_UpdateMetadata>>;
  /** Updates private metadata of an object. To use it, you need to be an authenticated staff user or an app and have access to the modified object. */
  updatePrivateMetadata?: Maybe<FieldWrapper<SaleorGraphql_UpdatePrivateMetadata>>;
  /**
   * Updates given warehouse.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  updateWarehouse?: Maybe<FieldWrapper<SaleorGraphql_WarehouseUpdate>>;
  /**
   * Deletes a user avatar. Only for staff members.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
   */
  userAvatarDelete?: Maybe<FieldWrapper<SaleorGraphql_UserAvatarDelete>>;
  /**
   * Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
   */
  userAvatarUpdate?: Maybe<FieldWrapper<SaleorGraphql_UserAvatarUpdate>>;
  /**
   * Activate or deactivate users.
   *
   * Requires one of the following permissions: MANAGE_USERS.
   */
  userBulkSetActive?: Maybe<FieldWrapper<SaleorGraphql_UserBulkSetActive>>;
  /**
   * Assign an media to a product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  variantMediaAssign?: Maybe<FieldWrapper<SaleorGraphql_VariantMediaAssign>>;
  /**
   * Unassign an media from a product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  variantMediaUnassign?: Maybe<FieldWrapper<SaleorGraphql_VariantMediaUnassign>>;
  /**
   * Deletes vouchers.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_DELETED (async): A voucher was deleted.
   */
  voucherBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_VoucherBulkDelete>>;
  /**
   * Adds products, categories, collections to a voucher.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_UPDATED (async): A voucher was updated.
   */
  voucherCataloguesAdd?: Maybe<FieldWrapper<SaleorGraphql_VoucherAddCatalogues>>;
  /**
   * Removes products, categories, collections from a voucher.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_UPDATED (async): A voucher was updated.
   */
  voucherCataloguesRemove?: Maybe<FieldWrapper<SaleorGraphql_VoucherRemoveCatalogues>>;
  /**
   * Manage voucher's availability in channels.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_UPDATED (async): A voucher was updated.
   */
  voucherChannelListingUpdate?: Maybe<FieldWrapper<SaleorGraphql_VoucherChannelListingUpdate>>;
  /**
   * Deletes voucher codes.
   *
   * Added in Saleor 3.18.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_CODES_DELETED (async): A voucher codes were deleted.
   */
  voucherCodeBulkDelete?: Maybe<FieldWrapper<SaleorGraphql_VoucherCodeBulkDelete>>;
  /**
   * Creates a new voucher.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_CREATED (async): A voucher was created.
   * - VOUCHER_CODES_CREATED (async): A voucher codes were created.
   */
  voucherCreate?: Maybe<FieldWrapper<SaleorGraphql_VoucherCreate>>;
  /**
   * Deletes a voucher.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_DELETED (async): A voucher was deleted.
   */
  voucherDelete?: Maybe<FieldWrapper<SaleorGraphql_VoucherDelete>>;
  /**
   * Creates/updates translations for a voucher.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  voucherTranslate?: Maybe<FieldWrapper<SaleorGraphql_VoucherTranslate>>;
  /**
   * Updates a voucher.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   *
   * Triggers the following webhook events:
   * - VOUCHER_UPDATED (async): A voucher was updated.
   * - VOUCHER_CODES_CREATED (async): A voucher code was created.
   */
  voucherUpdate?: Maybe<FieldWrapper<SaleorGraphql_VoucherUpdate>>;
  /**
   * Creates a new webhook subscription.
   *
   * Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
   */
  webhookCreate?: Maybe<FieldWrapper<SaleorGraphql_WebhookCreate>>;
  /**
   * Delete a webhook. Before the deletion, the webhook is deactivated to pause any deliveries that are already scheduled. The deletion might fail if delivery is in progress. In such a case, the webhook is not deleted but remains deactivated.
   *
   * Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
   */
  webhookDelete?: Maybe<FieldWrapper<SaleorGraphql_WebhookDelete>>;
  /**
   * Performs a dry run of a webhook event. Supports a single event (the first, if multiple provided in the `query`). Requires permission relevant to processed event.
   *
   * Added in Saleor 3.11.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
   */
  webhookDryRun?: Maybe<FieldWrapper<SaleorGraphql_WebhookDryRun>>;
  /**
   * Trigger a webhook event. Supports a single event (the first, if multiple provided in the `webhook.subscription_query`). Requires permission relevant to processed event. Successfully delivered webhook returns `delivery` with status='PENDING' and empty payload.
   *
   * Added in Saleor 3.11.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
   */
  webhookTrigger?: Maybe<FieldWrapper<SaleorGraphql_WebhookTrigger>>;
  /**
   * Updates a webhook subscription.
   *
   * Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
   */
  webhookUpdate?: Maybe<FieldWrapper<SaleorGraphql_WebhookUpdate>>;
};


export type SaleorGraphql_MutationAccountAddressCreateArgs = {
  input: SaleorGraphql_AddressInput;
  type?: InputMaybe<SaleorGraphql_AddressTypeEnum>;
};


export type SaleorGraphql_MutationAccountAddressDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAccountAddressUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_AddressInput;
};


export type SaleorGraphql_MutationAccountDeleteArgs = {
  token: Scalars['String']['input'];
};


export type SaleorGraphql_MutationAccountRegisterArgs = {
  input: SaleorGraphql_AccountRegisterInput;
};


export type SaleorGraphql_MutationAccountRequestDeletionArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  redirectUrl: Scalars['String']['input'];
};


export type SaleorGraphql_MutationAccountSetDefaultAddressArgs = {
  id: Scalars['ID']['input'];
  type: SaleorGraphql_AddressTypeEnum;
};


export type SaleorGraphql_MutationAccountUpdateArgs = {
  input: SaleorGraphql_AccountInput;
};


export type SaleorGraphql_MutationAddressCreateArgs = {
  input: SaleorGraphql_AddressInput;
  userId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAddressDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAddressSetDefaultArgs = {
  addressId: Scalars['ID']['input'];
  type: SaleorGraphql_AddressTypeEnum;
  userId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAddressUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_AddressInput;
};


export type SaleorGraphql_MutationAppActivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAppCreateArgs = {
  input: SaleorGraphql_AppInput;
};


export type SaleorGraphql_MutationAppDeactivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAppDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAppDeleteFailedInstallationArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAppFetchManifestArgs = {
  manifestUrl: Scalars['String']['input'];
};


export type SaleorGraphql_MutationAppInstallArgs = {
  input: SaleorGraphql_AppInstallInput;
};


export type SaleorGraphql_MutationAppRetryInstallArgs = {
  activateAfterInstallation?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAppTokenCreateArgs = {
  input: SaleorGraphql_AppTokenInput;
};


export type SaleorGraphql_MutationAppTokenDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationAppTokenVerifyArgs = {
  token: Scalars['String']['input'];
};


export type SaleorGraphql_MutationAppUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_AppInput;
};


export type SaleorGraphql_MutationAssignNavigationArgs = {
  menu?: InputMaybe<Scalars['ID']['input']>;
  navigationType: SaleorGraphql_NavigationType;
};


export type SaleorGraphql_MutationAssignWarehouseShippingZoneArgs = {
  id: Scalars['ID']['input'];
  shippingZoneIds: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationAttributeBulkCreateArgs = {
  attributes: Array<SaleorGraphql_AttributeCreateInput>;
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
};


export type SaleorGraphql_MutationAttributeBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationAttributeBulkTranslateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  translations: Array<SaleorGraphql_AttributeBulkTranslateInput>;
};


export type SaleorGraphql_MutationAttributeBulkUpdateArgs = {
  attributes: Array<SaleorGraphql_AttributeBulkUpdateInput>;
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
};


export type SaleorGraphql_MutationAttributeCreateArgs = {
  input: SaleorGraphql_AttributeCreateInput;
};


export type SaleorGraphql_MutationAttributeDeleteArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationAttributeReorderValuesArgs = {
  attributeId: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_ReorderInput>;
};


export type SaleorGraphql_MutationAttributeTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_NameTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationAttributeUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_AttributeUpdateInput;
};


export type SaleorGraphql_MutationAttributeValueBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationAttributeValueBulkTranslateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  translations: Array<SaleorGraphql_AttributeValueBulkTranslateInput>;
};


export type SaleorGraphql_MutationAttributeValueCreateArgs = {
  attribute: Scalars['ID']['input'];
  input: SaleorGraphql_AttributeValueCreateInput;
};


export type SaleorGraphql_MutationAttributeValueDeleteArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationAttributeValueTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_AttributeValueTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationAttributeValueUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_AttributeValueUpdateInput;
};


export type SaleorGraphql_MutationCategoryBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCategoryCreateArgs = {
  input: SaleorGraphql_CategoryInput;
  parent?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCategoryDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationCategoryTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_TranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationCategoryUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CategoryInput;
};


export type SaleorGraphql_MutationChannelActivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationChannelCreateArgs = {
  input: SaleorGraphql_ChannelCreateInput;
};


export type SaleorGraphql_MutationChannelDeactivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationChannelDeleteArgs = {
  id: Scalars['ID']['input'];
  input?: InputMaybe<SaleorGraphql_ChannelDeleteInput>;
};


export type SaleorGraphql_MutationChannelReorderWarehousesArgs = {
  channelId: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_ReorderInput>;
};


export type SaleorGraphql_MutationChannelUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ChannelUpdateInput;
};


export type SaleorGraphql_MutationCheckoutAddPromoCodeArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  promoCode: Scalars['String']['input'];
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutBillingAddressUpdateArgs = {
  billingAddress: SaleorGraphql_AddressInput;
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
  validationRules?: InputMaybe<SaleorGraphql_CheckoutAddressValidationRules>;
};


export type SaleorGraphql_MutationCheckoutCompleteArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  paymentData?: InputMaybe<Scalars['JSONString']['input']>;
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
  storeSource?: InputMaybe<Scalars['Boolean']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutCreateArgs = {
  input: SaleorGraphql_CheckoutCreateInput;
};


export type SaleorGraphql_MutationCheckoutCreateFromOrderArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationCheckoutCustomerAttachArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  customerId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutCustomerDetachArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutDeliveryMethodUpdateArgs = {
  deliveryMethodId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutEmailUpdateArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  email: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutLanguageCodeUpdateArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  languageCode: SaleorGraphql_LanguageCodeEnum;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutLineDeleteArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  lineId?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutLinesAddArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  lines: Array<SaleorGraphql_CheckoutLineInput>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutLinesDeleteArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  linesIds: Array<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutLinesUpdateArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  lines: Array<SaleorGraphql_CheckoutLineUpdateInput>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutPaymentCreateArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_PaymentInput;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutRemovePromoCodeArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  promoCode?: InputMaybe<Scalars['String']['input']>;
  promoCodeId?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCheckoutShippingAddressUpdateArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  shippingAddress: SaleorGraphql_AddressInput;
  token?: InputMaybe<Scalars['UUID']['input']>;
  validationRules?: InputMaybe<SaleorGraphql_CheckoutAddressValidationRules>;
};


export type SaleorGraphql_MutationCheckoutShippingMethodUpdateArgs = {
  checkoutId?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  shippingMethodId?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationCollectionAddProductsArgs = {
  collectionId: Scalars['ID']['input'];
  products: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCollectionBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCollectionChannelListingUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CollectionChannelListingUpdateInput;
};


export type SaleorGraphql_MutationCollectionCreateArgs = {
  input: SaleorGraphql_CollectionCreateInput;
};


export type SaleorGraphql_MutationCollectionDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationCollectionRemoveProductsArgs = {
  collectionId: Scalars['ID']['input'];
  products: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCollectionReorderProductsArgs = {
  collectionId: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_MoveProductInput>;
};


export type SaleorGraphql_MutationCollectionTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_TranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationCollectionUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CollectionInput;
};


export type SaleorGraphql_MutationConfirmAccountArgs = {
  email: Scalars['String']['input'];
  token: Scalars['String']['input'];
};


export type SaleorGraphql_MutationConfirmEmailChangeArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  token: Scalars['String']['input'];
};


export type SaleorGraphql_MutationCreateWarehouseArgs = {
  input: SaleorGraphql_WarehouseCreateInput;
};


export type SaleorGraphql_MutationCustomerBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCustomerBulkUpdateArgs = {
  customers: Array<SaleorGraphql_CustomerBulkUpdateInput>;
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
};


export type SaleorGraphql_MutationCustomerCreateArgs = {
  input: SaleorGraphql_UserCreateInput;
};


export type SaleorGraphql_MutationCustomerDeleteArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationCustomerUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_CustomerInput;
};


export type SaleorGraphql_MutationDeleteMetadataArgs = {
  id: Scalars['ID']['input'];
  keys: Array<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationDeletePrivateMetadataArgs = {
  id: Scalars['ID']['input'];
  keys: Array<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationDeleteWarehouseArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationDigitalContentCreateArgs = {
  input: SaleorGraphql_DigitalContentUploadInput;
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationDigitalContentDeleteArgs = {
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationDigitalContentUpdateArgs = {
  input: SaleorGraphql_DigitalContentInput;
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationDigitalContentUrlCreateArgs = {
  input: SaleorGraphql_DigitalContentUrlCreateInput;
};


export type SaleorGraphql_MutationDraftOrderBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationDraftOrderCompleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationDraftOrderCreateArgs = {
  input: SaleorGraphql_DraftOrderCreateInput;
};


export type SaleorGraphql_MutationDraftOrderDeleteArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationDraftOrderLinesBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationDraftOrderUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_DraftOrderInput;
};


export type SaleorGraphql_MutationEventDeliveryRetryArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationExportGiftCardsArgs = {
  input: SaleorGraphql_ExportGiftCardsInput;
};


export type SaleorGraphql_MutationExportProductsArgs = {
  input: SaleorGraphql_ExportProductsInput;
};


export type SaleorGraphql_MutationExportVoucherCodesArgs = {
  input: SaleorGraphql_ExportVoucherCodesInput;
};


export type SaleorGraphql_MutationExternalAuthenticationUrlArgs = {
  input: Scalars['JSONString']['input'];
  pluginId: Scalars['String']['input'];
};


export type SaleorGraphql_MutationExternalLogoutArgs = {
  input: Scalars['JSONString']['input'];
  pluginId: Scalars['String']['input'];
};


export type SaleorGraphql_MutationExternalNotificationTriggerArgs = {
  channel: Scalars['String']['input'];
  input: SaleorGraphql_ExternalNotificationTriggerInput;
  pluginId?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationExternalObtainAccessTokensArgs = {
  input: Scalars['JSONString']['input'];
  pluginId: Scalars['String']['input'];
};


export type SaleorGraphql_MutationExternalRefreshArgs = {
  input: Scalars['JSONString']['input'];
  pluginId: Scalars['String']['input'];
};


export type SaleorGraphql_MutationExternalVerifyArgs = {
  input: Scalars['JSONString']['input'];
  pluginId: Scalars['String']['input'];
};


export type SaleorGraphql_MutationFileUploadArgs = {
  file: Scalars['Upload']['input'];
};


export type SaleorGraphql_MutationGiftCardActivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationGiftCardAddNoteArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_GiftCardAddNoteInput;
};


export type SaleorGraphql_MutationGiftCardBulkActivateArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationGiftCardBulkCreateArgs = {
  input: SaleorGraphql_GiftCardBulkCreateInput;
};


export type SaleorGraphql_MutationGiftCardBulkDeactivateArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationGiftCardBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationGiftCardCreateArgs = {
  input: SaleorGraphql_GiftCardCreateInput;
};


export type SaleorGraphql_MutationGiftCardDeactivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationGiftCardDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationGiftCardResendArgs = {
  input: SaleorGraphql_GiftCardResendInput;
};


export type SaleorGraphql_MutationGiftCardSettingsUpdateArgs = {
  input: SaleorGraphql_GiftCardSettingsUpdateInput;
};


export type SaleorGraphql_MutationGiftCardUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_GiftCardUpdateInput;
};


export type SaleorGraphql_MutationInvoiceCreateArgs = {
  input: SaleorGraphql_InvoiceCreateInput;
  orderId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationInvoiceDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationInvoiceRequestArgs = {
  number?: InputMaybe<Scalars['String']['input']>;
  orderId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationInvoiceRequestDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationInvoiceSendNotificationArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationInvoiceUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_UpdateInvoiceInput;
};


export type SaleorGraphql_MutationMenuBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationMenuCreateArgs = {
  input: SaleorGraphql_MenuCreateInput;
};


export type SaleorGraphql_MutationMenuDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationMenuItemBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationMenuItemCreateArgs = {
  input: SaleorGraphql_MenuItemCreateInput;
};


export type SaleorGraphql_MutationMenuItemDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationMenuItemMoveArgs = {
  menu: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_MenuItemMoveInput>;
};


export type SaleorGraphql_MutationMenuItemTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_NameTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationMenuItemUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_MenuItemInput;
};


export type SaleorGraphql_MutationMenuUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_MenuInput;
};


export type SaleorGraphql_MutationOrderAddNoteArgs = {
  input: SaleorGraphql_OrderAddNoteInput;
  order: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderBulkCancelArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationOrderBulkCreateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  orders: Array<SaleorGraphql_OrderBulkCreateInput>;
  stockUpdatePolicy?: InputMaybe<SaleorGraphql_StockUpdatePolicyEnum>;
};


export type SaleorGraphql_MutationOrderCancelArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderCaptureArgs = {
  amount: Scalars['PositiveDecimal']['input'];
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderConfirmArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderCreateFromCheckoutArgs = {
  id: Scalars['ID']['input'];
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  removeCheckout?: InputMaybe<Scalars['Boolean']['input']>;
};


export type SaleorGraphql_MutationOrderDiscountAddArgs = {
  input: SaleorGraphql_OrderDiscountCommonInput;
  orderId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderDiscountDeleteArgs = {
  discountId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderDiscountUpdateArgs = {
  discountId: Scalars['ID']['input'];
  input: SaleorGraphql_OrderDiscountCommonInput;
};


export type SaleorGraphql_MutationOrderFulfillArgs = {
  input: SaleorGraphql_OrderFulfillInput;
  order?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationOrderFulfillmentApproveArgs = {
  allowStockToBeExceeded?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  notifyCustomer: Scalars['Boolean']['input'];
};


export type SaleorGraphql_MutationOrderFulfillmentCancelArgs = {
  id: Scalars['ID']['input'];
  input?: InputMaybe<SaleorGraphql_FulfillmentCancelInput>;
};


export type SaleorGraphql_MutationOrderFulfillmentRefundProductsArgs = {
  input: SaleorGraphql_OrderRefundProductsInput;
  order: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderFulfillmentReturnProductsArgs = {
  input: SaleorGraphql_OrderReturnProductsInput;
  order: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderFulfillmentUpdateTrackingArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_FulfillmentUpdateTrackingInput;
};


export type SaleorGraphql_MutationOrderGrantRefundCreateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_OrderGrantRefundCreateInput;
};


export type SaleorGraphql_MutationOrderGrantRefundUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_OrderGrantRefundUpdateInput;
};


export type SaleorGraphql_MutationOrderLineDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderLineDiscountRemoveArgs = {
  orderLineId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderLineDiscountUpdateArgs = {
  input: SaleorGraphql_OrderDiscountCommonInput;
  orderLineId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderLineUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_OrderLineInput;
};


export type SaleorGraphql_MutationOrderLinesCreateArgs = {
  id: Scalars['ID']['input'];
  input: Array<SaleorGraphql_OrderLineCreateInput>;
};


export type SaleorGraphql_MutationOrderMarkAsPaidArgs = {
  id: Scalars['ID']['input'];
  transactionReference?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationOrderNoteAddArgs = {
  input: SaleorGraphql_OrderNoteInput;
  order: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderNoteUpdateArgs = {
  input: SaleorGraphql_OrderNoteInput;
  note: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderRefundArgs = {
  amount: Scalars['PositiveDecimal']['input'];
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderSettingsUpdateArgs = {
  input: SaleorGraphql_OrderSettingsUpdateInput;
};


export type SaleorGraphql_MutationOrderUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_OrderUpdateInput;
};


export type SaleorGraphql_MutationOrderUpdateShippingArgs = {
  input: SaleorGraphql_OrderUpdateShippingInput;
  order: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationOrderVoidArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageAttributeAssignArgs = {
  attributeIds: Array<Scalars['ID']['input']>;
  pageTypeId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageAttributeUnassignArgs = {
  attributeIds: Array<Scalars['ID']['input']>;
  pageTypeId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationPageBulkPublishArgs = {
  ids: Array<Scalars['ID']['input']>;
  isPublished: Scalars['Boolean']['input'];
};


export type SaleorGraphql_MutationPageCreateArgs = {
  input: SaleorGraphql_PageCreateInput;
};


export type SaleorGraphql_MutationPageDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageReorderAttributeValuesArgs = {
  attributeId: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_ReorderInput>;
  pageId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PageTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationPageTypeBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationPageTypeCreateArgs = {
  input: SaleorGraphql_PageTypeCreateInput;
};


export type SaleorGraphql_MutationPageTypeDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageTypeReorderAttributesArgs = {
  moves: Array<SaleorGraphql_ReorderInput>;
  pageTypeId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPageTypeUpdateArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_PageTypeUpdateInput;
};


export type SaleorGraphql_MutationPageUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PageInput;
};


export type SaleorGraphql_MutationPasswordChangeArgs = {
  newPassword: Scalars['String']['input'];
  oldPassword?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationPaymentCaptureArgs = {
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  paymentId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPaymentCheckBalanceArgs = {
  input: SaleorGraphql_PaymentCheckBalanceInput;
};


export type SaleorGraphql_MutationPaymentGatewayInitializeArgs = {
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  id: Scalars['ID']['input'];
  paymentGateways?: InputMaybe<Array<SaleorGraphql_PaymentGatewayToInitialize>>;
};


export type SaleorGraphql_MutationPaymentGatewayInitializeTokenizationArgs = {
  channel: Scalars['String']['input'];
  data?: InputMaybe<Scalars['JSON']['input']>;
  id: Scalars['String']['input'];
};


export type SaleorGraphql_MutationPaymentInitializeArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  gateway: Scalars['String']['input'];
  paymentData?: InputMaybe<Scalars['JSONString']['input']>;
};


export type SaleorGraphql_MutationPaymentMethodInitializeTokenizationArgs = {
  channel: Scalars['String']['input'];
  data?: InputMaybe<Scalars['JSON']['input']>;
  id: Scalars['String']['input'];
  paymentFlowToSupport: SaleorGraphql_TokenizedPaymentFlowEnum;
};


export type SaleorGraphql_MutationPaymentMethodProcessTokenizationArgs = {
  channel: Scalars['String']['input'];
  data?: InputMaybe<Scalars['JSON']['input']>;
  id: Scalars['String']['input'];
};


export type SaleorGraphql_MutationPaymentRefundArgs = {
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  paymentId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPaymentVoidArgs = {
  paymentId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPermissionGroupCreateArgs = {
  input: SaleorGraphql_PermissionGroupCreateInput;
};


export type SaleorGraphql_MutationPermissionGroupDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPermissionGroupUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PermissionGroupUpdateInput;
};


export type SaleorGraphql_MutationPluginUpdateArgs = {
  channelId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PluginUpdateInput;
};


export type SaleorGraphql_MutationProductAttributeAssignArgs = {
  operations: Array<SaleorGraphql_ProductAttributeAssignInput>;
  productTypeId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductAttributeAssignmentUpdateArgs = {
  operations: Array<SaleorGraphql_ProductAttributeAssignmentUpdateInput>;
  productTypeId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductAttributeUnassignArgs = {
  attributeIds: Array<Scalars['ID']['input']>;
  productTypeId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductBulkCreateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  products: Array<SaleorGraphql_ProductBulkCreateInput>;
};


export type SaleorGraphql_MutationProductBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationProductBulkTranslateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  translations: Array<SaleorGraphql_ProductBulkTranslateInput>;
};


export type SaleorGraphql_MutationProductChannelListingUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ProductChannelListingUpdateInput;
};


export type SaleorGraphql_MutationProductCreateArgs = {
  input: SaleorGraphql_ProductCreateInput;
};


export type SaleorGraphql_MutationProductDeleteArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationProductMediaBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationProductMediaCreateArgs = {
  input: SaleorGraphql_ProductMediaCreateInput;
};


export type SaleorGraphql_MutationProductMediaDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductMediaReorderArgs = {
  mediaIds: Array<Scalars['ID']['input']>;
  productId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductMediaUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ProductMediaUpdateInput;
};


export type SaleorGraphql_MutationProductReorderAttributeValuesArgs = {
  attributeId: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_ReorderInput>;
  productId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_TranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationProductTypeBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationProductTypeCreateArgs = {
  input: SaleorGraphql_ProductTypeInput;
};


export type SaleorGraphql_MutationProductTypeDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductTypeReorderAttributesArgs = {
  moves: Array<SaleorGraphql_ReorderInput>;
  productTypeId: Scalars['ID']['input'];
  type: SaleorGraphql_ProductAttributeType;
};


export type SaleorGraphql_MutationProductTypeUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ProductTypeInput;
};


export type SaleorGraphql_MutationProductUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_ProductInput;
};


export type SaleorGraphql_MutationProductVariantBulkCreateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  product: Scalars['ID']['input'];
  variants: Array<SaleorGraphql_ProductVariantBulkCreateInput>;
};


export type SaleorGraphql_MutationProductVariantBulkDeleteArgs = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  skus?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type SaleorGraphql_MutationProductVariantBulkTranslateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  translations: Array<SaleorGraphql_ProductVariantBulkTranslateInput>;
};


export type SaleorGraphql_MutationProductVariantBulkUpdateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  product: Scalars['ID']['input'];
  variants: Array<SaleorGraphql_ProductVariantBulkUpdateInput>;
};


export type SaleorGraphql_MutationProductVariantChannelListingUpdateArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  input: Array<SaleorGraphql_ProductVariantChannelListingAddInput>;
  sku?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationProductVariantCreateArgs = {
  input: SaleorGraphql_ProductVariantCreateInput;
};


export type SaleorGraphql_MutationProductVariantDeleteArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationProductVariantPreorderDeactivateArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductVariantReorderArgs = {
  moves: Array<SaleorGraphql_ReorderInput>;
  productId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductVariantReorderAttributeValuesArgs = {
  attributeId: Scalars['ID']['input'];
  moves: Array<SaleorGraphql_ReorderInput>;
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductVariantSetDefaultArgs = {
  productId: Scalars['ID']['input'];
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductVariantStocksCreateArgs = {
  stocks: Array<SaleorGraphql_StockInput>;
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationProductVariantStocksDeleteArgs = {
  sku?: InputMaybe<Scalars['String']['input']>;
  variantId?: InputMaybe<Scalars['ID']['input']>;
  warehouseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};


export type SaleorGraphql_MutationProductVariantStocksUpdateArgs = {
  sku?: InputMaybe<Scalars['String']['input']>;
  stocks: Array<SaleorGraphql_StockInput>;
  variantId?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationProductVariantTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_NameTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationProductVariantUpdateArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_ProductVariantInput;
  sku?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationPromotionBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationPromotionCreateArgs = {
  input: SaleorGraphql_PromotionCreateInput;
};


export type SaleorGraphql_MutationPromotionDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPromotionRuleCreateArgs = {
  input: SaleorGraphql_PromotionRuleCreateInput;
};


export type SaleorGraphql_MutationPromotionRuleDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationPromotionRuleTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PromotionRuleTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationPromotionRuleUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PromotionRuleUpdateInput;
};


export type SaleorGraphql_MutationPromotionTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PromotionTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationPromotionUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_PromotionUpdateInput;
};


export type SaleorGraphql_MutationRequestEmailChangeArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  newEmail: Scalars['String']['input'];
  password: Scalars['String']['input'];
  redirectUrl: Scalars['String']['input'];
};


export type SaleorGraphql_MutationRequestPasswordResetArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  redirectUrl: Scalars['String']['input'];
};


export type SaleorGraphql_MutationSaleBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationSaleCataloguesAddArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CatalogueInput;
};


export type SaleorGraphql_MutationSaleCataloguesRemoveArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CatalogueInput;
};


export type SaleorGraphql_MutationSaleChannelListingUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_SaleChannelListingInput;
};


export type SaleorGraphql_MutationSaleCreateArgs = {
  input: SaleorGraphql_SaleInput;
};


export type SaleorGraphql_MutationSaleDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationSaleTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_NameTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationSaleUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_SaleInput;
};


export type SaleorGraphql_MutationSendConfirmationEmailArgs = {
  channel: Scalars['String']['input'];
  redirectUrl: Scalars['String']['input'];
};


export type SaleorGraphql_MutationSetPasswordArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};


export type SaleorGraphql_MutationShippingMethodChannelListingUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ShippingMethodChannelListingInput;
};


export type SaleorGraphql_MutationShippingPriceBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationShippingPriceCreateArgs = {
  input: SaleorGraphql_ShippingPriceInput;
};


export type SaleorGraphql_MutationShippingPriceDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationShippingPriceExcludeProductsArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ShippingPriceExcludeProductsInput;
};


export type SaleorGraphql_MutationShippingPriceRemoveProductFromExcludeArgs = {
  id: Scalars['ID']['input'];
  products: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationShippingPriceTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ShippingPriceTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationShippingPriceUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ShippingPriceInput;
};


export type SaleorGraphql_MutationShippingZoneBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationShippingZoneCreateArgs = {
  input: SaleorGraphql_ShippingZoneCreateInput;
};


export type SaleorGraphql_MutationShippingZoneDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationShippingZoneUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_ShippingZoneUpdateInput;
};


export type SaleorGraphql_MutationShopAddressUpdateArgs = {
  input?: InputMaybe<SaleorGraphql_AddressInput>;
};


export type SaleorGraphql_MutationShopDomainUpdateArgs = {
  input?: InputMaybe<SaleorGraphql_SiteDomainInput>;
};


export type SaleorGraphql_MutationShopSettingsTranslateArgs = {
  input: SaleorGraphql_ShopSettingsTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationShopSettingsUpdateArgs = {
  input: SaleorGraphql_ShopSettingsInput;
};


export type SaleorGraphql_MutationStaffBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationStaffCreateArgs = {
  input: SaleorGraphql_StaffCreateInput;
};


export type SaleorGraphql_MutationStaffDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationStaffNotificationRecipientCreateArgs = {
  input: SaleorGraphql_StaffNotificationRecipientInput;
};


export type SaleorGraphql_MutationStaffNotificationRecipientDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationStaffNotificationRecipientUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_StaffNotificationRecipientInput;
};


export type SaleorGraphql_MutationStaffUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_StaffUpdateInput;
};


export type SaleorGraphql_MutationStockBulkUpdateArgs = {
  errorPolicy?: InputMaybe<SaleorGraphql_ErrorPolicyEnum>;
  stocks: Array<SaleorGraphql_StockBulkUpdateInput>;
};


export type SaleorGraphql_MutationStoredPaymentMethodRequestDeleteArgs = {
  channel: Scalars['String']['input'];
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationTaxClassCreateArgs = {
  input: SaleorGraphql_TaxClassCreateInput;
};


export type SaleorGraphql_MutationTaxClassDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationTaxClassUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_TaxClassUpdateInput;
};


export type SaleorGraphql_MutationTaxConfigurationUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_TaxConfigurationUpdateInput;
};


export type SaleorGraphql_MutationTaxCountryConfigurationDeleteArgs = {
  countryCode: SaleorGraphql_CountryCode;
};


export type SaleorGraphql_MutationTaxCountryConfigurationUpdateArgs = {
  countryCode: SaleorGraphql_CountryCode;
  updateTaxClassRates: Array<SaleorGraphql_TaxClassRateInput>;
};


export type SaleorGraphql_MutationTaxExemptionManageArgs = {
  id: Scalars['ID']['input'];
  taxExemption: Scalars['Boolean']['input'];
};


export type SaleorGraphql_MutationTokenCreateArgs = {
  audience?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type SaleorGraphql_MutationTokenRefreshArgs = {
  csrfToken?: InputMaybe<Scalars['String']['input']>;
  refreshToken?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_MutationTokenVerifyArgs = {
  token: Scalars['String']['input'];
};


export type SaleorGraphql_MutationTransactionCreateArgs = {
  id: Scalars['ID']['input'];
  transaction: SaleorGraphql_TransactionCreateInput;
  transactionEvent?: InputMaybe<SaleorGraphql_TransactionEventInput>;
};


export type SaleorGraphql_MutationTransactionEventReportArgs = {
  amount: Scalars['PositiveDecimal']['input'];
  availableActions?: InputMaybe<Array<SaleorGraphql_TransactionActionEnum>>;
  externalUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  pspReference: Scalars['String']['input'];
  time?: InputMaybe<Scalars['DateTime']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
  type: SaleorGraphql_TransactionEventTypeEnum;
};


export type SaleorGraphql_MutationTransactionInitializeArgs = {
  action?: InputMaybe<SaleorGraphql_TransactionFlowStrategyEnum>;
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  customerIpAddress?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  idempotencyKey?: InputMaybe<Scalars['String']['input']>;
  paymentGateway: SaleorGraphql_PaymentGatewayToInitialize;
};


export type SaleorGraphql_MutationTransactionProcessArgs = {
  customerIpAddress?: InputMaybe<Scalars['String']['input']>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationTransactionRequestActionArgs = {
  actionType: SaleorGraphql_TransactionActionEnum;
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationTransactionRequestRefundForGrantedRefundArgs = {
  grantedRefundId: Scalars['ID']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_MutationTransactionUpdateArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
  transaction?: InputMaybe<SaleorGraphql_TransactionUpdateInput>;
  transactionEvent?: InputMaybe<SaleorGraphql_TransactionEventInput>;
};


export type SaleorGraphql_MutationUnassignWarehouseShippingZoneArgs = {
  id: Scalars['ID']['input'];
  shippingZoneIds: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationUpdateMetadataArgs = {
  id: Scalars['ID']['input'];
  input: Array<SaleorGraphql_MetadataInput>;
};


export type SaleorGraphql_MutationUpdatePrivateMetadataArgs = {
  id: Scalars['ID']['input'];
  input: Array<SaleorGraphql_MetadataInput>;
};


export type SaleorGraphql_MutationUpdateWarehouseArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  input: SaleorGraphql_WarehouseUpdateInput;
};


export type SaleorGraphql_MutationUserAvatarUpdateArgs = {
  image: Scalars['Upload']['input'];
};


export type SaleorGraphql_MutationUserBulkSetActiveArgs = {
  ids: Array<Scalars['ID']['input']>;
  isActive: Scalars['Boolean']['input'];
};


export type SaleorGraphql_MutationVariantMediaAssignArgs = {
  mediaId: Scalars['ID']['input'];
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationVariantMediaUnassignArgs = {
  mediaId: Scalars['ID']['input'];
  variantId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationVoucherBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationVoucherCataloguesAddArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CatalogueInput;
};


export type SaleorGraphql_MutationVoucherCataloguesRemoveArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_CatalogueInput;
};


export type SaleorGraphql_MutationVoucherChannelListingUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_VoucherChannelListingInput;
};


export type SaleorGraphql_MutationVoucherCodeBulkDeleteArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type SaleorGraphql_MutationVoucherCreateArgs = {
  input: SaleorGraphql_VoucherInput;
};


export type SaleorGraphql_MutationVoucherDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationVoucherTranslateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_NameTranslationInput;
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


export type SaleorGraphql_MutationVoucherUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_VoucherInput;
};


export type SaleorGraphql_MutationWebhookCreateArgs = {
  input: SaleorGraphql_WebhookCreateInput;
};


export type SaleorGraphql_MutationWebhookDeleteArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationWebhookDryRunArgs = {
  objectId: Scalars['ID']['input'];
  query: Scalars['String']['input'];
};


export type SaleorGraphql_MutationWebhookTriggerArgs = {
  objectId: Scalars['ID']['input'];
  webhookId: Scalars['ID']['input'];
};


export type SaleorGraphql_MutationWebhookUpdateArgs = {
  id: Scalars['ID']['input'];
  input: SaleorGraphql_WebhookUpdateInput;
};

export type SaleorGraphql_NameTranslationInput = {
  name?: InputMaybe<Scalars['String']['input']>;
};

export enum SaleorGraphql_NavigationType {
  /** Main storefront navigation. */
  Main = 'MAIN',
  /** Secondary storefront navigation. */
  Secondary = 'SECONDARY'
}

/** An object with an ID */
export type SaleorGraphql_Node = {
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
};

export type SaleorGraphql_ObjectWithMetadata = {
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Public metadata. Use `keys` to control which fields you want to include. The default is to include everything. */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything. */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
};


export type SaleorGraphql_ObjectWithMetadataMetafieldArgs = {
  key: Scalars['String']['input'];
};


export type SaleorGraphql_ObjectWithMetadataMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type SaleorGraphql_ObjectWithMetadataPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


export type SaleorGraphql_ObjectWithMetadataPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** Represents an order in the shop. */
export type SaleorGraphql_Order = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Order';
  /** List of actions that can be performed in the current state of an order. */
  actions: Array<FieldWrapper<SaleorGraphql_OrderAction | '%future added value'>>;
  /**
   * The authorize status of the order.
   *
   * Added in Saleor 3.4.
   */
  authorizeStatus: FieldWrapper<SaleorGraphql_OrderAuthorizeStatusEnum | '%future added value'>;
  /**
   * Collection points that can be used for this order.
   *
   * Added in Saleor 3.1.
   */
  availableCollectionPoints: Array<FieldWrapper<SaleorGraphql_Warehouse>>;
  /**
   * Shipping methods that can be used with this order.
   * @deprecated Use `shippingMethods`, this field will be removed in 4.0
   */
  availableShippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethod>>>;
  /** Billing address. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER. */
  billingAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** Informs whether a draft order can be finalized(turned into a regular order). */
  canFinalize: FieldWrapper<Scalars['Boolean']['output']>;
  /** Channel through which the order was placed. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /**
   * The charge status of the order.
   *
   * Added in Saleor 3.4.
   */
  chargeStatus: FieldWrapper<SaleorGraphql_OrderChargeStatusEnum | '%future added value'>;
  /**
   * ID of the checkout that the order was created from.
   *
   * Added in Saleor 3.11.
   */
  checkoutId?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /** Name of the collection point where the order should be picked up by the customer. */
  collectionPointName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Date and time when the order was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** Additional information provided by the customer about the order. */
  customerNote: FieldWrapper<Scalars['String']['output']>;
  /**
   * The delivery method selected for this order.
   *
   * Added in Saleor 3.1.
   */
  deliveryMethod?: Maybe<FieldWrapper<SaleorGraphql_DeliveryMethod>>;
  /**
   * Returns applied discount.
   * @deprecated This field will be removed in Saleor 4.0. Use the `discounts` field instead.
   */
  discount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /**
   * Discount name.
   * @deprecated This field will be removed in Saleor 4.0. Use the `discounts` field instead.
   */
  discountName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of all discounts assigned to the order. */
  discounts: Array<FieldWrapper<SaleorGraphql_OrderDiscount>>;
  /**
   * Determines whether displayed prices should include taxes.
   *
   * Added in Saleor 3.9.
   */
  displayGrossPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of errors that occurred during order validation. */
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /**
   * List of events associated with the order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  events: Array<FieldWrapper<SaleorGraphql_OrderEvent>>;
  /**
   * External ID of this order.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of shipments for the order. */
  fulfillments: Array<FieldWrapper<SaleorGraphql_Fulfillment>>;
  /** List of user gift cards. */
  giftCards: Array<FieldWrapper<SaleorGraphql_GiftCard>>;
  /**
   * List of granted refunds.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  grantedRefunds: Array<FieldWrapper<SaleorGraphql_OrderGrantedRefund>>;
  /** ID of the order. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of order invoices. Can be fetched for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER. */
  invoices: Array<FieldWrapper<SaleorGraphql_Invoice>>;
  /** Informs if an order is fully paid. */
  isPaid: FieldWrapper<Scalars['Boolean']['output']>;
  /** Returns True, if order requires shipping. */
  isShippingRequired: FieldWrapper<Scalars['Boolean']['output']>;
  /** @deprecated This field will be removed in Saleor 4.0. Use the `languageCodeEnum` field to fetch the language code.  */
  languageCode: FieldWrapper<Scalars['String']['output']>;
  /** Order language code. */
  languageCodeEnum: FieldWrapper<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** List of order lines. */
  lines: Array<FieldWrapper<SaleorGraphql_OrderLine>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** User-friendly number of an order. */
  number: FieldWrapper<Scalars['String']['output']>;
  /** The order origin. */
  origin: FieldWrapper<SaleorGraphql_OrderOriginEnum | '%future added value'>;
  /** The ID of the order that was the base for this order. */
  original?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /** Internal payment status. */
  paymentStatus: FieldWrapper<SaleorGraphql_PaymentChargeStatusEnum | '%future added value'>;
  /** User-friendly payment status. */
  paymentStatusDisplay: FieldWrapper<Scalars['String']['output']>;
  /** List of payments for the order. */
  payments: Array<FieldWrapper<SaleorGraphql_Payment>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** URL to which user should be redirected after order is placed. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shipping address. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER. */
  shippingAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /**
   * Shipping method for this order.
   * @deprecated This field will be removed in Saleor 4.0. Use `deliveryMethod` instead.
   */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethod>>;
  /** Method used for shipping. */
  shippingMethodName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shipping methods related to this order. */
  shippingMethods: Array<FieldWrapper<SaleorGraphql_ShippingMethod>>;
  /** Total price of shipping. */
  shippingPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /**
   * Denormalized tax class assigned to the shipping method.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  shippingTaxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
  /**
   * Denormalized public metadata of the shipping method's tax class.
   *
   * Added in Saleor 3.9.
   */
  shippingTaxClassMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * Denormalized name of the tax class assigned to the shipping method.
   *
   * Added in Saleor 3.9.
   */
  shippingTaxClassName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Denormalized private metadata of the shipping method's tax class. Requires staff permissions to access.
   *
   * Added in Saleor 3.9.
   */
  shippingTaxClassPrivateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /** The shipping tax rate value. */
  shippingTaxRate: FieldWrapper<Scalars['Float']['output']>;
  /** Status of the order. */
  status: FieldWrapper<SaleorGraphql_OrderStatus | '%future added value'>;
  /** User-friendly order status. */
  statusDisplay: FieldWrapper<Scalars['String']['output']>;
  /** The sum of line prices not including shipping. */
  subtotal: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /**
   * Returns True if order has to be exempt from taxes.
   *
   * Added in Saleor 3.8.
   */
  taxExemption: FieldWrapper<Scalars['Boolean']['output']>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `id` instead. */
  token: FieldWrapper<Scalars['String']['output']>;
  /** Total amount of the order. */
  total: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /**
   * Total amount of ongoing authorize requests for the order's transactions.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  totalAuthorizePending: FieldWrapper<SaleorGraphql_Money>;
  /** Amount authorized for the order. */
  totalAuthorized: FieldWrapper<SaleorGraphql_Money>;
  /** The difference between the paid and the order total amount. */
  totalBalance: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount of ongoing cancel requests for the order's transactions.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  totalCancelPending: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Amount canceled for the order.
   *
   * Added in Saleor 3.13.
   */
  totalCanceled: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Amount captured for the order.
   * @deprecated This field will be removed in Saleor 4.0. Use `totalCharged` instead.
   */
  totalCaptured: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount of ongoing charge requests for the order's transactions.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  totalChargePending: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Amount charged for the order.
   *
   * Added in Saleor 3.13.
   */
  totalCharged: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount of granted refund.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  totalGrantedRefund: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount of ongoing refund requests for the order's transactions.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  totalRefundPending: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total refund amount for the order.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  totalRefunded: FieldWrapper<SaleorGraphql_Money>;
  /**
   * The difference amount between granted refund and the amounts that are pending and refunded.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  totalRemainingGrant: FieldWrapper<SaleorGraphql_Money>;
  /** Google Analytics tracking client ID. This field will be removed in Saleor 4.0. */
  trackingClientId: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of transactions for the order. Requires one of the following permissions: MANAGE_ORDERS, HANDLE_PAYMENTS.
   *
   * Added in Saleor 3.4.
   */
  transactions: Array<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /**
   * Translated discount name.
   * @deprecated This field will be removed in Saleor 4.0. Use the `discounts` field instead.
   */
  translatedDiscountName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Undiscounted total amount of the order. */
  undiscountedTotal: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** Date and time when the order was created. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** User who placed the order. This field is set only for orders placed by authenticated users. Can be fetched for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_USERS, MANAGE_ORDERS, HANDLE_PAYMENTS, OWNER. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Email address of the customer. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER. */
  userEmail?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Voucher linked to the order. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
  /**
   * Voucher code that was used for Order.
   *
   * Added in Saleor 3.18.
   */
  voucherCode?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Weight of the order. */
  weight: FieldWrapper<SaleorGraphql_Weight>;
};


/** Represents an order in the shop. */
export type SaleorGraphql_OrderMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an order in the shop. */
export type SaleorGraphql_OrderMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents an order in the shop. */
export type SaleorGraphql_OrderPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an order in the shop. */
export type SaleorGraphql_OrderPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

export enum SaleorGraphql_OrderAction {
  /** Represents the capture action. */
  Capture = 'CAPTURE',
  /** Represents a mark-as-paid action. */
  MarkAsPaid = 'MARK_AS_PAID',
  /** Represents a refund action. */
  Refund = 'REFUND',
  /** Represents a void action. */
  Void = 'VOID'
}

/**
 * Adds note to the order.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderAddNote = {
  __typename?: 'OrderAddNote';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order note created. */
  event?: Maybe<FieldWrapper<SaleorGraphql_OrderEvent>>;
  /** Order with the note added. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderAddNoteInput = {
  /**
   * Note message.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  message: Scalars['String']['input'];
};

/**
 * Determine a current authorize status for order.
 *
 *     We treat the order as fully authorized when the sum of authorized and charged funds
 *     cover the `order.total`-`order.totalGrantedRefund`.
 *     We treat the order as partially authorized when the sum of authorized and charged
 *     funds covers only part of the `order.total`-`order.totalGrantedRefund`.
 *     We treat the order as not authorized when the sum of authorized and charged funds is
 *     0.
 *
 *     NONE - the funds are not authorized
 *     PARTIAL - the funds that are authorized and charged don't cover fully the
 *     `order.total`-`order.totalGrantedRefund`
 *     FULL - the funds that are authorized and charged fully cover the
 *     `order.total`-`order.totalGrantedRefund`
 */
export enum SaleorGraphql_OrderAuthorizeStatusEnum {
  Full = 'FULL',
  None = 'NONE',
  Partial = 'PARTIAL'
}

/**
 * Cancels orders.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderBulkCancel = {
  __typename?: 'OrderBulkCancel';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Creates multiple orders.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_ORDERS_IMPORT.
 */
export type SaleorGraphql_OrderBulkCreate = {
  __typename?: 'OrderBulkCreate';
  /** Returns how many objects were created. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_OrderBulkCreateError>>;
  /** List of the created orders. */
  results: Array<FieldWrapper<SaleorGraphql_OrderBulkCreateResult>>;
};

export type SaleorGraphql_OrderBulkCreateDeliveryMethodInput = {
  /** The ID of the shipping method. */
  shippingMethodId?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the shipping method. */
  shippingMethodName?: InputMaybe<Scalars['String']['input']>;
  /** The price of the shipping. */
  shippingPrice?: InputMaybe<SaleorGraphql_TaxedMoneyInput>;
  /** The ID of the tax class. */
  shippingTaxClassId?: InputMaybe<Scalars['ID']['input']>;
  /** Metadata of the tax class. */
  shippingTaxClassMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** The name of the tax class. */
  shippingTaxClassName?: InputMaybe<Scalars['String']['input']>;
  /** Private metadata of the tax class. */
  shippingTaxClassPrivateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Tax rate of the shipping. */
  shippingTaxRate?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** The ID of the warehouse. */
  warehouseId?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the warehouse. */
  warehouseName?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderBulkCreateError = {
  __typename?: 'OrderBulkCreateError';
  /** The error code. */
  code?: Maybe<FieldWrapper<SaleorGraphql_OrderBulkCreateErrorCode | '%future added value'>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderBulkCreateErrorCode {
  BulkLimit = 'BULK_LIMIT',
  FutureDate = 'FUTURE_DATE',
  GraphqlError = 'GRAPHQL_ERROR',
  IncorrectCurrency = 'INCORRECT_CURRENCY',
  InsufficientStock = 'INSUFFICIENT_STOCK',
  Invalid = 'INVALID',
  InvalidQuantity = 'INVALID_QUANTITY',
  MetadataKeyRequired = 'METADATA_KEY_REQUIRED',
  NegativeIndex = 'NEGATIVE_INDEX',
  NonExistingStock = 'NON_EXISTING_STOCK',
  NoteLength = 'NOTE_LENGTH',
  NotFound = 'NOT_FOUND',
  NoRelatedOrderLine = 'NO_RELATED_ORDER_LINE',
  OrderLineFulfillmentLineMismatch = 'ORDER_LINE_FULFILLMENT_LINE_MISMATCH',
  PriceError = 'PRICE_ERROR',
  Required = 'REQUIRED',
  TooManyIdentifiers = 'TOO_MANY_IDENTIFIERS',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_OrderBulkCreateFulfillmentInput = {
  /** List of items informing how to fulfill the order. */
  lines?: InputMaybe<Array<SaleorGraphql_OrderBulkCreateFulfillmentLineInput>>;
  /** Fulfillment's tracking code. */
  trackingCode?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderBulkCreateFulfillmentLineInput = {
  /** 0-based index of order line, which the fulfillment line refers to. */
  orderLineIndex: Scalars['Int']['input'];
  /** The number of line items to be fulfilled from given warehouse. */
  quantity: Scalars['Int']['input'];
  /** The external ID of the product variant. */
  variantExternalReference?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the product variant. */
  variantId?: InputMaybe<Scalars['ID']['input']>;
  /** The SKU of the product variant. */
  variantSku?: InputMaybe<Scalars['String']['input']>;
  /** ID of the warehouse from which the item will be fulfilled. */
  warehouse: Scalars['ID']['input'];
};

export type SaleorGraphql_OrderBulkCreateInput = {
  /** Billing address of the customer. */
  billingAddress: SaleorGraphql_AddressInput;
  /** Slug of the channel associated with the order. */
  channel: Scalars['String']['input'];
  /** The date, when the order was inserted to Saleor database. */
  createdAt: Scalars['DateTime']['input'];
  /** Currency code. */
  currency: Scalars['String']['input'];
  /** Note about customer. */
  customerNote?: InputMaybe<Scalars['String']['input']>;
  /** The delivery method selected for this order. */
  deliveryMethod?: InputMaybe<SaleorGraphql_OrderBulkCreateDeliveryMethodInput>;
  /** List of discounts. */
  discounts?: InputMaybe<Array<SaleorGraphql_OrderDiscountCommonInput>>;
  /** Determines whether displayed prices should include taxes. */
  displayGrossPrices?: InputMaybe<Scalars['Boolean']['input']>;
  /** External ID of the order. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Fulfillments of the order. */
  fulfillments?: InputMaybe<Array<SaleorGraphql_OrderBulkCreateFulfillmentInput>>;
  /** List of gift card codes associated with the order. */
  giftCards?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Invoices related to the order. */
  invoices?: InputMaybe<Array<SaleorGraphql_OrderBulkCreateInvoiceInput>>;
  /** Order language code. */
  languageCode: SaleorGraphql_LanguageCodeEnum | '%future added value';
  /** List of order lines. */
  lines: Array<SaleorGraphql_OrderBulkCreateOrderLineInput>;
  /** Metadata of the order. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Notes related to the order. */
  notes?: InputMaybe<Array<SaleorGraphql_OrderBulkCreateNoteInput>>;
  /** Private metadata of the order. */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of a view, where users should be redirected to see the order details. */
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
  /** Shipping address of the customer. */
  shippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Status of the order. */
  status?: InputMaybe<SaleorGraphql_OrderStatus | '%future added value'>;
  /** Transactions related to the order. */
  transactions?: InputMaybe<Array<SaleorGraphql_TransactionCreateInput>>;
  /** Customer associated with the order. */
  user: SaleorGraphql_OrderBulkCreateUserInput;
  /**
   * Code of a voucher associated with the order.
   *
   * Added in Saleor 3.18.
   */
  voucherCode?: InputMaybe<Scalars['String']['input']>;
  /** Weight of the order in kg. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

export type SaleorGraphql_OrderBulkCreateInvoiceInput = {
  /** The date, when the invoice was created. */
  createdAt: Scalars['DateTime']['input'];
  /** Metadata of the invoice. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Invoice number. */
  number?: InputMaybe<Scalars['String']['input']>;
  /** Private metadata of the invoice. */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of the invoice to download. */
  url?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderBulkCreateNoteInput = {
  /** The app ID associated with the message. */
  appId?: InputMaybe<Scalars['ID']['input']>;
  /** The date associated with the message. */
  date?: InputMaybe<Scalars['DateTime']['input']>;
  /** Note message. Max characters: 255. */
  message: Scalars['String']['input'];
  /** The user email associated with the message. */
  userEmail?: InputMaybe<Scalars['ID']['input']>;
  /** The user external ID associated with the message. */
  userExternalReference?: InputMaybe<Scalars['ID']['input']>;
  /** The user ID associated with the message. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

export type SaleorGraphql_OrderBulkCreateOrderLineInput = {
  /** The date, when the order line was created. */
  createdAt: Scalars['DateTime']['input'];
  /** Gift card flag. */
  isGiftCard: Scalars['Boolean']['input'];
  /** Determines whether shipping of the order line items is required. */
  isShippingRequired: Scalars['Boolean']['input'];
  /** Metadata of the order line. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Private metadata of the order line. */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** The name of the product. */
  productName?: InputMaybe<Scalars['String']['input']>;
  /** Number of items in the order line */
  quantity: Scalars['Int']['input'];
  /** The ID of the tax class. */
  taxClassId?: InputMaybe<Scalars['ID']['input']>;
  /** Metadata of the tax class. */
  taxClassMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** The name of the tax class. */
  taxClassName?: InputMaybe<Scalars['String']['input']>;
  /** Private metadata of the tax class. */
  taxClassPrivateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Tax rate of the order line. */
  taxRate?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Price of the order line. */
  totalPrice: SaleorGraphql_TaxedMoneyInput;
  /** Translation of the product name. */
  translatedProductName?: InputMaybe<Scalars['String']['input']>;
  /** Translation of the product variant name. */
  translatedVariantName?: InputMaybe<Scalars['String']['input']>;
  /** Price of the order line excluding applied discount. */
  undiscountedTotalPrice: SaleorGraphql_TaxedMoneyInput;
  /** The external ID of the product variant. */
  variantExternalReference?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the product variant. */
  variantId?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the product variant. */
  variantName?: InputMaybe<Scalars['String']['input']>;
  /** The SKU of the product variant. */
  variantSku?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the warehouse, where the line will be allocated. */
  warehouse: Scalars['ID']['input'];
};

export type SaleorGraphql_OrderBulkCreateResult = {
  __typename?: 'OrderBulkCreateResult';
  /** List of errors occurred on create attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderBulkCreateError>>>;
  /** Order data. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_OrderBulkCreateUserInput = {
  /** Customer email associated with the order. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Customer external ID associated with the order. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Customer ID associated with the order. */
  id?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Event sent when orders are imported.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderBulkCreated = SaleorGraphql_Event & {
  __typename?: 'OrderBulkCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The orders the event relates to. */
  orders?: Maybe<Array<FieldWrapper<SaleorGraphql_Order>>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Cancel an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderCancel = {
  __typename?: 'OrderCancel';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Canceled order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Event sent when order is canceled.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_OrderCancelled = SaleorGraphql_Event & {
  __typename?: 'OrderCancelled';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Capture an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderCapture = {
  __typename?: 'OrderCapture';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Captured order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Determine the current charge status for the order.
 *
 *     An order is considered overcharged when the sum of the
 *     transactionItem's charge amounts exceeds the value of
 *     `order.total` - `order.totalGrantedRefund`.
 *     If the sum of the transactionItem's charge amounts equals
 *     `order.total` - `order.totalGrantedRefund`, we consider the order to be fully
 *     charged.
 *     If the sum of the transactionItem's charge amounts covers a part of the
 *     `order.total` - `order.totalGrantedRefund`, we treat the order as partially charged.
 *
 *     NONE - the funds are not charged.
 *     PARTIAL - the funds that are charged don't cover the
 *     `order.total`-`order.totalGrantedRefund`
 *     FULL - the funds that are charged fully cover the
 *     `order.total`-`order.totalGrantedRefund`
 *     OVERCHARGED - the charged funds are bigger than the
 *     `order.total`-`order.totalGrantedRefund`
 */
export enum SaleorGraphql_OrderChargeStatusEnum {
  Full = 'FULL',
  None = 'NONE',
  Overcharged = 'OVERCHARGED',
  Partial = 'PARTIAL'
}

/**
 * Confirms an unconfirmed order by changing status to unfulfilled.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderConfirm = {
  __typename?: 'OrderConfirm';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Event sent when order is confirmed.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_OrderConfirmed = SaleorGraphql_Event & {
  __typename?: 'OrderConfirmed';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_OrderCountableConnection = {
  __typename?: 'OrderCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_OrderCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_OrderCountableEdge = {
  __typename?: 'OrderCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Order>;
};

/**
 * Create new order from existing checkout. Requires the following permissions: AUTHENTICATED_APP and HANDLE_CHECKOUTS.
 *
 * Added in Saleor 3.2.
 *
 * Triggers the following webhook events:
 * - SHIPPING_LIST_METHODS_FOR_CHECKOUT (sync): Optionally triggered when cached external shipping methods are invalid.
 * - CHECKOUT_FILTER_SHIPPING_METHODS (sync): Optionally triggered when cached filtered shipping methods are invalid.
 * - CHECKOUT_CALCULATE_TAXES (sync): Optionally triggered when checkout prices are expired.
 * - ORDER_CREATED (async): Triggered when order is created.
 * - NOTIFY_USER (async): A notification for order placement.
 * - NOTIFY_USER (async): A staff notification for order placement.
 * - ORDER_UPDATED (async): Triggered when order received the update after placement.
 * - ORDER_PAID (async): Triggered when newly created order is paid.
 * - ORDER_FULLY_PAID (async): Triggered when newly created order is fully paid.
 * - ORDER_CONFIRMED (async): Optionally triggered when newly created order are automatically marked as confirmed.
 */
export type SaleorGraphql_OrderCreateFromCheckout = {
  __typename?: 'OrderCreateFromCheckout';
  errors: Array<FieldWrapper<SaleorGraphql_OrderCreateFromCheckoutError>>;
  /** Placed order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_OrderCreateFromCheckoutError = {
  __typename?: 'OrderCreateFromCheckoutError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderCreateFromCheckoutErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of line Ids which cause the error. */
  lines?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of variant IDs which causes the error. */
  variants?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderCreateFromCheckoutErrorCode {
  BillingAddressNotSet = 'BILLING_ADDRESS_NOT_SET',
  ChannelInactive = 'CHANNEL_INACTIVE',
  CheckoutNotFound = 'CHECKOUT_NOT_FOUND',
  EmailNotSet = 'EMAIL_NOT_SET',
  GiftCardNotApplicable = 'GIFT_CARD_NOT_APPLICABLE',
  GraphqlError = 'GRAPHQL_ERROR',
  InsufficientStock = 'INSUFFICIENT_STOCK',
  InvalidShippingMethod = 'INVALID_SHIPPING_METHOD',
  NoLines = 'NO_LINES',
  ShippingAddressNotSet = 'SHIPPING_ADDRESS_NOT_SET',
  ShippingMethodNotSet = 'SHIPPING_METHOD_NOT_SET',
  TaxError = 'TAX_ERROR',
  UnavailableVariantInChannel = 'UNAVAILABLE_VARIANT_IN_CHANNEL',
  VoucherNotApplicable = 'VOUCHER_NOT_APPLICABLE'
}

/**
 * Event sent when new order is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_OrderCreated = SaleorGraphql_Event & {
  __typename?: 'OrderCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export enum SaleorGraphql_OrderDirection {
  /** Specifies an ascending sort order. */
  Asc = 'ASC',
  /** Specifies a descending sort order. */
  Desc = 'DESC'
}

/** Contains all details related to the applied discount to the order. */
export type SaleorGraphql_OrderDiscount = SaleorGraphql_Node & {
  __typename?: 'OrderDiscount';
  /** Returns amount of discount. */
  amount: FieldWrapper<SaleorGraphql_Money>;
  /** The ID of discount applied. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The name of applied discount. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Explanation for the applied discount.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  reason?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated name of the applied discount. */
  translatedName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The type of applied discount: Sale, Voucher or Manual. */
  type: FieldWrapper<SaleorGraphql_OrderDiscountType | '%future added value'>;
  /** Value of the discount. Can store fixed value or percent value */
  value: FieldWrapper<Scalars['PositiveDecimal']['output']>;
  /** Type of the discount: fixed or percent */
  valueType: FieldWrapper<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>;
};

/**
 * Adds discount to the order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderDiscountAdd = {
  __typename?: 'OrderDiscountAdd';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order which has been discounted. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderDiscountCommonInput = {
  /** Explanation for the applied discount. */
  reason?: InputMaybe<Scalars['String']['input']>;
  /** Value of the discount. Can store fixed value or percent value */
  value: Scalars['PositiveDecimal']['input'];
  /** Type of the discount: fixed or percent */
  valueType: SaleorGraphql_DiscountValueTypeEnum | '%future added value';
};

/**
 * Remove discount from the order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderDiscountDelete = {
  __typename?: 'OrderDiscountDelete';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order which has removed discount. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderDiscountType {
  Manual = 'MANUAL',
  OrderPromotion = 'ORDER_PROMOTION',
  Promotion = 'PROMOTION',
  Sale = 'SALE',
  Voucher = 'VOUCHER'
}

/**
 * Update discount for the order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderDiscountUpdate = {
  __typename?: 'OrderDiscountUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order which has been discounted. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderDraftFilterInput = {
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  created?: InputMaybe<SaleorGraphql_DateRangeInput>;
  customer?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderError = {
  __typename?: 'OrderError';
  /** A type of address that causes the error. */
  addressType?: Maybe<FieldWrapper<SaleorGraphql_AddressTypeEnum | '%future added value'>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of order line IDs that cause the error. */
  orderLines?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of product variants that are associated with the error */
  variants?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** Warehouse ID which causes the error. */
  warehouse?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderErrorCode {
  BillingAddressNotSet = 'BILLING_ADDRESS_NOT_SET',
  CannotCancelFulfillment = 'CANNOT_CANCEL_FULFILLMENT',
  CannotCancelOrder = 'CANNOT_CANCEL_ORDER',
  CannotDelete = 'CANNOT_DELETE',
  CannotDiscount = 'CANNOT_DISCOUNT',
  CannotFulfillUnpaidOrder = 'CANNOT_FULFILL_UNPAID_ORDER',
  CannotRefund = 'CANNOT_REFUND',
  CaptureInactivePayment = 'CAPTURE_INACTIVE_PAYMENT',
  ChannelInactive = 'CHANNEL_INACTIVE',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  FulfillOrderLine = 'FULFILL_ORDER_LINE',
  GiftCardLine = 'GIFT_CARD_LINE',
  GraphqlError = 'GRAPHQL_ERROR',
  InsufficientStock = 'INSUFFICIENT_STOCK',
  Invalid = 'INVALID',
  InvalidQuantity = 'INVALID_QUANTITY',
  InvalidVoucher = 'INVALID_VOUCHER',
  InvalidVoucherCode = 'INVALID_VOUCHER_CODE',
  NonEditableGiftLine = 'NON_EDITABLE_GIFT_LINE',
  NonRemovableGiftLine = 'NON_REMOVABLE_GIFT_LINE',
  NotAvailableInChannel = 'NOT_AVAILABLE_IN_CHANNEL',
  NotEditable = 'NOT_EDITABLE',
  NotFound = 'NOT_FOUND',
  OrderNoShippingAddress = 'ORDER_NO_SHIPPING_ADDRESS',
  PaymentError = 'PAYMENT_ERROR',
  PaymentMissing = 'PAYMENT_MISSING',
  ProductNotPublished = 'PRODUCT_NOT_PUBLISHED',
  ProductUnavailableForPurchase = 'PRODUCT_UNAVAILABLE_FOR_PURCHASE',
  Required = 'REQUIRED',
  ShippingMethodNotApplicable = 'SHIPPING_METHOD_NOT_APPLICABLE',
  ShippingMethodRequired = 'SHIPPING_METHOD_REQUIRED',
  TaxError = 'TAX_ERROR',
  TransactionError = 'TRANSACTION_ERROR',
  Unique = 'UNIQUE',
  VoidInactivePayment = 'VOID_INACTIVE_PAYMENT',
  ZeroQuantity = 'ZERO_QUANTITY'
}

/** History log of the order. */
export type SaleorGraphql_OrderEvent = SaleorGraphql_Node & {
  __typename?: 'OrderEvent';
  /** Amount of money. */
  amount?: Maybe<FieldWrapper<Scalars['Float']['output']>>;
  /** App that performed the action. Requires of of the following permissions: MANAGE_APPS, MANAGE_ORDERS, OWNER. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Composed ID of the Fulfillment. */
  composedId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Date when event happened at in ISO 8601 format. */
  date?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The discount applied to the order. */
  discount?: Maybe<FieldWrapper<SaleorGraphql_OrderEventDiscountObject>>;
  /** Email of the customer. */
  email?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Type of an email sent to the customer. */
  emailType?: Maybe<FieldWrapper<SaleorGraphql_OrderEventsEmailsEnum | '%future added value'>>;
  /** The lines fulfilled. */
  fulfilledItems?: Maybe<Array<FieldWrapper<SaleorGraphql_FulfillmentLine>>>;
  /** ID of the event associated with an order. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Number of an invoice related to the order. */
  invoiceNumber?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The concerned lines. */
  lines?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderEventOrderLineObject>>>;
  /** Content of the event. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** User-friendly number of an order. */
  orderNumber?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of oversold lines names. */
  oversoldItems?: Maybe<Array<FieldWrapper<Scalars['String']['output']>>>;
  /** The payment gateway of the payment. */
  paymentGateway?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The payment reference from the payment provider. */
  paymentId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Number of items. */
  quantity?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The reference of payment's transaction. */
  reference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The order event which is related to this event.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  related?: Maybe<FieldWrapper<SaleorGraphql_OrderEvent>>;
  /** The order which is related to this order. */
  relatedOrder?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** Define if shipping costs were included to the refund. */
  shippingCostsIncluded?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** The transaction reference of captured payment. */
  transactionReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Order event type. */
  type?: Maybe<FieldWrapper<SaleorGraphql_OrderEventsEnum | '%future added value'>>;
  /** User who performed the action. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** The warehouse were items were restocked. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};

export type SaleorGraphql_OrderEventCountableConnection = {
  __typename?: 'OrderEventCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_OrderEventCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_OrderEventCountableEdge = {
  __typename?: 'OrderEventCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_OrderEvent>;
};

export type SaleorGraphql_OrderEventDiscountObject = {
  __typename?: 'OrderEventDiscountObject';
  /** Returns amount of discount. */
  amount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Returns amount of discount. */
  oldAmount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Value of the discount. Can store fixed value or percent value. */
  oldValue?: Maybe<FieldWrapper<Scalars['PositiveDecimal']['output']>>;
  /** Type of the discount: fixed or percent. */
  oldValueType?: Maybe<FieldWrapper<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>>;
  /** Explanation for the applied discount. */
  reason?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Value of the discount. Can store fixed value or percent value. */
  value: FieldWrapper<Scalars['PositiveDecimal']['output']>;
  /** Type of the discount: fixed or percent. */
  valueType: FieldWrapper<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>;
};

export type SaleorGraphql_OrderEventOrderLineObject = {
  __typename?: 'OrderEventOrderLineObject';
  /** The discount applied to the order line. */
  discount?: Maybe<FieldWrapper<SaleorGraphql_OrderEventDiscountObject>>;
  /** The variant name. */
  itemName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The order line. */
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
  /** The variant quantity. */
  quantity?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderEventsEmailsEnum {
  Confirmed = 'CONFIRMED',
  DigitalLinks = 'DIGITAL_LINKS',
  FulfillmentConfirmation = 'FULFILLMENT_CONFIRMATION',
  OrderCancel = 'ORDER_CANCEL',
  OrderConfirmation = 'ORDER_CONFIRMATION',
  OrderRefund = 'ORDER_REFUND',
  PaymentConfirmation = 'PAYMENT_CONFIRMATION',
  ShippingConfirmation = 'SHIPPING_CONFIRMATION',
  TrackingUpdated = 'TRACKING_UPDATED'
}

/** The different order event types. */
export enum SaleorGraphql_OrderEventsEnum {
  AddedProducts = 'ADDED_PRODUCTS',
  Canceled = 'CANCELED',
  Confirmed = 'CONFIRMED',
  DraftCreated = 'DRAFT_CREATED',
  DraftCreatedFromReplace = 'DRAFT_CREATED_FROM_REPLACE',
  EmailSent = 'EMAIL_SENT',
  Expired = 'EXPIRED',
  ExternalServiceNotification = 'EXTERNAL_SERVICE_NOTIFICATION',
  FulfillmentAwaitsApproval = 'FULFILLMENT_AWAITS_APPROVAL',
  FulfillmentCanceled = 'FULFILLMENT_CANCELED',
  FulfillmentFulfilledItems = 'FULFILLMENT_FULFILLED_ITEMS',
  FulfillmentRefunded = 'FULFILLMENT_REFUNDED',
  FulfillmentReplaced = 'FULFILLMENT_REPLACED',
  FulfillmentRestockedItems = 'FULFILLMENT_RESTOCKED_ITEMS',
  FulfillmentReturned = 'FULFILLMENT_RETURNED',
  InvoiceGenerated = 'INVOICE_GENERATED',
  InvoiceRequested = 'INVOICE_REQUESTED',
  InvoiceSent = 'INVOICE_SENT',
  InvoiceUpdated = 'INVOICE_UPDATED',
  NoteAdded = 'NOTE_ADDED',
  NoteUpdated = 'NOTE_UPDATED',
  OrderDiscountAdded = 'ORDER_DISCOUNT_ADDED',
  OrderDiscountAutomaticallyUpdated = 'ORDER_DISCOUNT_AUTOMATICALLY_UPDATED',
  OrderDiscountDeleted = 'ORDER_DISCOUNT_DELETED',
  OrderDiscountUpdated = 'ORDER_DISCOUNT_UPDATED',
  OrderFullyPaid = 'ORDER_FULLY_PAID',
  OrderLineDiscountRemoved = 'ORDER_LINE_DISCOUNT_REMOVED',
  OrderLineDiscountUpdated = 'ORDER_LINE_DISCOUNT_UPDATED',
  OrderLineProductDeleted = 'ORDER_LINE_PRODUCT_DELETED',
  OrderLineVariantDeleted = 'ORDER_LINE_VARIANT_DELETED',
  OrderMarkedAsPaid = 'ORDER_MARKED_AS_PAID',
  OrderReplacementCreated = 'ORDER_REPLACEMENT_CREATED',
  Other = 'OTHER',
  OversoldItems = 'OVERSOLD_ITEMS',
  PaymentAuthorized = 'PAYMENT_AUTHORIZED',
  PaymentCaptured = 'PAYMENT_CAPTURED',
  PaymentFailed = 'PAYMENT_FAILED',
  PaymentRefunded = 'PAYMENT_REFUNDED',
  PaymentVoided = 'PAYMENT_VOIDED',
  Placed = 'PLACED',
  PlacedFromDraft = 'PLACED_FROM_DRAFT',
  RemovedProducts = 'REMOVED_PRODUCTS',
  TrackingUpdated = 'TRACKING_UPDATED',
  TransactionCancelRequested = 'TRANSACTION_CANCEL_REQUESTED',
  TransactionChargeRequested = 'TRANSACTION_CHARGE_REQUESTED',
  TransactionEvent = 'TRANSACTION_EVENT',
  TransactionMarkAsPaidFailed = 'TRANSACTION_MARK_AS_PAID_FAILED',
  TransactionRefundRequested = 'TRANSACTION_REFUND_REQUESTED',
  UpdatedAddress = 'UPDATED_ADDRESS'
}

/**
 * Event sent when order becomes expired.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderExpired = SaleorGraphql_Event & {
  __typename?: 'OrderExpired';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_OrderFilterInput = {
  authorizeStatus?: InputMaybe<Array<SaleorGraphql_OrderAuthorizeStatusEnum | '%future added value'>>;
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  chargeStatus?: InputMaybe<Array<SaleorGraphql_OrderChargeStatusEnum | '%future added value'>>;
  checkoutIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  created?: InputMaybe<SaleorGraphql_DateRangeInput>;
  customer?: InputMaybe<Scalars['String']['input']>;
  giftCardBought?: InputMaybe<Scalars['Boolean']['input']>;
  giftCardUsed?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  isClickAndCollect?: InputMaybe<Scalars['Boolean']['input']>;
  isPreorder?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  numbers?: InputMaybe<Array<Scalars['String']['input']>>;
  paymentStatus?: InputMaybe<Array<SaleorGraphql_PaymentChargeStatusEnum | '%future added value'>>;
  search?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Array<SaleorGraphql_OrderStatusFilter | '%future added value'>>;
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

/**
 * Filter shipping methods for order.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_OrderFilterShippingMethods = SaleorGraphql_Event & {
  __typename?: 'OrderFilterShippingMethods';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * Shipping methods that can be used with this checkout.
   *
   * Added in Saleor 3.6.
   */
  shippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethod>>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Creates new fulfillments for an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 *
 * Triggers the following webhook events:
 * - FULFILLMENT_CREATED (async): A new fulfillment is created.
 * - ORDER_FULFILLED (async): Order is fulfilled.
 * - FULFILLMENT_TRACKING_NUMBER_UPDATED (async): Sent when fulfillment tracking number is updated.
 * - FULFILLMENT_APPROVED (async): A fulfillment is approved.
 */
export type SaleorGraphql_OrderFulfill = {
  __typename?: 'OrderFulfill';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** List of created fulfillments. */
  fulfillments?: Maybe<Array<FieldWrapper<SaleorGraphql_Fulfillment>>>;
  /** Fulfilled order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderFulfillInput = {
  /** If true, then allow proceed fulfillment when stock is exceeded. */
  allowStockToBeExceeded?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of items informing how to fulfill the order. */
  lines: Array<SaleorGraphql_OrderFulfillLineInput>;
  /** If true, send an email notification to the customer. */
  notifyCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Fulfillment tracking number.
   *
   * Added in Saleor 3.6.
   */
  trackingNumber?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderFulfillLineInput = {
  /** The ID of the order line. */
  orderLineId?: InputMaybe<Scalars['ID']['input']>;
  /** List of stock items to create. */
  stocks: Array<SaleorGraphql_OrderFulfillStockInput>;
};

export type SaleorGraphql_OrderFulfillStockInput = {
  /** The number of line items to be fulfilled from given warehouse. */
  quantity: Scalars['Int']['input'];
  /** ID of the warehouse from which the item will be fulfilled. */
  warehouse: Scalars['ID']['input'];
};

/**
 * Event sent when order is fulfilled.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_OrderFulfilled = SaleorGraphql_Event & {
  __typename?: 'OrderFulfilled';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when order is fully paid.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_OrderFullyPaid = SaleorGraphql_Event & {
  __typename?: 'OrderFullyPaid';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * The order is fully refunded.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderFullyRefunded = SaleorGraphql_Event & {
  __typename?: 'OrderFullyRefunded';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Adds granted refund to the order.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderGrantRefundCreate = {
  __typename?: 'OrderGrantRefundCreate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderGrantRefundCreateError>>;
  /** Created granted refund. */
  grantedRefund?: Maybe<FieldWrapper<SaleorGraphql_OrderGrantedRefund>>;
  /** Order which has assigned new grant refund. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_OrderGrantRefundCreateError = {
  __typename?: 'OrderGrantRefundCreateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderGrantRefundCreateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of lines which cause the error.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  lines?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderGrantRefundCreateLineError>>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderGrantRefundCreateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  ShippingCostsAlreadyGranted = 'SHIPPING_COSTS_ALREADY_GRANTED'
}

export type SaleorGraphql_OrderGrantRefundCreateInput = {
  /** Amount of the granted refund. If not provided, the amount will be calculated automatically based on provided `lines` and `grantRefundForShipping`. */
  amount?: InputMaybe<Scalars['Decimal']['input']>;
  /**
   * Determine if granted refund should include shipping costs.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  grantRefundForShipping?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Lines to assign to granted refund.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  lines?: InputMaybe<Array<SaleorGraphql_OrderGrantRefundCreateLineInput>>;
  /** Reason of the granted refund. */
  reason?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderGrantRefundCreateLineError = {
  __typename?: 'OrderGrantRefundCreateLineError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderGrantRefundCreateLineErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the line related to the error. */
  lineId: FieldWrapper<Scalars['ID']['output']>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderGrantRefundCreateLineErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  NotFound = 'NOT_FOUND',
  QuantityGreaterThanAvailable = 'QUANTITY_GREATER_THAN_AVAILABLE'
}

export type SaleorGraphql_OrderGrantRefundCreateLineInput = {
  /** The ID of the order line. */
  id: Scalars['ID']['input'];
  /** The quantity of line items to be marked to refund. */
  quantity: Scalars['Int']['input'];
  /** Reason of the granted refund for the line. */
  reason?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Updates granted refund.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderGrantRefundUpdate = {
  __typename?: 'OrderGrantRefundUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderGrantRefundUpdateError>>;
  /** Created granted refund. */
  grantedRefund?: Maybe<FieldWrapper<SaleorGraphql_OrderGrantedRefund>>;
  /** Order which has assigned updated grant refund. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_OrderGrantRefundUpdateError = {
  __typename?: 'OrderGrantRefundUpdateError';
  /**
   * List of lines to add which cause the error.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  addLines?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderGrantRefundUpdateLineError>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderGrantRefundUpdateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of lines to remove which cause the error.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  removeLines?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderGrantRefundUpdateLineError>>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderGrantRefundUpdateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  ShippingCostsAlreadyGranted = 'SHIPPING_COSTS_ALREADY_GRANTED'
}

export type SaleorGraphql_OrderGrantRefundUpdateInput = {
  /**
   * Lines to assign to granted refund.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  addLines?: InputMaybe<Array<SaleorGraphql_OrderGrantRefundUpdateLineAddInput>>;
  /** Amount of the granted refund. if not provided and `addLines` or `removeLines` or `grantRefundForShipping` is provided, amount will be calculated automatically. */
  amount?: InputMaybe<Scalars['Decimal']['input']>;
  /**
   * Determine if granted refund should include shipping costs.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  grantRefundForShipping?: InputMaybe<Scalars['Boolean']['input']>;
  /** Reason of the granted refund. */
  reason?: InputMaybe<Scalars['String']['input']>;
  /**
   * Lines to remove from granted refund.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  removeLines?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type SaleorGraphql_OrderGrantRefundUpdateLineAddInput = {
  /** The ID of the order line. */
  id: Scalars['ID']['input'];
  /** The quantity of line items to be marked to refund. */
  quantity: Scalars['Int']['input'];
  /** Reason of the granted refund for the line. */
  reason?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_OrderGrantRefundUpdateLineError = {
  __typename?: 'OrderGrantRefundUpdateLineError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderGrantRefundUpdateLineErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the line related to the error. */
  lineId: FieldWrapper<Scalars['ID']['output']>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderGrantRefundUpdateLineErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  NotFound = 'NOT_FOUND',
  QuantityGreaterThanAvailable = 'QUANTITY_GREATER_THAN_AVAILABLE'
}

/**
 * The details of granted refund.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderGrantedRefund = {
  __typename?: 'OrderGrantedRefund';
  /** Refund amount. */
  amount: FieldWrapper<SaleorGraphql_Money>;
  /** App that performed the action. */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Time of creation. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Lines assigned to the granted refund.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  lines?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderGrantedRefundLine>>>;
  /** Reason of the refund. */
  reason?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * If true, the refunded amount includes the shipping price.If false, the refunded amount does not include the shipping price.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  shippingCostsIncluded: FieldWrapper<Scalars['Boolean']['output']>;
  /** Time of last update. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** User who performed the action. Requires of of the following permissions: MANAGE_USERS, MANAGE_STAFF, OWNER. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Represents granted refund line.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderGrantedRefundLine = {
  __typename?: 'OrderGrantedRefundLine';
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Line of the order associated with this granted refund. */
  orderLine: FieldWrapper<SaleorGraphql_OrderLine>;
  /** Number of items to refund. */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /** Reason for refunding the line. */
  reason?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents order line of particular order. */
export type SaleorGraphql_OrderLine = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'OrderLine';
  /**
   * List of allocations across warehouses.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  allocations?: Maybe<Array<FieldWrapper<SaleorGraphql_Allocation>>>;
  digitalContentUrl?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentUrl>>;
  /** ID of the order line. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Determine if the line is a gift.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  isGift?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Whether the product variant requires shipping. */
  isShippingRequired: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * List of public metadata items. Can be accessed without permissions.
   *
   * Added in Saleor 3.5.
   */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.5.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.5.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * List of private metadata items. Requires staff permissions to access.
   *
   * Added in Saleor 3.5.
   */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.5.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.5.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the product in order line. */
  productName: FieldWrapper<Scalars['String']['output']>;
  /** SKU of the product variant. */
  productSku?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the product variant. */
  productVariantId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Number of variant items ordered. */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /** Number of variant items fulfilled. */
  quantityFulfilled: FieldWrapper<Scalars['Int']['output']>;
  /**
   * A quantity of items remaining to be fulfilled.
   *
   * Added in Saleor 3.1.
   */
  quantityToFulfill: FieldWrapper<Scalars['Int']['output']>;
  /**
   * Denormalized sale ID, set when order line is created for a product variant that is on sale.
   *
   * Added in Saleor 3.14.
   */
  saleId?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /**
   * Denormalized tax class of the product in this order line.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
  /**
   * Denormalized public metadata of the tax class.
   *
   * Added in Saleor 3.9.
   */
  taxClassMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * Denormalized name of the tax class.
   *
   * Added in Saleor 3.9.
   */
  taxClassName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Denormalized private metadata of the tax class. Requires staff permissions to access.
   *
   * Added in Saleor 3.9.
   */
  taxClassPrivateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /** Rate of tax applied on product variant. */
  taxRate: FieldWrapper<Scalars['Float']['output']>;
  thumbnail?: Maybe<FieldWrapper<SaleorGraphql_Image>>;
  /** Price of the order line. */
  totalPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** Product name in the customer's language */
  translatedProductName: FieldWrapper<Scalars['String']['output']>;
  /** Variant name in the customer's language */
  translatedVariantName: FieldWrapper<Scalars['String']['output']>;
  /** Price of the order line without discounts. */
  undiscountedTotalPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** Price of the single item in the order line without applied an order line discount. */
  undiscountedUnitPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** The discount applied to the single order line. */
  unitDiscount: FieldWrapper<SaleorGraphql_Money>;
  /** Reason for any discounts applied on a product in the order. */
  unitDiscountReason?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Type of the discount: fixed or percent */
  unitDiscountType?: Maybe<FieldWrapper<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>>;
  /** Value of the discount. Can store fixed value or percent value */
  unitDiscountValue: FieldWrapper<Scalars['PositiveDecimal']['output']>;
  /** Price of the single item in the order line. */
  unitPrice: FieldWrapper<SaleorGraphql_TaxedMoney>;
  /** A purchased product variant. Note: this field may be null if the variant has been removed from stock at all. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  variant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** Name of the variant of product in order line. */
  variantName: FieldWrapper<Scalars['String']['output']>;
  /**
   * Voucher code that was used for this order line.
   *
   * Added in Saleor 3.14.
   */
  voucherCode?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/** Represents order line of particular order. */
export type SaleorGraphql_OrderLineMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents order line of particular order. */
export type SaleorGraphql_OrderLineMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents order line of particular order. */
export type SaleorGraphql_OrderLinePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents order line of particular order. */
export type SaleorGraphql_OrderLinePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents order line of particular order. */
export type SaleorGraphql_OrderLineThumbnailArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

export type SaleorGraphql_OrderLineCreateInput = {
  /**
   * Flag that allow force splitting the same variant into multiple lines by skipping the matching logic.
   *
   * Added in Saleor 3.6.
   */
  forceNewLine?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Custom price of the item.When the line with the same variant will be provided multiple times, the last price will be used.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  price?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Number of variant items ordered. */
  quantity: Scalars['Int']['input'];
  /** Product variant ID. */
  variantId: Scalars['ID']['input'];
};

/**
 * Deletes an order line from an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderLineDelete = {
  __typename?: 'OrderLineDelete';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A related order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** An order line that was deleted. */
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
};

/**
 * Remove discount applied to the order line.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderLineDiscountRemove = {
  __typename?: 'OrderLineDiscountRemove';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order which is related to line which has removed discount. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order line which has removed discount. */
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
};

/**
 * Update discount for the order line.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderLineDiscountUpdate = {
  __typename?: 'OrderLineDiscountUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order which is related to the discounted line. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order line which has been discounted. */
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
};

export type SaleorGraphql_OrderLineInput = {
  /** Number of variant items ordered. */
  quantity: Scalars['Int']['input'];
};

/**
 * Updates an order line of an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderLineUpdate = {
  __typename?: 'OrderLineUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Related order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  orderLine?: Maybe<FieldWrapper<SaleorGraphql_OrderLine>>;
};

/**
 * Create order lines for an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderLinesCreate = {
  __typename?: 'OrderLinesCreate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Related order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** List of added order lines. */
  orderLines?: Maybe<Array<FieldWrapper<SaleorGraphql_OrderLine>>>;
};

/**
 * Mark order as manually paid.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderMarkAsPaid = {
  __typename?: 'OrderMarkAsPaid';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order marked as paid. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/**
 * Event sent when order metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_OrderMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'OrderMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Adds note to the order.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderNoteAdd = {
  __typename?: 'OrderNoteAdd';
  errors: Array<FieldWrapper<SaleorGraphql_OrderNoteAddError>>;
  /** Order note created. */
  event?: Maybe<FieldWrapper<SaleorGraphql_OrderEvent>>;
  /** Order with the note added. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_OrderNoteAddError = {
  __typename?: 'OrderNoteAddError';
  /** The error code. */
  code?: Maybe<FieldWrapper<SaleorGraphql_OrderNoteAddErrorCode | '%future added value'>>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderNoteAddErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Required = 'REQUIRED'
}

export type SaleorGraphql_OrderNoteInput = {
  /** Note message. */
  message: Scalars['String']['input'];
};

/**
 * Updates note of an order.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderNoteUpdate = {
  __typename?: 'OrderNoteUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderNoteUpdateError>>;
  /** Order note updated. */
  event?: Maybe<FieldWrapper<SaleorGraphql_OrderEvent>>;
  /** Order with the note updated. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
};

export type SaleorGraphql_OrderNoteUpdateError = {
  __typename?: 'OrderNoteUpdateError';
  /** The error code. */
  code?: Maybe<FieldWrapper<SaleorGraphql_OrderNoteUpdateErrorCode | '%future added value'>>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderNoteUpdateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

export type SaleorGraphql_OrderOrCheckout = SaleorGraphql_Checkout | SaleorGraphql_Order;

/** An enumeration. */
export enum SaleorGraphql_OrderOriginEnum {
  BulkCreate = 'BULK_CREATE',
  Checkout = 'CHECKOUT',
  Draft = 'DRAFT',
  Reissue = 'REISSUE'
}

/**
 * Payment has been made. The order may be partially or fully paid.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderPaid = SaleorGraphql_Event & {
  __typename?: 'OrderPaid';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_OrderPredicateInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_OrderPredicateInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_OrderPredicateInput>>;
  /** Defines the conditions related to checkout and order objects. */
  discountedObjectPredicate?: InputMaybe<SaleorGraphql_DiscountedObjectWhereInput>;
};

/**
 * Refund an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderRefund = {
  __typename?: 'OrderRefund';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A refunded order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderRefundFulfillmentLineInput = {
  /** The ID of the fulfillment line to refund. */
  fulfillmentLineId: Scalars['ID']['input'];
  /** The number of items to be refunded. */
  quantity: Scalars['Int']['input'];
};

export type SaleorGraphql_OrderRefundLineInput = {
  /** The ID of the order line to refund. */
  orderLineId: Scalars['ID']['input'];
  /** The number of items to be refunded. */
  quantity: Scalars['Int']['input'];
};

export type SaleorGraphql_OrderRefundProductsInput = {
  /** The total amount of refund when the value is provided manually. */
  amountToRefund?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** List of fulfilled lines to refund. */
  fulfillmentLines?: InputMaybe<Array<SaleorGraphql_OrderRefundFulfillmentLineInput>>;
  /** If true, Saleor will refund shipping costs. If amountToRefund is providedincludeShippingCosts will be ignored. */
  includeShippingCosts?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of unfulfilled lines to refund. */
  orderLines?: InputMaybe<Array<SaleorGraphql_OrderRefundLineInput>>;
};

/**
 * The order received a refund. The order may be partially or fully refunded.
 *
 * Added in Saleor 3.14.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_OrderRefunded = SaleorGraphql_Event & {
  __typename?: 'OrderRefunded';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_OrderReturnFulfillmentLineInput = {
  /** The ID of the fulfillment line to return. */
  fulfillmentLineId: Scalars['ID']['input'];
  /** The number of items to be returned. */
  quantity: Scalars['Int']['input'];
  /** Determines, if the line should be added to replace order. */
  replace?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_OrderReturnLineInput = {
  /** The ID of the order line to return. */
  orderLineId: Scalars['ID']['input'];
  /** The number of items to be returned. */
  quantity: Scalars['Int']['input'];
  /** Determines, if the line should be added to replace order. */
  replace?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_OrderReturnProductsInput = {
  /** The total amount of refund when the value is provided manually. */
  amountToRefund?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** List of fulfilled lines to return. */
  fulfillmentLines?: InputMaybe<Array<SaleorGraphql_OrderReturnFulfillmentLineInput>>;
  /** If true, Saleor will refund shipping costs. If amountToRefund is providedincludeShippingCosts will be ignored. */
  includeShippingCosts?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of unfulfilled lines to return. */
  orderLines?: InputMaybe<Array<SaleorGraphql_OrderReturnLineInput>>;
  /** If true, Saleor will call refund action for all lines. */
  refund?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Represents the channel-specific order settings. */
export type SaleorGraphql_OrderSettings = {
  __typename?: 'OrderSettings';
  /**
   * Determine if it is possible to place unpdaid order by calling `checkoutComplete` mutation.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  allowUnpaidOrders: FieldWrapper<Scalars['Boolean']['output']>;
  /** When disabled, all new orders from checkout will be marked as unconfirmed. When enabled orders from checkout will become unfulfilled immediately. */
  automaticallyConfirmAllNewOrders: FieldWrapper<Scalars['Boolean']['output']>;
  /** When enabled, all non-shippable gift card orders will be fulfilled automatically. */
  automaticallyFulfillNonShippableGiftCard: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * The time in days after expired orders will be deleted.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  deleteExpiredOrdersAfter: FieldWrapper<Scalars['Day']['output']>;
  /**
   * Expiration time in minutes. Default null - means do not expire any orders.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  expireOrdersAfter?: Maybe<FieldWrapper<Scalars['Minute']['output']>>;
  /**
   * Determine if voucher applied on draft order should be count toward voucher usage.
   *
   * Added in Saleor 3.18.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  includeDraftOrderInVoucherUsage: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Determine what strategy will be used to mark the order as paid. Based on the chosen option, the proper object will be created and attached to the order when it's manually marked as paid.
   * `PAYMENT_FLOW` - [default option] creates the `Payment` object.
   * `TRANSACTION_FLOW` - creates the `TransactionItem` object.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  markAsPaidStrategy: FieldWrapper<SaleorGraphql_MarkAsPaidStrategyEnum | '%future added value'>;
};

export type SaleorGraphql_OrderSettingsError = {
  __typename?: 'OrderSettingsError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_OrderSettingsErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_OrderSettingsErrorCode {
  Invalid = 'INVALID'
}

export type SaleorGraphql_OrderSettingsInput = {
  /**
   * Determine if it is possible to place unpaid order by calling `checkoutComplete` mutation.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  allowUnpaidOrders?: InputMaybe<Scalars['Boolean']['input']>;
  /** When disabled, all new orders from checkout will be marked as unconfirmed. When enabled orders from checkout will become unfulfilled immediately. By default set to True */
  automaticallyConfirmAllNewOrders?: InputMaybe<Scalars['Boolean']['input']>;
  /** When enabled, all non-shippable gift card orders will be fulfilled automatically. By defualt set to True. */
  automaticallyFulfillNonShippableGiftCard?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * The time in days after expired orders will be deleted.Allowed range is from 1 to 120.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  deleteExpiredOrdersAfter?: InputMaybe<Scalars['Day']['input']>;
  /**
   * Expiration time in minutes. Default null - means do not expire any orders. Enter 0 or null to disable.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  expireOrdersAfter?: InputMaybe<Scalars['Minute']['input']>;
  /**
   * Specify whether a coupon applied to draft orders will count toward voucher usage.
   *
   * Warning:  when switching this setting from `false` to `true`, the vouchers will be disconnected from all draft orders.
   *
   * Added in Saleor 3.18.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  includeDraftOrderInVoucherUsage?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Determine what strategy will be used to mark the order as paid. Based on the chosen option, the proper object will be created and attached to the order when it's manually marked as paid.
   * `PAYMENT_FLOW` - [default option] creates the `Payment` object.
   * `TRANSACTION_FLOW` - creates the `TransactionItem` object.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  markAsPaidStrategy?: InputMaybe<SaleorGraphql_MarkAsPaidStrategyEnum | '%future added value'>;
};

/**
 * Update shop order settings across all channels. Returns `orderSettings` for the first `channel` in alphabetical order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderSettingsUpdate = {
  __typename?: 'OrderSettingsUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderSettingsError>>;
  /** Order settings. */
  orderSettings?: Maybe<FieldWrapper<SaleorGraphql_OrderSettings>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderSettingsErrors: Array<FieldWrapper<SaleorGraphql_OrderSettingsError>>;
};

export type SaleorGraphql_OrderSettingsUpdateInput = {
  /** When disabled, all new orders from checkout will be marked as unconfirmed. When enabled orders from checkout will become unfulfilled immediately. By default set to True */
  automaticallyConfirmAllNewOrders?: InputMaybe<Scalars['Boolean']['input']>;
  /** When enabled, all non-shippable gift card orders will be fulfilled automatically. By default set to True. */
  automaticallyFulfillNonShippableGiftCard?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum SaleorGraphql_OrderSortField {
  /**
   * Sort orders by creation date.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  CreatedAt = 'CREATED_AT',
  /**
   * Sort orders by creation date.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  CreationDate = 'CREATION_DATE',
  /** Sort orders by customer. */
  Customer = 'CUSTOMER',
  /** Sort orders by fulfillment status. */
  FulfillmentStatus = 'FULFILLMENT_STATUS',
  /** Sort orders by last modified at. */
  LastModifiedAt = 'LAST_MODIFIED_AT',
  /** Sort orders by number. */
  Number = 'NUMBER',
  /** Sort orders by payment. */
  Payment = 'PAYMENT',
  /** Sort orders by rank. Note: This option is available only with the `search` filter. */
  Rank = 'RANK'
}

export type SaleorGraphql_OrderSortingInput = {
  /** Specifies the direction in which to sort orders. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort orders by the selected field. */
  field: SaleorGraphql_OrderSortField | '%future added value';
};

/** An enumeration. */
export enum SaleorGraphql_OrderStatus {
  Canceled = 'CANCELED',
  Draft = 'DRAFT',
  Expired = 'EXPIRED',
  Fulfilled = 'FULFILLED',
  PartiallyFulfilled = 'PARTIALLY_FULFILLED',
  PartiallyReturned = 'PARTIALLY_RETURNED',
  Returned = 'RETURNED',
  Unconfirmed = 'UNCONFIRMED',
  Unfulfilled = 'UNFULFILLED'
}

export enum SaleorGraphql_OrderStatusFilter {
  Canceled = 'CANCELED',
  Fulfilled = 'FULFILLED',
  PartiallyFulfilled = 'PARTIALLY_FULFILLED',
  ReadyToCapture = 'READY_TO_CAPTURE',
  ReadyToFulfill = 'READY_TO_FULFILL',
  Unconfirmed = 'UNCONFIRMED',
  Unfulfilled = 'UNFULFILLED'
}

/**
 * Updates an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderUpdate = {
  __typename?: 'OrderUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderUpdateInput = {
  /** Billing address of the customer. */
  billingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /**
   * External ID of this order.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Shipping address of the customer. */
  shippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Email address of the customer. */
  userEmail?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Updates a shipping method of the order. Requires shipping method ID to update, when null is passed then currently assigned shipping method is removed.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderUpdateShipping = {
  __typename?: 'OrderUpdateShipping';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** Order with updated shipping method. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

export type SaleorGraphql_OrderUpdateShippingInput = {
  /** ID of the selected shipping method, pass null to remove currently assigned shipping method. */
  shippingMethod?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Event sent when order is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_OrderUpdated = SaleorGraphql_Event & {
  __typename?: 'OrderUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The order the event relates to. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Void an order.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_OrderVoid = {
  __typename?: 'OrderVoid';
  errors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
  /** A voided order. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  orderErrors: Array<FieldWrapper<SaleorGraphql_OrderError>>;
};

/** A static page that can be manually added by a shop operator through the dashboard. */
export type SaleorGraphql_Page = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Page';
  /** List of attributes assigned to this product. */
  attributes: Array<FieldWrapper<SaleorGraphql_SelectedAttribute>>;
  /**
   * Content of the page.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  content?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Content of the page.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `content` field instead.
   */
  contentJson: FieldWrapper<Scalars['JSONString']['output']>;
  /** Date and time at which page was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** ID of the page. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Determines if the page is published. */
  isPublished: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Determines the type of page */
  pageType: FieldWrapper<SaleorGraphql_PageType>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use the `publishedAt` field to fetch the publication date. */
  publicationDate?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /**
   * The page publication date.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** Description of the page for SEO. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Title of the page for SEO. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Slug of the page. */
  slug: FieldWrapper<Scalars['String']['output']>;
  /** Title of the page. */
  title: FieldWrapper<Scalars['String']['output']>;
  /** Returns translated page fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_PageTranslation>>;
};


/** A static page that can be manually added by a shop operator through the dashboard. */
export type SaleorGraphql_PageMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** A static page that can be manually added by a shop operator through the dashboard. */
export type SaleorGraphql_PageMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** A static page that can be manually added by a shop operator through the dashboard. */
export type SaleorGraphql_PagePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** A static page that can be manually added by a shop operator through the dashboard. */
export type SaleorGraphql_PagePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** A static page that can be manually added by a shop operator through the dashboard. */
export type SaleorGraphql_PageTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Assign attributes to a given page type.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageAttributeAssign = {
  __typename?: 'PageAttributeAssign';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** The updated page type. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
};

/**
 * Unassign attributes from a given page type.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageAttributeUnassign = {
  __typename?: 'PageAttributeUnassign';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** The updated page type. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
};

/**
 * Deletes pages.
 *
 * Requires one of the following permissions: MANAGE_PAGES.
 */
export type SaleorGraphql_PageBulkDelete = {
  __typename?: 'PageBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

/**
 * Publish pages.
 *
 * Requires one of the following permissions: MANAGE_PAGES.
 */
export type SaleorGraphql_PageBulkPublish = {
  __typename?: 'PageBulkPublish';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

export type SaleorGraphql_PageCountableConnection = {
  __typename?: 'PageCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_PageCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_PageCountableEdge = {
  __typename?: 'PageCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Page>;
};

/**
 * Creates a new page.
 *
 * Requires one of the following permissions: MANAGE_PAGES.
 */
export type SaleorGraphql_PageCreate = {
  __typename?: 'PageCreate';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

export type SaleorGraphql_PageCreateInput = {
  /** List of attributes. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeValueInput>>;
  /**
   * Page content.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  content?: InputMaybe<Scalars['JSONString']['input']>;
  /** Determines if page is visible in the storefront. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /** ID of the page type that page belongs to. */
  pageType: Scalars['ID']['input'];
  /**
   * Publication date. ISO 8601 standard.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
   */
  publicationDate?: InputMaybe<Scalars['String']['input']>;
  /**
   * Publication date time. ISO 8601 standard.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Page internal name. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** Page title. */
  title?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new page is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_PageCreated = SaleorGraphql_Event & {
  __typename?: 'PageCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The page the event relates to. */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a page.
 *
 * Requires one of the following permissions: MANAGE_PAGES.
 */
export type SaleorGraphql_PageDelete = {
  __typename?: 'PageDelete';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

/**
 * Event sent when page is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_PageDeleted = SaleorGraphql_Event & {
  __typename?: 'PageDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The page the event relates to. */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PageError = {
  __typename?: 'PageError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PageErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_PageErrorCode {
  AttributeAlreadyAssigned = 'ATTRIBUTE_ALREADY_ASSIGNED',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_PageFilterInput = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  pageTypes?: InputMaybe<Array<Scalars['ID']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** The Relay compliant `PageInfo` type, containing data necessary to paginate this connection. */
export type SaleorGraphql_PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** When paginating forwards, are there more items? */
  hasNextPage: FieldWrapper<Scalars['Boolean']['output']>;
  /** When paginating backwards, are there more items? */
  hasPreviousPage: FieldWrapper<Scalars['Boolean']['output']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PageInput = {
  /** List of attributes. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeValueInput>>;
  /**
   * Page content.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  content?: InputMaybe<Scalars['JSONString']['input']>;
  /** Determines if page is visible in the storefront. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Publication date. ISO 8601 standard.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
   */
  publicationDate?: InputMaybe<Scalars['String']['input']>;
  /**
   * Publication date time. ISO 8601 standard.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Page internal name. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** Page title. */
  title?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Reorder page attribute values.
 *
 * Requires one of the following permissions: MANAGE_PAGES.
 */
export type SaleorGraphql_PageReorderAttributeValues = {
  __typename?: 'PageReorderAttributeValues';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** Page from which attribute values are reordered. */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

export enum SaleorGraphql_PageSortField {
  /**
   * Sort pages by creation date.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  CreatedAt = 'CREATED_AT',
  /**
   * Sort pages by creation date.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  CreationDate = 'CREATION_DATE',
  /**
   * Sort pages by publication date.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  PublicationDate = 'PUBLICATION_DATE',
  /**
   * Sort pages by publication date.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  PublishedAt = 'PUBLISHED_AT',
  /** Sort pages by slug. */
  Slug = 'SLUG',
  /** Sort pages by title. */
  Title = 'TITLE',
  /** Sort pages by visibility. */
  Visibility = 'VISIBILITY'
}

export type SaleorGraphql_PageSortingInput = {
  /** Specifies the direction in which to sort pages. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort pages by the selected field. */
  field: SaleorGraphql_PageSortField | '%future added value';
};

/** Represents page's original translatable fields and related translations. */
export type SaleorGraphql_PageTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'PageTranslatableContent';
  /** List of page content attribute values that can be translated. */
  attributeValues: Array<FieldWrapper<SaleorGraphql_AttributeValueTranslatableContent>>;
  /**
   * Content of the page to translate.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  content?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Content of the page.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `content` field instead.
   */
  contentJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the page translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * A static page that can be manually added by a shop operator through the dashboard.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /**
   * The ID of the page to translate.
   *
   * Added in Saleor 3.14.
   */
  pageId: FieldWrapper<Scalars['ID']['output']>;
  /** SEO description to translate. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title to translate. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Page title to translate. */
  title: FieldWrapper<Scalars['String']['output']>;
  /** Returns translated page fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_PageTranslation>>;
};


/** Represents page's original translatable fields and related translations. */
export type SaleorGraphql_PageTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a page.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_PageTranslate = {
  __typename?: 'PageTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  page?: Maybe<FieldWrapper<SaleorGraphql_PageTranslatableContent>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** Represents page translations. */
export type SaleorGraphql_PageTranslation = SaleorGraphql_Node & {
  __typename?: 'PageTranslation';
  /**
   * Translated content of the page.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  content?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Translated description of the page.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `content` field instead.
   */
  contentJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the page translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated SEO description. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO title. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated page title. */
  title?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the page fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_PageTranslatableContent>>;
};

export type SaleorGraphql_PageTranslationInput = {
  /**
   * Translated page content.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  content?: InputMaybe<Scalars['JSONString']['input']>;
  seoDescription?: InputMaybe<Scalars['String']['input']>;
  seoTitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Represents a type of page. It defines what attributes are available to pages of this type. */
export type SaleorGraphql_PageType = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'PageType';
  /** Page attributes of that page type. */
  attributes?: Maybe<Array<FieldWrapper<SaleorGraphql_Attribute>>>;
  /**
   * Attributes that can be assigned to the page type.
   *
   * Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  availableAttributes?: Maybe<FieldWrapper<SaleorGraphql_AttributeCountableConnection>>;
  /**
   * Whether page type has pages assigned.
   *
   * Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
   */
  hasPages?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** ID of the page type. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the page type. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Slug of the page type. */
  slug: FieldWrapper<Scalars['String']['output']>;
};


/** Represents a type of page. It defines what attributes are available to pages of this type. */
export type SaleorGraphql_PageTypeAvailableAttributesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_AttributeFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SaleorGraphql_AttributeWhereInput>;
};


/** Represents a type of page. It defines what attributes are available to pages of this type. */
export type SaleorGraphql_PageTypeMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a type of page. It defines what attributes are available to pages of this type. */
export type SaleorGraphql_PageTypeMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a type of page. It defines what attributes are available to pages of this type. */
export type SaleorGraphql_PageTypePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a type of page. It defines what attributes are available to pages of this type. */
export type SaleorGraphql_PageTypePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Delete page types.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageTypeBulkDelete = {
  __typename?: 'PageTypeBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

export type SaleorGraphql_PageTypeCountableConnection = {
  __typename?: 'PageTypeCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_PageTypeCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_PageTypeCountableEdge = {
  __typename?: 'PageTypeCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_PageType>;
};

/**
 * Create a new page type.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageTypeCreate = {
  __typename?: 'PageTypeCreate';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
};

export type SaleorGraphql_PageTypeCreateInput = {
  /** List of attribute IDs to be assigned to the page type. */
  addAttributes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Name of the page type. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Page type slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new page type is created.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_PageTypeCreated = SaleorGraphql_Event & {
  __typename?: 'PageTypeCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The page type the event relates to. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Delete a page type.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageTypeDelete = {
  __typename?: 'PageTypeDelete';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
};

/**
 * Event sent when page type is deleted.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_PageTypeDeleted = SaleorGraphql_Event & {
  __typename?: 'PageTypeDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The page type the event relates to. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PageTypeFilterInput = {
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Reorder the attributes of a page type.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageTypeReorderAttributes = {
  __typename?: 'PageTypeReorderAttributes';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** Page type from which attributes are reordered. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
};

export enum SaleorGraphql_PageTypeSortField {
  /** Sort page types by name. */
  Name = 'NAME',
  /** Sort page types by slug. */
  Slug = 'SLUG'
}

export type SaleorGraphql_PageTypeSortingInput = {
  /** Specifies the direction in which to sort page types. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort page types by the selected field. */
  field: SaleorGraphql_PageTypeSortField | '%future added value';
};

/**
 * Update page type.
 *
 * Requires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_PageTypeUpdate = {
  __typename?: 'PageTypeUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
};

export type SaleorGraphql_PageTypeUpdateInput = {
  /** List of attribute IDs to be assigned to the page type. */
  addAttributes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Name of the page type. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** List of attribute IDs to be assigned to the page type. */
  removeAttributes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Page type slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when page type is updated.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_PageTypeUpdated = SaleorGraphql_Event & {
  __typename?: 'PageTypeUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The page type the event relates to. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Updates an existing page.
 *
 * Requires one of the following permissions: MANAGE_PAGES.
 */
export type SaleorGraphql_PageUpdate = {
  __typename?: 'PageUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_PageError>>;
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pageErrors: Array<FieldWrapper<SaleorGraphql_PageError>>;
};

/**
 * Event sent when page is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_PageUpdated = SaleorGraphql_Event & {
  __typename?: 'PageUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The page the event relates to. */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Change the password of the logged in user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 */
export type SaleorGraphql_PasswordChange = {
  __typename?: 'PasswordChange';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance with a new password. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Represents a payment of a given type. */
export type SaleorGraphql_Payment = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Payment';
  /**
   * List of actions that can be performed in the current state of a payment.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  actions: Array<FieldWrapper<SaleorGraphql_OrderAction | '%future added value'>>;
  /**
   * Maximum amount of money that can be captured.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  availableCaptureAmount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /**
   * Maximum amount of money that can be refunded.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  availableRefundAmount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Total amount captured for this payment. */
  capturedAmount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Internal payment status. */
  chargeStatus: FieldWrapper<SaleorGraphql_PaymentChargeStatusEnum | '%future added value'>;
  /** Checkout associated with a payment. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Date and time at which payment was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** The details of the card used for this payment. */
  creditCard?: Maybe<FieldWrapper<SaleorGraphql_CreditCard>>;
  /**
   * IP address of the user who created the payment.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  customerIpAddress?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Payment gateway used for payment. */
  gateway: FieldWrapper<Scalars['String']['output']>;
  /** ID of the payment. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Determines if the payment is active or not. */
  isActive: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Date and time at which payment was modified. */
  modified: FieldWrapper<Scalars['DateTime']['output']>;
  /** Order associated with a payment. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /**
   * Informs whether this is a partial payment.
   *
   * Added in Saleor 3.14.
   */
  partial: FieldWrapper<Scalars['Boolean']['output']>;
  /** Type of method used for payment. */
  paymentMethodType: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * PSP reference of the payment.
   *
   * Added in Saleor 3.14.
   */
  pspReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Unique token associated with a payment. */
  token: FieldWrapper<Scalars['String']['output']>;
  /** Total amount of the payment. */
  total?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /**
   * List of all transactions within this payment.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  transactions?: Maybe<Array<FieldWrapper<SaleorGraphql_Transaction>>>;
};


/** Represents a payment of a given type. */
export type SaleorGraphql_PaymentMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a payment of a given type. */
export type SaleorGraphql_PaymentMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a payment of a given type. */
export type SaleorGraphql_PaymentPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a payment of a given type. */
export type SaleorGraphql_PaymentPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Authorize payment.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentAuthorize = SaleorGraphql_Event & {
  __typename?: 'PaymentAuthorize';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Look up a payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Captures the authorized payment amount.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_PaymentCapture = {
  __typename?: 'PaymentCapture';
  errors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
  /** Updated payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  paymentErrors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
};

/**
 * Capture payment.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentCaptureEvent = SaleorGraphql_Event & {
  __typename?: 'PaymentCaptureEvent';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Look up a payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentChargeStatusEnum {
  Cancelled = 'CANCELLED',
  FullyCharged = 'FULLY_CHARGED',
  FullyRefunded = 'FULLY_REFUNDED',
  NotCharged = 'NOT_CHARGED',
  PartiallyCharged = 'PARTIALLY_CHARGED',
  PartiallyRefunded = 'PARTIALLY_REFUNDED',
  Pending = 'PENDING',
  Refused = 'REFUSED'
}

/** Check payment balance. */
export type SaleorGraphql_PaymentCheckBalance = {
  __typename?: 'PaymentCheckBalance';
  /** Response from the gateway. */
  data?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  paymentErrors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
};

export type SaleorGraphql_PaymentCheckBalanceInput = {
  /** Information about card. */
  card: SaleorGraphql_CardInput;
  /** Slug of a channel for which the data should be returned. */
  channel: Scalars['String']['input'];
  /** An ID of a payment gateway to check. */
  gatewayId: Scalars['String']['input'];
  /** Payment method name. */
  method: Scalars['String']['input'];
};

/**
 * Confirm payment.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentConfirmEvent = SaleorGraphql_Event & {
  __typename?: 'PaymentConfirmEvent';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Look up a payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PaymentCountableConnection = {
  __typename?: 'PaymentCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_PaymentCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_PaymentCountableEdge = {
  __typename?: 'PaymentCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Payment>;
};

export type SaleorGraphql_PaymentError = {
  __typename?: 'PaymentError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PaymentErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of variant IDs which causes the error. */
  variants?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentErrorCode {
  BalanceCheckError = 'BALANCE_CHECK_ERROR',
  BillingAddressNotSet = 'BILLING_ADDRESS_NOT_SET',
  ChannelInactive = 'CHANNEL_INACTIVE',
  CheckoutEmailNotSet = 'CHECKOUT_EMAIL_NOT_SET',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidShippingMethod = 'INVALID_SHIPPING_METHOD',
  NotFound = 'NOT_FOUND',
  NotSupportedGateway = 'NOT_SUPPORTED_GATEWAY',
  NoCheckoutLines = 'NO_CHECKOUT_LINES',
  PartialPaymentNotAllowed = 'PARTIAL_PAYMENT_NOT_ALLOWED',
  PaymentError = 'PAYMENT_ERROR',
  Required = 'REQUIRED',
  ShippingAddressNotSet = 'SHIPPING_ADDRESS_NOT_SET',
  ShippingMethodNotSet = 'SHIPPING_METHOD_NOT_SET',
  UnavailableVariantInChannel = 'UNAVAILABLE_VARIANT_IN_CHANNEL',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_PaymentFilterInput = {
  checkouts?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Filter by ids.
   *
   * Added in Saleor 3.8.
   */
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Available payment gateway backend with configuration necessary to setup client. */
export type SaleorGraphql_PaymentGateway = {
  __typename?: 'PaymentGateway';
  /** Payment gateway client configuration. */
  config: Array<FieldWrapper<SaleorGraphql_GatewayConfigLine>>;
  /** Payment gateway supported currencies. */
  currencies: Array<FieldWrapper<Scalars['String']['output']>>;
  /** Payment gateway ID. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Payment gateway name. */
  name: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_PaymentGatewayConfig = {
  __typename?: 'PaymentGatewayConfig';
  /** The JSON data required to initialize the payment gateway. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_PaymentGatewayConfigError>>>;
  /** The app identifier. */
  id: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_PaymentGatewayConfigError = {
  __typename?: 'PaymentGatewayConfigError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PaymentGatewayConfigErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentGatewayConfigErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Initializes a payment gateway session. It triggers the webhook `PAYMENT_GATEWAY_INITIALIZE_SESSION`, to the requested `paymentGateways`. If `paymentGateways` is not provided, the webhook will be send to all subscribed payment gateways. There is a limit of 100 transaction items per checkout / order.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PaymentGatewayInitialize = {
  __typename?: 'PaymentGatewayInitialize';
  errors: Array<FieldWrapper<SaleorGraphql_PaymentGatewayInitializeError>>;
  /** List of payment gateway configurations. */
  gatewayConfigs?: Maybe<Array<FieldWrapper<SaleorGraphql_PaymentGatewayConfig>>>;
};

export type SaleorGraphql_PaymentGatewayInitializeError = {
  __typename?: 'PaymentGatewayInitializeError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PaymentGatewayInitializeErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentGatewayInitializeErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Event sent when user wants to initialize the payment gateway.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PaymentGatewayInitializeSession = SaleorGraphql_Event & {
  __typename?: 'PaymentGatewayInitializeSession';
  /** Amount requested for initializing the payment gateway. */
  amount?: Maybe<FieldWrapper<Scalars['PositiveDecimal']['output']>>;
  /** Payment gateway data in JSON format, received from storefront. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Checkout or order */
  sourceObject: FieldWrapper<SaleorGraphql_OrderOrCheckout>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Initializes payment gateway for tokenizing payment method session.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - PAYMENT_GATEWAY_INITIALIZE_TOKENIZATION_SESSION (sync): The customer requested to initialize payment gateway for tokenization.
 */
export type SaleorGraphql_PaymentGatewayInitializeTokenization = {
  __typename?: 'PaymentGatewayInitializeTokenization';
  /** A data returned by payment app. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_PaymentGatewayInitializeTokenizationError>>;
  /** A status of the payment gateway initialization. */
  result: FieldWrapper<SaleorGraphql_PaymentGatewayInitializeTokenizationResult | '%future added value'>;
};

export type SaleorGraphql_PaymentGatewayInitializeTokenizationError = {
  __typename?: 'PaymentGatewayInitializeTokenizationError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PaymentGatewayInitializeTokenizationErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentGatewayInitializeTokenizationErrorCode {
  ChannelInactive = 'CHANNEL_INACTIVE',
  GatewayError = 'GATEWAY_ERROR',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Result of initialize payment gateway for tokenization of payment method.
 *
 *     The result of initialize payment gateway for tokenization of payment method.
 *     SUCCESSFULLY_INITIALIZED - The payment gateway was successfully initialized.
 *     FAILED_TO_INITIALIZE - The payment gateway was not initialized.
 *     FAILED_TO_DELIVER - The request to initialize payment gateway was not delivered.
 */
export enum SaleorGraphql_PaymentGatewayInitializeTokenizationResult {
  FailedToDeliver = 'FAILED_TO_DELIVER',
  FailedToInitialize = 'FAILED_TO_INITIALIZE',
  SuccessfullyInitialized = 'SUCCESSFULLY_INITIALIZED'
}

/**
 * Event sent to initialize a new session in payment gateway to store the payment method.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PaymentGatewayInitializeTokenizationSession = SaleorGraphql_Event & {
  __typename?: 'PaymentGatewayInitializeTokenizationSession';
  /** Channel related to the requested action. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Payment gateway data in JSON format, received from storefront. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user related to the requested action. */
  user: FieldWrapper<SaleorGraphql_User>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PaymentGatewayToInitialize = {
  /** The data that will be passed to the payment gateway. */
  data?: InputMaybe<Scalars['JSON']['input']>;
  /** The identifier of the payment gateway app to initialize. */
  id: Scalars['String']['input'];
};

/** Initializes payment process when it is required by gateway. */
export type SaleorGraphql_PaymentInitialize = {
  __typename?: 'PaymentInitialize';
  errors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
  /** Payment that was initialized. */
  initializedPayment?: Maybe<FieldWrapper<SaleorGraphql_PaymentInitialized>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  paymentErrors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
};

/** Server-side data generated by a payment gateway. Optional step when the payment provider requires an additional action to initialize payment session. */
export type SaleorGraphql_PaymentInitialized = {
  __typename?: 'PaymentInitialized';
  /** Initialized data by gateway. */
  data?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** ID of a payment gateway. */
  gateway: FieldWrapper<Scalars['String']['output']>;
  /** Payment gateway name. */
  name: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_PaymentInput = {
  /** Total amount of the transaction, including all taxes and discounts. If no amount is provided, the checkout total will be used. */
  amount?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** A gateway to use with that payment. */
  gateway: Scalars['String']['input'];
  /**
   * User public metadata.
   *
   * Added in Saleor 3.1.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of a storefront view where user should be redirected after requiring additional actions. Payment with additional actions will not be finished if this field is not provided. */
  returnUrl?: InputMaybe<Scalars['String']['input']>;
  /**
   * Payment store type.
   *
   * Added in Saleor 3.1.
   */
  storePaymentMethod?: InputMaybe<SaleorGraphql_StorePaymentMethodEnum | '%future added value'>;
  /** Client-side generated payment token, representing customer's billing data in a secure manner. */
  token?: InputMaybe<Scalars['String']['input']>;
};

/**
 * List payment gateways.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentListGateways = SaleorGraphql_Event & {
  __typename?: 'PaymentListGateways';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Tokenize payment method.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - PAYMENT_METHOD_INITIALIZE_TOKENIZATION_SESSION (sync): The customer requested to tokenize payment method.
 */
export type SaleorGraphql_PaymentMethodInitializeTokenization = {
  __typename?: 'PaymentMethodInitializeTokenization';
  /** A data returned by the payment app. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_PaymentMethodInitializeTokenizationError>>;
  /** The identifier of the payment method. */
  id?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A status of the payment method tokenization. */
  result: FieldWrapper<SaleorGraphql_PaymentMethodTokenizationResult | '%future added value'>;
};

export type SaleorGraphql_PaymentMethodInitializeTokenizationError = {
  __typename?: 'PaymentMethodInitializeTokenizationError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PaymentMethodInitializeTokenizationErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentMethodInitializeTokenizationErrorCode {
  ChannelInactive = 'CHANNEL_INACTIVE',
  GatewayError = 'GATEWAY_ERROR',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Event sent when user requests a tokenization of payment method.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PaymentMethodInitializeTokenizationSession = SaleorGraphql_Event & {
  __typename?: 'PaymentMethodInitializeTokenizationSession';
  /** Channel related to the requested action. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Payment gateway data in JSON format, received from storefront. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The payment flow that the tokenized payment method should support. */
  paymentFlowToSupport: FieldWrapper<SaleorGraphql_TokenizedPaymentFlowEnum | '%future added value'>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user related to the requested action. */
  user: FieldWrapper<SaleorGraphql_User>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Tokenize payment method.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - PAYMENT_METHOD_PROCESS_TOKENIZATION_SESSION (sync): The customer continues payment method tokenization.
 */
export type SaleorGraphql_PaymentMethodProcessTokenization = {
  __typename?: 'PaymentMethodProcessTokenization';
  /** A data returned by the payment app. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_PaymentMethodProcessTokenizationError>>;
  /** The identifier of the payment method. */
  id?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A status of the payment method tokenization. */
  result: FieldWrapper<SaleorGraphql_PaymentMethodTokenizationResult | '%future added value'>;
};

export type SaleorGraphql_PaymentMethodProcessTokenizationError = {
  __typename?: 'PaymentMethodProcessTokenizationError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PaymentMethodProcessTokenizationErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PaymentMethodProcessTokenizationErrorCode {
  ChannelInactive = 'CHANNEL_INACTIVE',
  GatewayError = 'GATEWAY_ERROR',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Event sent when user continues a tokenization of payment method.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PaymentMethodProcessTokenizationSession = SaleorGraphql_Event & {
  __typename?: 'PaymentMethodProcessTokenizationSession';
  /** Channel related to the requested action. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Payment gateway data in JSON format, received from storefront. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** The ID returned by app from `PAYMENT_METHOD_INITIALIZE_TOKENIZATION_SESSION` webhook. */
  id: FieldWrapper<Scalars['String']['output']>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user related to the requested action. */
  user: FieldWrapper<SaleorGraphql_User>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PaymentMethodRequestDeleteError = {
  __typename?: 'PaymentMethodRequestDeleteError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_StoredPaymentMethodRequestDeleteErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Result of tokenization of payment method.
 *
 *     SUCCESSFULLY_TOKENIZED - The payment method was successfully tokenized.
 *     ADDITIONAL_ACTION_REQUIRED - The additional action is required to tokenize payment
 *     method.
 *     PENDING - The payment method is pending tokenization.
 *     FAILED_TO_TOKENIZE - The payment method was not tokenized.
 *     FAILED_TO_DELIVER - The request to tokenize payment method was not delivered.
 */
export enum SaleorGraphql_PaymentMethodTokenizationResult {
  AdditionalActionRequired = 'ADDITIONAL_ACTION_REQUIRED',
  FailedToDeliver = 'FAILED_TO_DELIVER',
  FailedToTokenize = 'FAILED_TO_TOKENIZE',
  Pending = 'PENDING',
  SuccessfullyTokenized = 'SUCCESSFULLY_TOKENIZED'
}

/**
 * Process payment.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentProcessEvent = SaleorGraphql_Event & {
  __typename?: 'PaymentProcessEvent';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Look up a payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Refunds the captured payment amount.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_PaymentRefund = {
  __typename?: 'PaymentRefund';
  errors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
  /** Updated payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  paymentErrors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
};

/**
 * Refund payment.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentRefundEvent = SaleorGraphql_Event & {
  __typename?: 'PaymentRefundEvent';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Look up a payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents the channel-specific payment settings. */
export type SaleorGraphql_PaymentSettings = {
  __typename?: 'PaymentSettings';
  /**
   * Determine the transaction flow strategy to be used. Include the selected option in the payload sent to the payment app, as a requested action for the transaction.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  defaultTransactionFlowStrategy: FieldWrapper<SaleorGraphql_TransactionFlowStrategyEnum | '%future added value'>;
};

export type SaleorGraphql_PaymentSettingsInput = {
  /**
   * Determine the transaction flow strategy to be used. Include the selected option in the payload sent to the payment app, as a requested action for the transaction.
   *
   * Added in Saleor 3.16.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  defaultTransactionFlowStrategy?: InputMaybe<SaleorGraphql_TransactionFlowStrategyEnum | '%future added value'>;
};

/** Represents a payment source stored for user in payment gateway, such as credit card. */
export type SaleorGraphql_PaymentSource = {
  __typename?: 'PaymentSource';
  /** Stored credit card details if available. */
  creditCardInfo?: Maybe<FieldWrapper<SaleorGraphql_CreditCard>>;
  /** Payment gateway name. */
  gateway: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of public metadata items.
   *
   * Added in Saleor 3.1.
   *
   * Can be accessed without permissions.
   */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /** ID of stored payment method. */
  paymentMethodId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Voids the authorized payment.
 *
 * Requires one of the following permissions: MANAGE_ORDERS.
 */
export type SaleorGraphql_PaymentVoid = {
  __typename?: 'PaymentVoid';
  errors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
  /** Updated payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  paymentErrors: Array<FieldWrapper<SaleorGraphql_PaymentError>>;
};

/**
 * Void payment.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PaymentVoidEvent = SaleorGraphql_Event & {
  __typename?: 'PaymentVoidEvent';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Look up a payment. */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents a permission object in a friendly form. */
export type SaleorGraphql_Permission = {
  __typename?: 'Permission';
  /** Internal code for permission. */
  code: FieldWrapper<SaleorGraphql_PermissionEnum | '%future added value'>;
  /** Describe action(s) allowed to do by permission. */
  name: FieldWrapper<Scalars['String']['output']>;
};

/** An enumeration. */
export enum SaleorGraphql_PermissionEnum {
  HandleCheckouts = 'HANDLE_CHECKOUTS',
  HandlePayments = 'HANDLE_PAYMENTS',
  HandleTaxes = 'HANDLE_TAXES',
  ImpersonateUser = 'IMPERSONATE_USER',
  ManageApps = 'MANAGE_APPS',
  ManageChannels = 'MANAGE_CHANNELS',
  ManageCheckouts = 'MANAGE_CHECKOUTS',
  ManageDiscounts = 'MANAGE_DISCOUNTS',
  ManageGiftCard = 'MANAGE_GIFT_CARD',
  ManageMenus = 'MANAGE_MENUS',
  ManageObservability = 'MANAGE_OBSERVABILITY',
  ManageOrders = 'MANAGE_ORDERS',
  ManageOrdersImport = 'MANAGE_ORDERS_IMPORT',
  ManagePages = 'MANAGE_PAGES',
  ManagePageTypesAndAttributes = 'MANAGE_PAGE_TYPES_AND_ATTRIBUTES',
  ManagePlugins = 'MANAGE_PLUGINS',
  ManageProducts = 'MANAGE_PRODUCTS',
  ManageProductTypesAndAttributes = 'MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES',
  ManageSettings = 'MANAGE_SETTINGS',
  ManageShipping = 'MANAGE_SHIPPING',
  ManageStaff = 'MANAGE_STAFF',
  ManageTaxes = 'MANAGE_TAXES',
  ManageTranslations = 'MANAGE_TRANSLATIONS',
  ManageUsers = 'MANAGE_USERS'
}

/**
 * Create new permission group. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - PERMISSION_GROUP_CREATED (async)
 */
export type SaleorGraphql_PermissionGroupCreate = {
  __typename?: 'PermissionGroupCreate';
  errors: Array<FieldWrapper<SaleorGraphql_PermissionGroupError>>;
  group?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  permissionGroupErrors: Array<FieldWrapper<SaleorGraphql_PermissionGroupError>>;
};

export type SaleorGraphql_PermissionGroupCreateInput = {
  /**
   * List of channels to assign to this group.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  addChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of permission code names to assign to this group. */
  addPermissions?: InputMaybe<Array<SaleorGraphql_PermissionEnum | '%future added value'>>;
  /** List of users to assign to this group. */
  addUsers?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Group name. */
  name: Scalars['String']['input'];
  /**
   * Determine if the group has restricted access to channels.  DEFAULT: False
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  restrictedAccessToChannels?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Event sent when new permission group is created.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PermissionGroupCreated = SaleorGraphql_Event & {
  __typename?: 'PermissionGroupCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The permission group the event relates to. */
  permissionGroup?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Delete permission group. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - PERMISSION_GROUP_DELETED (async)
 */
export type SaleorGraphql_PermissionGroupDelete = {
  __typename?: 'PermissionGroupDelete';
  errors: Array<FieldWrapper<SaleorGraphql_PermissionGroupError>>;
  group?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  permissionGroupErrors: Array<FieldWrapper<SaleorGraphql_PermissionGroupError>>;
};

/**
 * Event sent when permission group is deleted.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PermissionGroupDeleted = SaleorGraphql_Event & {
  __typename?: 'PermissionGroupDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The permission group the event relates to. */
  permissionGroup?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PermissionGroupError = {
  __typename?: 'PermissionGroupError';
  /** List of chnnels IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PermissionGroupErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of permissions which causes the error. */
  permissions?: Maybe<Array<FieldWrapper<SaleorGraphql_PermissionEnum | '%future added value'>>>;
  /** List of user IDs which causes the error. */
  users?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_PermissionGroupErrorCode {
  AssignNonStaffMember = 'ASSIGN_NON_STAFF_MEMBER',
  CannotRemoveFromLastGroup = 'CANNOT_REMOVE_FROM_LAST_GROUP',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  LeftNotManageablePermission = 'LEFT_NOT_MANAGEABLE_PERMISSION',
  OutOfScopeChannel = 'OUT_OF_SCOPE_CHANNEL',
  OutOfScopePermission = 'OUT_OF_SCOPE_PERMISSION',
  OutOfScopeUser = 'OUT_OF_SCOPE_USER',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_PermissionGroupFilterInput = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
};

/** Sorting options for permission groups. */
export enum SaleorGraphql_PermissionGroupSortField {
  /** Sort permission group accounts by name. */
  Name = 'NAME'
}

export type SaleorGraphql_PermissionGroupSortingInput = {
  /** Specifies the direction in which to sort permission group. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort permission group by the selected field. */
  field: SaleorGraphql_PermissionGroupSortField | '%future added value';
};

/**
 * Update permission group. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - PERMISSION_GROUP_UPDATED (async)
 */
export type SaleorGraphql_PermissionGroupUpdate = {
  __typename?: 'PermissionGroupUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_PermissionGroupError>>;
  group?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  permissionGroupErrors: Array<FieldWrapper<SaleorGraphql_PermissionGroupError>>;
};

export type SaleorGraphql_PermissionGroupUpdateInput = {
  /**
   * List of channels to assign to this group.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  addChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of permission code names to assign to this group. */
  addPermissions?: InputMaybe<Array<SaleorGraphql_PermissionEnum | '%future added value'>>;
  /** List of users to assign to this group. */
  addUsers?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Group name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * List of channels to unassign from this group.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of permission code names to unassign from this group. */
  removePermissions?: InputMaybe<Array<SaleorGraphql_PermissionEnum | '%future added value'>>;
  /** List of users to unassign from this group. */
  removeUsers?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Determine if the group has restricted access to channels.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  restrictedAccessToChannels?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Event sent when permission group is updated.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_PermissionGroupUpdated = SaleorGraphql_Event & {
  __typename?: 'PermissionGroupUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The permission group the event relates to. */
  permissionGroup?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Plugin. */
export type SaleorGraphql_Plugin = {
  __typename?: 'Plugin';
  /** Channel-specific plugin configuration. */
  channelConfigurations: Array<FieldWrapper<SaleorGraphql_PluginConfiguration>>;
  /** Description of the plugin. */
  description: FieldWrapper<Scalars['String']['output']>;
  /** Global configuration of the plugin (not channel-specific). */
  globalConfiguration?: Maybe<FieldWrapper<SaleorGraphql_PluginConfiguration>>;
  /** Identifier of the plugin. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the plugin. */
  name: FieldWrapper<Scalars['String']['output']>;
};

/** Stores information about a configuration of plugin. */
export type SaleorGraphql_PluginConfiguration = {
  __typename?: 'PluginConfiguration';
  /** Determines if plugin is active or not. */
  active: FieldWrapper<Scalars['Boolean']['output']>;
  /** The channel to which the plugin configuration is assigned to. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Configuration of the plugin. */
  configuration?: Maybe<Array<FieldWrapper<SaleorGraphql_ConfigurationItem>>>;
};

export enum SaleorGraphql_PluginConfigurationType {
  Global = 'GLOBAL',
  PerChannel = 'PER_CHANNEL'
}

export type SaleorGraphql_PluginCountableConnection = {
  __typename?: 'PluginCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_PluginCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_PluginCountableEdge = {
  __typename?: 'PluginCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Plugin>;
};

export type SaleorGraphql_PluginError = {
  __typename?: 'PluginError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PluginErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PluginErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  PluginMisconfigured = 'PLUGIN_MISCONFIGURED',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_PluginFilterInput = {
  search?: InputMaybe<Scalars['String']['input']>;
  statusInChannels?: InputMaybe<SaleorGraphql_PluginStatusInChannelsInput>;
  type?: InputMaybe<SaleorGraphql_PluginConfigurationType | '%future added value'>;
};

export enum SaleorGraphql_PluginSortField {
  IsActive = 'IS_ACTIVE',
  Name = 'NAME'
}

export type SaleorGraphql_PluginSortingInput = {
  /** Specifies the direction in which to sort plugins. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort plugins by the selected field. */
  field: SaleorGraphql_PluginSortField | '%future added value';
};

export type SaleorGraphql_PluginStatusInChannelsInput = {
  active: Scalars['Boolean']['input'];
  channels: Array<Scalars['ID']['input']>;
};

/**
 * Update plugin configuration.
 *
 * Requires one of the following permissions: MANAGE_PLUGINS.
 */
export type SaleorGraphql_PluginUpdate = {
  __typename?: 'PluginUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_PluginError>>;
  plugin?: Maybe<FieldWrapper<SaleorGraphql_Plugin>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  pluginsErrors: Array<FieldWrapper<SaleorGraphql_PluginError>>;
};

export type SaleorGraphql_PluginUpdateInput = {
  /** Indicates whether the plugin should be enabled. */
  active?: InputMaybe<Scalars['Boolean']['input']>;
  /** Configuration of the plugin. */
  configuration?: InputMaybe<Array<SaleorGraphql_ConfigurationItemInput>>;
};

/** An enumeration. */
export enum SaleorGraphql_PostalCodeRuleInclusionTypeEnum {
  Exclude = 'EXCLUDE',
  Include = 'INCLUDE'
}

/** Represents preorder settings for product variant. */
export type SaleorGraphql_PreorderData = {
  __typename?: 'PreorderData';
  /** Preorder end date. */
  endDate?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * Total number of sold product variant during preorder.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  globalSoldUnits: FieldWrapper<Scalars['Int']['output']>;
  /**
   * The global preorder threshold for product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  globalThreshold?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_PreorderSettingsInput = {
  /** The end date for preorder. */
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** The global threshold for preorder variant. */
  globalThreshold?: InputMaybe<Scalars['Int']['input']>;
};

/** Represents preorder variant data for channel. */
export type SaleorGraphql_PreorderThreshold = {
  __typename?: 'PreorderThreshold';
  /** Preorder threshold for product variant in this channel. */
  quantity?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Number of sold product variant in this channel. */
  soldUnits: FieldWrapper<Scalars['Int']['output']>;
};

export type SaleorGraphql_PriceInput = {
  /** Amount of money. */
  amount: Scalars['PositiveDecimal']['input'];
  /** Currency code. */
  currency: Scalars['String']['input'];
};

export type SaleorGraphql_PriceRangeInput = {
  /** Price greater than or equal to. */
  gte?: InputMaybe<Scalars['Float']['input']>;
  /** Price less than or equal to. */
  lte?: InputMaybe<Scalars['Float']['input']>;
};

/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_Product = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Product';
  /**
   * Get a single attribute attached to product by attribute slug.
   *
   * Added in Saleor 3.9.
   */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_SelectedAttribute>>;
  /** List of attributes assigned to this product. */
  attributes: Array<FieldWrapper<SaleorGraphql_SelectedAttribute>>;
  /**
   * Date when product is available for purchase.
   * @deprecated This field will be removed in Saleor 4.0. Use the `availableForPurchaseAt` field to fetch the available for purchase date.
   */
  availableForPurchase?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /** Date when product is available for purchase. */
  availableForPurchaseAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Channel given to retrieve this product. Also used by federation gateway to resolve this object in a federated query. */
  channel?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of availability in channels for the product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  channelListings?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductChannelListing>>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `Channel.taxConfiguration` field to determine whether tax collection is enabled. */
  chargeTaxes: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of collections for the product. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  collections?: Maybe<Array<FieldWrapper<SaleorGraphql_Collection>>>;
  /** The date and time when the product was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** Default variant of the product. */
  defaultVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /**
   * Description of the product.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Description of the product.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * External ID of this product.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the product. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Get a single product image by ID.
   * @deprecated This field will be removed in Saleor 4.0. Use the `mediaById` field instead.
   */
  imageById?: Maybe<FieldWrapper<SaleorGraphql_ProductImage>>;
  /**
   * List of images for the product.
   * @deprecated This field will be removed in Saleor 4.0. Use the `media` field instead.
   */
  images?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductImage>>>;
  /** Whether the product is in stock, set as available for purchase in the given channel, and published. */
  isAvailable?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Refers to a state that can be set by admins to control whether a product is available for purchase in storefronts. This does not guarantee the availability of stock. When set to `False`, this product is still visible to customers, but it cannot be purchased. */
  isAvailableForPurchase?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** List of media for the product. */
  media?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductMedia>>>;
  /** Get a single product media by ID. */
  mediaById?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** SEO description of the product. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Lists the storefront product's pricing, the current price and discounts, only meant for displaying. */
  pricing?: Maybe<FieldWrapper<SaleorGraphql_ProductPricingInfo>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Type of the product. */
  productType: FieldWrapper<SaleorGraphql_ProductType>;
  /** Rating of the product. */
  rating?: Maybe<FieldWrapper<Scalars['Float']['output']>>;
  /** SEO description of the product. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title of the product. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Slug of the product. */
  slug: FieldWrapper<Scalars['String']['output']>;
  /**
   * Tax class assigned to this product type. All products of this product type use this tax class, unless it's overridden in the `Product` type.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
  /**
   * A type of tax. Assigned by enabled tax gateway
   * @deprecated This field will be removed in Saleor 4.0. Use `taxClass` field instead.
   */
  taxType?: Maybe<FieldWrapper<SaleorGraphql_TaxType>>;
  /** Thumbnail of the product. */
  thumbnail?: Maybe<FieldWrapper<SaleorGraphql_Image>>;
  /** Returns translated product fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ProductTranslation>>;
  /** The date and time when the product was last updated. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * Get a single variant by SKU or ID.
   *
   * Added in Saleor 3.9.
   * @deprecated This field will be removed in Saleor 4.0. Use top-level `variant` query.
   */
  variant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** List of variants for the product. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  variants?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductVariant>>>;
  /** Weight of the product. */
  weight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductAttributeArgs = {
  slug: Scalars['String']['input'];
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductImageByIdArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductIsAvailableArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductMediaArgs = {
  sortBy?: InputMaybe<SaleorGraphql_MediaSortingInput>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductMediaByIdArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductPricingArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductThumbnailArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


/** Represents an individual item for sale in the storefront. */
export type SaleorGraphql_ProductVariantArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Assign attributes to a given product type.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductAttributeAssign = {
  __typename?: 'ProductAttributeAssign';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** The updated product type. */
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

export type SaleorGraphql_ProductAttributeAssignInput = {
  /** The ID of the attribute to assign. */
  id: Scalars['ID']['input'];
  /** The attribute type to be assigned as. */
  type: SaleorGraphql_ProductAttributeType | '%future added value';
  /**
   * Whether attribute is allowed in variant selection. Allowed types are: ['dropdown', 'boolean', 'swatch', 'numeric'].
   *
   * Added in Saleor 3.1.
   */
  variantSelection?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Update attributes assigned to product variant for given product type.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductAttributeAssignmentUpdate = {
  __typename?: 'ProductAttributeAssignmentUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** The updated product type. */
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

export type SaleorGraphql_ProductAttributeAssignmentUpdateInput = {
  /** The ID of the attribute to assign. */
  id: Scalars['ID']['input'];
  /**
   * Whether attribute is allowed in variant selection. Allowed types are: ['dropdown', 'boolean', 'swatch', 'numeric'].
   *
   * Added in Saleor 3.1.
   */
  variantSelection: Scalars['Boolean']['input'];
};

export enum SaleorGraphql_ProductAttributeType {
  Product = 'PRODUCT',
  Variant = 'VARIANT'
}

/**
 * Un-assign attributes from a given product type.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductAttributeUnassign = {
  __typename?: 'ProductAttributeUnassign';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** The updated product type. */
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

/**
 * Creates products.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductBulkCreate = {
  __typename?: 'ProductBulkCreate';
  /** Returns how many objects were created. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductBulkCreateError>>;
  /** List of the created products. */
  results: Array<FieldWrapper<SaleorGraphql_ProductBulkResult>>;
};

export type SaleorGraphql_ProductBulkCreateError = {
  __typename?: 'ProductBulkCreateError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of channel IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductBulkCreateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of warehouse IDs which causes the error. */
  warehouses?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductBulkCreateErrorCode {
  AttributeAlreadyAssigned = 'ATTRIBUTE_ALREADY_ASSIGNED',
  AttributeCannotBeAssigned = 'ATTRIBUTE_CANNOT_BE_ASSIGNED',
  AttributeVariantsDisabled = 'ATTRIBUTE_VARIANTS_DISABLED',
  Blank = 'BLANK',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidPrice = 'INVALID_PRICE',
  MaxLength = 'MAX_LENGTH',
  NotFound = 'NOT_FOUND',
  ProductNotAssignedToChannel = 'PRODUCT_NOT_ASSIGNED_TO_CHANNEL',
  ProductWithoutCategory = 'PRODUCT_WITHOUT_CATEGORY',
  Required = 'REQUIRED',
  Unique = 'UNIQUE',
  UnsupportedMediaProvider = 'UNSUPPORTED_MEDIA_PROVIDER'
}

export type SaleorGraphql_ProductBulkCreateInput = {
  /** List of attributes. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeValueInput>>;
  /** ID of the product's category. */
  category?: InputMaybe<Scalars['ID']['input']>;
  /** List of channels in which the product is available. */
  channelListings?: InputMaybe<Array<SaleorGraphql_ProductChannelListingCreateInput>>;
  /**
   * Determine if taxes are being charged for the product.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `Channel.taxConfiguration` to configure whether tax collection is enabled.
   */
  chargeTaxes?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of IDs of collections that the product belongs to. */
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Product description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /** External ID of this product. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** List of media inputs associated with the product. */
  media?: InputMaybe<Array<SaleorGraphql_MediaInput>>;
  /** Fields required to update the product metadata. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Product name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Fields required to update the product private metadata. */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** ID of the type that product belongs to. */
  productType: Scalars['ID']['input'];
  /** Defines the product rating value. */
  rating?: InputMaybe<Scalars['Float']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Product slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** ID of a tax class to assign to this product. If not provided, product will use the tax class which is assigned to the product type. */
  taxClass?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Tax rate for enabled tax gateway.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use tax classes to control the tax calculation for a product. If taxCode is provided, Saleor will try to find a tax class with given code (codes are stored in metadata) and assign it. If no tax class is found, it would be created and assigned.
   */
  taxCode?: InputMaybe<Scalars['String']['input']>;
  /** Input list of product variants to create. */
  variants?: InputMaybe<Array<SaleorGraphql_ProductVariantBulkCreateInput>>;
  /** Weight of the Product. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/**
 * Deletes products.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductBulkDelete = {
  __typename?: 'ProductBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_ProductBulkResult = {
  __typename?: 'ProductBulkResult';
  /** List of errors occurred on create attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductBulkCreateError>>>;
  /** Product data. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
};

/**
 * Creates/updates translations for products.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 *
 * Triggers the following webhook events:
 * - TRANSLATION_CREATED (async): Called when a translation was created.
 * - TRANSLATION_UPDATED (async): Called when a translation was updated.
 */
export type SaleorGraphql_ProductBulkTranslate = {
  __typename?: 'ProductBulkTranslate';
  /** Returns how many translations were created/updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductBulkTranslateError>>;
  /** List of the translations. */
  results: Array<FieldWrapper<SaleorGraphql_ProductBulkTranslateResult>>;
};

export type SaleorGraphql_ProductBulkTranslateError = {
  __typename?: 'ProductBulkTranslateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductTranslateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_ProductBulkTranslateInput = {
  /** External reference of an product. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Product ID. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** Translation language code. */
  languageCode: SaleorGraphql_LanguageCodeEnum | '%future added value';
  /** Translation fields. */
  translationFields: SaleorGraphql_TranslationInput;
};

export type SaleorGraphql_ProductBulkTranslateResult = {
  __typename?: 'ProductBulkTranslateResult';
  /** List of errors occurred on translation attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductBulkTranslateError>>>;
  /** Product translation data. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ProductTranslation>>;
};

/** Represents product channel listing. */
export type SaleorGraphql_ProductChannelListing = SaleorGraphql_Node & {
  __typename?: 'ProductChannelListing';
  /** @deprecated This field will be removed in Saleor 4.0. Use the `availableForPurchaseAt` field to fetch the available for purchase date. */
  availableForPurchase?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /**
   * The product available for purchase date time.
   *
   * Added in Saleor 3.3.
   */
  availableForPurchaseAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The channel in which the product is listed. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** The price of the cheapest variant (including discounts). */
  discountedPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** The ID of the product channel listing. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Refers to a state that can be set by admins to control whether a product is available for purchase in storefronts in this channel. This does not guarantee the availability of stock. When set to `False`, this product is still visible to customers, but it cannot be purchased. */
  isAvailableForPurchase?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Indicates if the product is published in the channel. */
  isPublished: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Range of margin percentage value.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  margin?: Maybe<FieldWrapper<SaleorGraphql_Margin>>;
  /** Lists the storefront product's pricing, the current price and discounts, only meant for displaying. */
  pricing?: Maybe<FieldWrapper<SaleorGraphql_ProductPricingInfo>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use the `publishedAt` field to fetch the publication date. */
  publicationDate?: Maybe<FieldWrapper<Scalars['Date']['output']>>;
  /**
   * The product publication date time.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /**
   * Purchase cost of product.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  purchaseCost?: Maybe<FieldWrapper<SaleorGraphql_MoneyRange>>;
  /** Indicates product visibility in the channel listings. */
  visibleInListings: FieldWrapper<Scalars['Boolean']['output']>;
};


/** Represents product channel listing. */
export type SaleorGraphql_ProductChannelListingPricingArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
};

export type SaleorGraphql_ProductChannelListingAddInput = {
  /** List of variants to which the channel should be assigned. */
  addVariants?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * A start date time from which a product will be available for purchase. When not set and `isAvailable` is set to True, the current day is assumed.
   *
   * Added in Saleor 3.3.
   */
  availableForPurchaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  /**
   * A start date from which a product will be available for purchase. When not set and isAvailable is set to True, the current day is assumed.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `availableForPurchaseAt` field instead.
   */
  availableForPurchaseDate?: InputMaybe<Scalars['Date']['input']>;
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** Determines if product should be available for purchase in this channel. This does not guarantee the availability of stock. When set to `False`, this product is still visible to customers, but it cannot be purchased. */
  isAvailableForPurchase?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines if object is visible to customers. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Publication date. ISO 8601 standard.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
   */
  publicationDate?: InputMaybe<Scalars['Date']['input']>;
  /**
   * Publication date time. ISO 8601 standard.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** List of variants from which the channel should be unassigned. */
  removeVariants?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Determines if product is visible in product listings (doesn't apply to product collections). */
  visibleInListings?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_ProductChannelListingCreateInput = {
  /** A start date time from which a product will be available for purchase. When not set and `isAvailable` is set to True, the current day is assumed. */
  availableForPurchaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** Determines if product should be available for purchase in this channel. This does not guarantee the availability of stock. When set to `False`, this product is still visible to customers, but it cannot be purchased. */
  isAvailableForPurchase?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines if object is visible to customers. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /** Publication date time. ISO 8601 standard. */
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** Determines if product is visible in product listings (doesn't apply to product collections). */
  visibleInListings?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SaleorGraphql_ProductChannelListingError = {
  __typename?: 'ProductChannelListingError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of channels IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of variants IDs which causes the error. */
  variants?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/**
 * Manage product's availability in channels.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductChannelListingUpdate = {
  __typename?: 'ProductChannelListingUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductChannelListingError>>;
  /** An updated product instance. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productChannelListingErrors: Array<FieldWrapper<SaleorGraphql_ProductChannelListingError>>;
};

export type SaleorGraphql_ProductChannelListingUpdateInput = {
  /** List of channels from which the product should be unassigned. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of channels to which the product should be assigned or updated. */
  updateChannels?: InputMaybe<Array<SaleorGraphql_ProductChannelListingAddInput>>;
};

export type SaleorGraphql_ProductCountableConnection = {
  __typename?: 'ProductCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_ProductCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_ProductCountableEdge = {
  __typename?: 'ProductCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Product>;
};

/**
 * Creates a new product.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductCreate = {
  __typename?: 'ProductCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_ProductCreateInput = {
  /** List of attributes. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeValueInput>>;
  /** ID of the product's category. */
  category?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Determine if taxes are being charged for the product.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `Channel.taxConfiguration` to configure whether tax collection is enabled.
   */
  chargeTaxes?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of IDs of collections that the product belongs to. */
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Product description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * External ID of this product.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Product name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** ID of the type that product belongs to. */
  productType: Scalars['ID']['input'];
  /** Defines the product rating value. */
  rating?: InputMaybe<Scalars['Float']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Product slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** ID of a tax class to assign to this product. If not provided, product will use the tax class which is assigned to the product type. */
  taxClass?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Tax rate for enabled tax gateway.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use tax classes to control the tax calculation for a product. If taxCode is provided, Saleor will try to find a tax class with given code (codes are stored in metadata) and assign it. If no tax class is found, it would be created and assigned.
   */
  taxCode?: InputMaybe<Scalars['String']['input']>;
  /** Weight of the Product. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/**
 * Event sent when new product is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductCreated = SaleorGraphql_Event & {
  __typename?: 'ProductCreated';
  /** The category of the product. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product the event relates to. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new product is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductCreatedProductArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a product.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductDelete = {
  __typename?: 'ProductDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Event sent when product is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductDeleted = SaleorGraphql_Event & {
  __typename?: 'ProductDeleted';
  /** The category of the product. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product the event relates to. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when product is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductDeletedProductArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_ProductError = {
  __typename?: 'ProductError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  AttributeAlreadyAssigned = 'ATTRIBUTE_ALREADY_ASSIGNED',
  AttributeCannotBeAssigned = 'ATTRIBUTE_CANNOT_BE_ASSIGNED',
  AttributeVariantsDisabled = 'ATTRIBUTE_VARIANTS_DISABLED',
  CannotManageProductWithoutVariant = 'CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidPrice = 'INVALID_PRICE',
  MediaAlreadyAssigned = 'MEDIA_ALREADY_ASSIGNED',
  NotFound = 'NOT_FOUND',
  NotProductsImage = 'NOT_PRODUCTS_IMAGE',
  NotProductsVariant = 'NOT_PRODUCTS_VARIANT',
  PreorderVariantCannotBeDeactivated = 'PREORDER_VARIANT_CANNOT_BE_DEACTIVATED',
  ProductNotAssignedToChannel = 'PRODUCT_NOT_ASSIGNED_TO_CHANNEL',
  ProductWithoutCategory = 'PRODUCT_WITHOUT_CATEGORY',
  Required = 'REQUIRED',
  Unique = 'UNIQUE',
  UnsupportedMediaProvider = 'UNSUPPORTED_MEDIA_PROVIDER',
  VariantNoDigitalContent = 'VARIANT_NO_DIGITAL_CONTENT'
}

/**
 * Event sent when product export is completed.
 *
 * Added in Saleor 3.16.
 */
export type SaleorGraphql_ProductExportCompleted = SaleorGraphql_Event & {
  __typename?: 'ProductExportCompleted';
  /** The export file for products. */
  export?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export enum SaleorGraphql_ProductFieldEnum {
  Category = 'CATEGORY',
  ChargeTaxes = 'CHARGE_TAXES',
  Collections = 'COLLECTIONS',
  Description = 'DESCRIPTION',
  Name = 'NAME',
  ProductMedia = 'PRODUCT_MEDIA',
  ProductType = 'PRODUCT_TYPE',
  ProductWeight = 'PRODUCT_WEIGHT',
  VariantId = 'VARIANT_ID',
  VariantMedia = 'VARIANT_MEDIA',
  VariantSku = 'VARIANT_SKU',
  VariantWeight = 'VARIANT_WEIGHT'
}

export type SaleorGraphql_ProductFilterInput = {
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeInput>>;
  /**
   * Filter by the date of availability for purchase.
   *
   * Added in Saleor 3.8.
   */
  availableFrom?: InputMaybe<Scalars['DateTime']['input']>;
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Specifies the channel by which the data should be filtered.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Filter on whether product is a gift card or not. */
  giftCard?: InputMaybe<Scalars['Boolean']['input']>;
  hasCategory?: InputMaybe<Scalars['Boolean']['input']>;
  hasPreorderedVariants?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Filter by availability for purchase.
   *
   * Added in Saleor 3.8.
   */
  isAvailable?: InputMaybe<Scalars['Boolean']['input']>;
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Filter by visibility in product listings.
   *
   * Added in Saleor 3.8.
   */
  isVisibleInListing?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  /** Filter by the lowest variant price after discounts. */
  minimalPrice?: InputMaybe<SaleorGraphql_PriceRangeInput>;
  price?: InputMaybe<SaleorGraphql_PriceRangeInput>;
  productTypes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Filter by the publication date.
   *
   * Added in Saleor 3.8.
   */
  publishedFrom?: InputMaybe<Scalars['DateTime']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Filter by variants having specific stock status. */
  stockAvailability?: InputMaybe<SaleorGraphql_StockAvailability | '%future added value'>;
  stocks?: InputMaybe<SaleorGraphql_ProductStockFilterInput>;
  /** Filter by when was the most recent update. */
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

/** Represents a product image. */
export type SaleorGraphql_ProductImage = {
  __typename?: 'ProductImage';
  /** The alt text of the image. */
  alt?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the image. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged. */
  sortOrder?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The URL of the image. */
  url: FieldWrapper<Scalars['String']['output']>;
};


/** Represents a product image. */
export type SaleorGraphql_ProductImageUrlArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

export type SaleorGraphql_ProductInput = {
  /** List of attributes. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeValueInput>>;
  /** ID of the product's category. */
  category?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Determine if taxes are being charged for the product.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `Channel.taxConfiguration` to configure whether tax collection is enabled.
   */
  chargeTaxes?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of IDs of collections that the product belongs to. */
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Product description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * External ID of this product.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Product name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Defines the product rating value. */
  rating?: InputMaybe<Scalars['Float']['input']>;
  /** Search engine optimization fields. */
  seo?: InputMaybe<SaleorGraphql_SeoInput>;
  /** Product slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** ID of a tax class to assign to this product. If not provided, product will use the tax class which is assigned to the product type. */
  taxClass?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Tax rate for enabled tax gateway.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use tax classes to control the tax calculation for a product. If taxCode is provided, Saleor will try to find a tax class with given code (codes are stored in metadata) and assign it. If no tax class is found, it would be created and assigned.
   */
  taxCode?: InputMaybe<Scalars['String']['input']>;
  /** Weight of the Product. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/** Represents a product media. */
export type SaleorGraphql_ProductMedia = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'ProductMedia';
  /** The alt text of the media. */
  alt: FieldWrapper<Scalars['String']['output']>;
  /** The unique ID of the product media. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * List of public metadata items. Can be accessed without permissions.
   *
   * Added in Saleor 3.12.
   */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.12.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.12.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The oEmbed data of the media. */
  oembedData: FieldWrapper<Scalars['JSONString']['output']>;
  /**
   * List of private metadata items. Requires staff permissions to access.
   *
   * Added in Saleor 3.12.
   */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.12.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.12.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Product id the media refers to.
   *
   * Added in Saleor 3.12.
   */
  productId?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /** The sort order of the media. */
  sortOrder?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The type of the media. */
  type: FieldWrapper<SaleorGraphql_ProductMediaType | '%future added value'>;
  /** The URL of the media. */
  url: FieldWrapper<Scalars['String']['output']>;
};


/** Represents a product media. */
export type SaleorGraphql_ProductMediaMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a product media. */
export type SaleorGraphql_ProductMediaMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a product media. */
export type SaleorGraphql_ProductMediaPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a product media. */
export type SaleorGraphql_ProductMediaPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a product media. */
export type SaleorGraphql_ProductMediaUrlArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Deletes product media.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductMediaBulkDelete = {
  __typename?: 'ProductMediaBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Create a media object (image or video URL) associated with product. For image, this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductMediaCreate = {
  __typename?: 'ProductMediaCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  media?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_ProductMediaCreateInput = {
  /** Alt text for a product media. */
  alt?: InputMaybe<Scalars['String']['input']>;
  /** Represents an image file in a multipart request. */
  image?: InputMaybe<Scalars['Upload']['input']>;
  /** Represents an URL to an external media. */
  mediaUrl?: InputMaybe<Scalars['String']['input']>;
  /** ID of an product. */
  product: Scalars['ID']['input'];
};

/**
 * Event sent when new product media is created.
 *
 * Added in Saleor 3.12.
 */
export type SaleorGraphql_ProductMediaCreated = SaleorGraphql_Event & {
  __typename?: 'ProductMediaCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product media the event relates to. */
  productMedia?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a product media.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductMediaDelete = {
  __typename?: 'ProductMediaDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  media?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Event sent when product media is deleted.
 *
 * Added in Saleor 3.12.
 */
export type SaleorGraphql_ProductMediaDeleted = SaleorGraphql_Event & {
  __typename?: 'ProductMediaDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product media the event relates to. */
  productMedia?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Changes ordering of the product media.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductMediaReorder = {
  __typename?: 'ProductMediaReorder';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  media?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductMedia>>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductMediaType {
  Image = 'IMAGE',
  Video = 'VIDEO'
}

/**
 * Updates a product media.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductMediaUpdate = {
  __typename?: 'ProductMediaUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  media?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_ProductMediaUpdateInput = {
  /** Alt text for a product media. */
  alt?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when product media is updated.
 *
 * Added in Saleor 3.12.
 */
export type SaleorGraphql_ProductMediaUpdated = SaleorGraphql_Event & {
  __typename?: 'ProductMediaUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product media the event relates to. */
  productMedia?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when product metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_ProductMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'ProductMetadataUpdated';
  /** The category of the product. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product the event relates to. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when product metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_ProductMetadataUpdatedProductArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_ProductOrder = {
  /**
   * Sort product by the selected attribute's values.
   * Note: this doesn't take translations into account yet.
   */
  attributeId?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Specifies the channel in which to sort the data.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** Specifies the direction in which to sort products. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort products by the selected field. */
  field?: InputMaybe<SaleorGraphql_ProductOrderField | '%future added value'>;
};

export enum SaleorGraphql_ProductOrderField {
  /**
   * Sort products by collection. Note: This option is available only for the `Collection.products` query.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  Collection = 'COLLECTION',
  /**
   * Sort products by creation date.
   *
   * Added in Saleor 3.8.
   */
  CreatedAt = 'CREATED_AT',
  /** Sort products by update date. */
  Date = 'DATE',
  /** Sort products by update date. */
  LastModified = 'LAST_MODIFIED',
  /** Sort products by update date. */
  LastModifiedAt = 'LAST_MODIFIED_AT',
  /**
   * Sort products by a minimal price of a product's variant.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  MinimalPrice = 'MINIMAL_PRICE',
  /** Sort products by name. */
  Name = 'NAME',
  /**
   * Sort products by price.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  Price = 'PRICE',
  /**
   * Sort products by publication date.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  PublicationDate = 'PUBLICATION_DATE',
  /**
   * Sort products by publication status.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  Published = 'PUBLISHED',
  /**
   * Sort products by publication date.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  PublishedAt = 'PUBLISHED_AT',
  /** Sort products by rank. Note: This option is available only with the `search` filter. */
  Rank = 'RANK',
  /** Sort products by rating. */
  Rating = 'RATING',
  /** Sort products by type. */
  Type = 'TYPE'
}

/** Represents availability of a product in the storefront. */
export type SaleorGraphql_ProductPricingInfo = {
  __typename?: 'ProductPricingInfo';
  /** The discount amount if in sale (null otherwise). */
  discount?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /**
   * The discount amount in the local currency.
   * @deprecated This field will be removed in Saleor 4.0. Always returns `null`.
   */
  discountLocalCurrency?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /**
   * Determines whether displayed prices should include taxes.
   *
   * Added in Saleor 3.9.
   */
  displayGrossPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /** Whether it is in sale or not. */
  onSale?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** The discounted price range of the product variants. */
  priceRange?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoneyRange>>;
  /**
   * The discounted price range of the product variants in the local currency.
   * @deprecated This field will be removed in Saleor 4.0. Always returns `null`.
   */
  priceRangeLocalCurrency?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoneyRange>>;
  /** The undiscounted price range of the product variants. */
  priceRangeUndiscounted?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoneyRange>>;
};

/**
 * Reorder product attribute values.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductReorderAttributeValues = {
  __typename?: 'ProductReorderAttributeValues';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** Product from which attribute values are reordered. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_ProductStockFilterInput = {
  quantity?: InputMaybe<SaleorGraphql_IntRangeInput>;
  warehouseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Represents product's original translatable fields and related translations. */
export type SaleorGraphql_ProductTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'ProductTranslatableContent';
  /** List of product attribute values that can be translated. */
  attributeValues: Array<FieldWrapper<SaleorGraphql_AttributeValueTranslatableContent>>;
  /**
   * Product's description to translate.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Description of the product.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the product translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Product's name to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Represents an individual item for sale in the storefront.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /**
   * The ID of the product to translate.
   *
   * Added in Saleor 3.14.
   */
  productId: FieldWrapper<Scalars['ID']['output']>;
  /** SEO description to translate. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** SEO title to translate. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Returns translated product fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ProductTranslation>>;
};


/** Represents product's original translatable fields and related translations. */
export type SaleorGraphql_ProductTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a product.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_ProductTranslate = {
  __typename?: 'ProductTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductTranslateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

/** Represents product translations. */
export type SaleorGraphql_ProductTranslation = SaleorGraphql_Node & {
  __typename?: 'ProductTranslation';
  /**
   * Translated description of the product.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * Translated description of the product.
   *
   * Rich text format. For reference see https://editorjs.io/
   * @deprecated This field will be removed in Saleor 4.0. Use the `description` field instead.
   */
  descriptionJson?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the product translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated product name. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO description. */
  seoDescription?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Translated SEO title. */
  seoTitle?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the product fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_ProductTranslatableContent>>;
};

/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductType = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'ProductType';
  /**
   * Variant attributes of that product type with attached variant selection.
   *
   * Added in Saleor 3.1.
   */
  assignedVariantAttributes?: Maybe<Array<FieldWrapper<SaleorGraphql_AssignedVariantAttribute>>>;
  /**
   * List of attributes which can be assigned to this product type.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  availableAttributes?: Maybe<FieldWrapper<SaleorGraphql_AttributeCountableConnection>>;
  /** Whether the product type has variants. */
  hasVariants: FieldWrapper<Scalars['Boolean']['output']>;
  /** The ID of the product type. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Whether the product type is digital. */
  isDigital: FieldWrapper<Scalars['Boolean']['output']>;
  /** Whether shipping is required for this product type. */
  isShippingRequired: FieldWrapper<Scalars['Boolean']['output']>;
  /** The product type kind. */
  kind: FieldWrapper<SaleorGraphql_ProductTypeKindEnum | '%future added value'>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the product type. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Product attributes of that product type. */
  productAttributes?: Maybe<Array<FieldWrapper<SaleorGraphql_Attribute>>>;
  /**
   * List of products of this type.
   * @deprecated This field will be removed in Saleor 4.0. Use the top-level `products` query with the `productTypes` filter.
   */
  products?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /** Slug of the product type. */
  slug: FieldWrapper<Scalars['String']['output']>;
  /**
   * Tax class assigned to this product type. All products of this product type use this tax class, unless it's overridden in the `Product` type.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
  /**
   * A type of tax. Assigned by enabled tax gateway
   * @deprecated This field will be removed in Saleor 4.0. Use `taxClass` field instead.
   */
  taxType?: Maybe<FieldWrapper<SaleorGraphql_TaxType>>;
  /**
   * Variant attributes of that product type.
   * @deprecated This field will be removed in Saleor 4.0. Use `assignedVariantAttributes` instead.
   */
  variantAttributes?: Maybe<Array<FieldWrapper<SaleorGraphql_Attribute>>>;
  /** Weight of the product type. */
  weight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypeAssignedVariantAttributesArgs = {
  variantSelection?: InputMaybe<SaleorGraphql_VariantAttributeScope>;
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypeAvailableAttributesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_AttributeFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SaleorGraphql_AttributeWhereInput>;
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypeMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypeMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypeProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents a type of product. It defines what attributes are available to products of this type. */
export type SaleorGraphql_ProductTypeVariantAttributesArgs = {
  variantSelection?: InputMaybe<SaleorGraphql_VariantAttributeScope>;
};

/**
 * Deletes product types.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductTypeBulkDelete = {
  __typename?: 'ProductTypeBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export enum SaleorGraphql_ProductTypeConfigurable {
  Configurable = 'CONFIGURABLE',
  Simple = 'SIMPLE'
}

export type SaleorGraphql_ProductTypeCountableConnection = {
  __typename?: 'ProductTypeCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_ProductTypeCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_ProductTypeCountableEdge = {
  __typename?: 'ProductTypeCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_ProductType>;
};

/**
 * Creates a new product type.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductTypeCreate = {
  __typename?: 'ProductTypeCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

/**
 * Deletes a product type.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductTypeDelete = {
  __typename?: 'ProductTypeDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

export enum SaleorGraphql_ProductTypeEnum {
  Digital = 'DIGITAL',
  Shippable = 'SHIPPABLE'
}

export type SaleorGraphql_ProductTypeFilterInput = {
  configurable?: InputMaybe<SaleorGraphql_ProductTypeConfigurable | '%future added value'>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  kind?: InputMaybe<SaleorGraphql_ProductTypeKindEnum | '%future added value'>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  productType?: InputMaybe<SaleorGraphql_ProductTypeEnum | '%future added value'>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_ProductTypeInput = {
  /** Determines if product of this type has multiple variants. This option mainly simplifies product management in the dashboard. There is always at least one variant created under the hood. */
  hasVariants?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines if products are digital. */
  isDigital?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines if shipping is required for products of this variant. */
  isShippingRequired?: InputMaybe<Scalars['Boolean']['input']>;
  /** The product type kind. */
  kind?: InputMaybe<SaleorGraphql_ProductTypeKindEnum | '%future added value'>;
  /** Name of the product type. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** List of attributes shared among all product variants. */
  productAttributes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Product type slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** ID of a tax class to assign to this product type. All products of this product type would use this tax class, unless it's overridden in the `Product` type. */
  taxClass?: InputMaybe<Scalars['ID']['input']>;
  /**
   * Tax rate for enabled tax gateway.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.. Use tax classes to control the tax calculation for a product type. If taxCode is provided, Saleor will try to find a tax class with given code (codes are stored in metadata) and assign it. If no tax class is found, it would be created and assigned.
   */
  taxCode?: InputMaybe<Scalars['String']['input']>;
  /** List of attributes used to distinguish between different variants of a product. */
  variantAttributes?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Weight of the ProductType items. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductTypeKindEnum {
  GiftCard = 'GIFT_CARD',
  Normal = 'NORMAL'
}

/**
 * Reorder the attributes of a product type.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductTypeReorderAttributes = {
  __typename?: 'ProductTypeReorderAttributes';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** Product type from which attributes are reordered. */
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

export enum SaleorGraphql_ProductTypeSortField {
  /** Sort products by type. */
  Digital = 'DIGITAL',
  /** Sort products by name. */
  Name = 'NAME',
  /** Sort products by shipping. */
  ShippingRequired = 'SHIPPING_REQUIRED'
}

export type SaleorGraphql_ProductTypeSortingInput = {
  /** Specifies the direction in which to sort product types. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort product types by the selected field. */
  field: SaleorGraphql_ProductTypeSortField | '%future added value';
};

/**
 * Updates an existing product type.
 *
 * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.
 */
export type SaleorGraphql_ProductTypeUpdate = {
  __typename?: 'ProductTypeUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
};

/**
 * Updates an existing product.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductUpdate = {
  __typename?: 'ProductUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Event sent when product is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductUpdated = SaleorGraphql_Event & {
  __typename?: 'ProductUpdated';
  /** The category of the product. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product the event relates to. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when product is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductUpdatedProductArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariant = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'ProductVariant';
  /** List of attributes assigned to this variant. */
  attributes: Array<FieldWrapper<SaleorGraphql_SelectedAttribute>>;
  /** Channel given to retrieve this product variant. Also used by federation gateway to resolve this object in a federated query. */
  channel?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of price information in channels for the product.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  channelListings?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductVariantChannelListing>>>;
  /** The date and time when the product variant was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * Digital content for the product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContent?: Maybe<FieldWrapper<SaleorGraphql_DigitalContent>>;
  /**
   * External ID of this product.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the product variant. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * List of images for the product variant.
   * @deprecated This field will be removed in Saleor 4.0. Use the `media` field instead.
   */
  images?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductImage>>>;
  /** Gross margin percentage value. */
  margin?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** List of media for the product variant. */
  media?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductMedia>>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The name of the product variant. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Preorder data for product variant.
   *
   * Added in Saleor 3.1.
   */
  preorder?: Maybe<FieldWrapper<SaleorGraphql_PreorderData>>;
  /** Lists the storefront variant's pricing, the current price and discounts, only meant for displaying. */
  pricing?: Maybe<FieldWrapper<SaleorGraphql_VariantPricingInfo>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The product to which the variant belongs. */
  product: FieldWrapper<SaleorGraphql_Product>;
  /** Quantity of a product available for sale in one checkout. Field value will be `null` when no `limitQuantityPerCheckout` in global settings has been set, and `productVariant` stocks are not tracked. */
  quantityAvailable?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The maximum quantity of this variant that a customer can purchase. */
  quantityLimitPerCustomer?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Total quantity ordered.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  quantityOrdered?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Total revenue generated by a variant in given period of time. Note: this field should be queried using `reportProductSales` query as it uses optimizations suitable for such calculations.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  revenue?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /** The SKU (stock keeping unit) of the product variant. */
  sku?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Stocks for the product variant.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  stocks?: Maybe<Array<FieldWrapper<SaleorGraphql_Stock>>>;
  /** Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item. If the field is not provided, `Shop.trackInventoryByDefault` will be used. */
  trackInventory: FieldWrapper<Scalars['Boolean']['output']>;
  /** Returns translated product variant fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantTranslation>>;
  /** The date and time when the product variant was last updated. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** The weight of the product variant. */
  weight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantAttributesArgs = {
  variantSelection?: InputMaybe<SaleorGraphql_VariantAttributeScope>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantPricingArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantQuantityAvailableArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
  countryCode?: InputMaybe<SaleorGraphql_CountryCode>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantRevenueArgs = {
  period?: InputMaybe<SaleorGraphql_ReportingPeriod>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantStocksArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
  countryCode?: InputMaybe<SaleorGraphql_CountryCode>;
};


/** Represents a version of a product such as different size or color. */
export type SaleorGraphql_ProductVariantTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Event sent when product variant is back in stock.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantBackInStock = SaleorGraphql_Event & {
  __typename?: 'ProductVariantBackInStock';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Look up a warehouse. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};


/**
 * Event sent when product variant is back in stock.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantBackInStockProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Creates product variants for a given product.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantBulkCreate = {
  __typename?: 'ProductVariantBulkCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  bulkProductErrors: Array<FieldWrapper<SaleorGraphql_BulkProductError>>;
  /** Returns how many objects were created. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_BulkProductError>>;
  /** List of the created variants.This field will be removed in Saleor 4.0. */
  productVariants: Array<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /**
   * List of the created variants.
   *
   * Added in Saleor 3.11.
   */
  results: Array<FieldWrapper<SaleorGraphql_ProductVariantBulkResult>>;
};

export type SaleorGraphql_ProductVariantBulkCreateInput = {
  /** List of attributes specific to this variant. */
  attributes: Array<SaleorGraphql_BulkAttributeValueInput>;
  /** List of prices assigned to channels. */
  channelListings?: InputMaybe<Array<SaleorGraphql_ProductVariantChannelListingAddInput>>;
  /**
   * External ID of this product variant.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product variant metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Variant name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Determines if variant is in preorder.
   *
   * Added in Saleor 3.1.
   */
  preorder?: InputMaybe<SaleorGraphql_PreorderSettingsInput>;
  /**
   * Fields required to update the product variant private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout.
   *
   * Added in Saleor 3.1.
   */
  quantityLimitPerCustomer?: InputMaybe<Scalars['Int']['input']>;
  /** Stock keeping unit. */
  sku?: InputMaybe<Scalars['String']['input']>;
  /** Stocks of a product available for sale. */
  stocks?: InputMaybe<Array<SaleorGraphql_StockInput>>;
  /** Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item. If the field is not provided, `Shop.trackInventoryByDefault` will be used. */
  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;
  /** Weight of the Product Variant. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/**
 * Deletes product variants.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantBulkDelete = {
  __typename?: 'ProductVariantBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export type SaleorGraphql_ProductVariantBulkError = {
  __typename?: 'ProductVariantBulkError';
  /** List of attributes IDs which causes the error. */
  attributes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of channel listings IDs which causes the error. */
  channelListings?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /**
   * List of channel IDs which causes the error.
   *
   * Added in Saleor 3.12.
   */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductVariantBulkErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
   *
   * Added in Saleor 3.14.
   */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of stocks IDs which causes the error.
   *
   * Added in Saleor 3.12.
   */
  stocks?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of attribute values IDs which causes the error. */
  values?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** List of warehouse IDs which causes the error. */
  warehouses?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductVariantBulkErrorCode {
  AttributeAlreadyAssigned = 'ATTRIBUTE_ALREADY_ASSIGNED',
  AttributeCannotBeAssigned = 'ATTRIBUTE_CANNOT_BE_ASSIGNED',
  AttributeVariantsDisabled = 'ATTRIBUTE_VARIANTS_DISABLED',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidPrice = 'INVALID_PRICE',
  NotFound = 'NOT_FOUND',
  NotProductsVariant = 'NOT_PRODUCTS_VARIANT',
  ProductNotAssignedToChannel = 'PRODUCT_NOT_ASSIGNED_TO_CHANNEL',
  Required = 'REQUIRED',
  StockAlreadyExists = 'STOCK_ALREADY_EXISTS',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_ProductVariantBulkResult = {
  __typename?: 'ProductVariantBulkResult';
  /** List of errors occurred on create attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductVariantBulkError>>>;
  /** Product variant data. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Creates/updates translations for products variants.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 *
 * Triggers the following webhook events:
 * - TRANSLATION_CREATED (async): A translation was created.
 * - TRANSLATION_UPDATED (async): A translation was updated.
 */
export type SaleorGraphql_ProductVariantBulkTranslate = {
  __typename?: 'ProductVariantBulkTranslate';
  /** Returns how many translations were created/updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductVariantBulkTranslateError>>;
  /** List of the translations. */
  results: Array<FieldWrapper<SaleorGraphql_ProductVariantBulkTranslateResult>>;
};

export type SaleorGraphql_ProductVariantBulkTranslateError = {
  __typename?: 'ProductVariantBulkTranslateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ProductVariantTranslateErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_ProductVariantBulkTranslateInput = {
  /** External reference of a product variant. */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Product variant ID. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** Translation language code. */
  languageCode: SaleorGraphql_LanguageCodeEnum | '%future added value';
  /** Translation fields. */
  translationFields: SaleorGraphql_NameTranslationInput;
};

export type SaleorGraphql_ProductVariantBulkTranslateResult = {
  __typename?: 'ProductVariantBulkTranslateResult';
  /** List of errors occurred on translation attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_ProductVariantBulkTranslateError>>>;
  /** Product variant translation data. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantTranslation>>;
};

/**
 * Update multiple product variants.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantBulkUpdate = {
  __typename?: 'ProductVariantBulkUpdate';
  /** Returns how many objects were updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ProductVariantBulkError>>;
  /** List of the updated variants. */
  results: Array<FieldWrapper<SaleorGraphql_ProductVariantBulkResult>>;
};

/**
 * Input fields to update product variants.
 *
 * Added in Saleor 3.11.
 */
export type SaleorGraphql_ProductVariantBulkUpdateInput = {
  /** List of attributes specific to this variant. */
  attributes?: InputMaybe<Array<SaleorGraphql_BulkAttributeValueInput>>;
  /**
   * Channel listings input.
   *
   * Added in Saleor 3.12.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  channelListings?: InputMaybe<SaleorGraphql_ProductVariantChannelListingUpdateInput>;
  /**
   * External ID of this product variant.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** ID of the product variant to update. */
  id: Scalars['ID']['input'];
  /**
   * Fields required to update the product variant metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Variant name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Determines if variant is in preorder.
   *
   * Added in Saleor 3.1.
   */
  preorder?: InputMaybe<SaleorGraphql_PreorderSettingsInput>;
  /**
   * Fields required to update the product variant private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout.
   *
   * Added in Saleor 3.1.
   */
  quantityLimitPerCustomer?: InputMaybe<Scalars['Int']['input']>;
  /** Stock keeping unit. */
  sku?: InputMaybe<Scalars['String']['input']>;
  /**
   * Stocks input.
   *
   * Added in Saleor 3.12.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  stocks?: InputMaybe<SaleorGraphql_ProductVariantStocksUpdateInput>;
  /** Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item. If the field is not provided, `Shop.trackInventoryByDefault` will be used. */
  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;
  /** Weight of the Product Variant. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/** Represents product variant channel listing. */
export type SaleorGraphql_ProductVariantChannelListing = SaleorGraphql_Node & {
  __typename?: 'ProductVariantChannelListing';
  /** The channel to which the variant listing belongs. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Cost price of the variant. */
  costPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** The ID of the variant channel listing. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Gross margin percentage value.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  margin?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Preorder variant data.
   *
   * Added in Saleor 3.1.
   */
  preorderThreshold?: Maybe<FieldWrapper<SaleorGraphql_PreorderThreshold>>;
  /** The price of the variant. */
  price?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
};

export type SaleorGraphql_ProductVariantChannelListingAddInput = {
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** Cost price of the variant in channel. */
  costPrice?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /**
   * The threshold for preorder variant in channel.
   *
   * Added in Saleor 3.1.
   */
  preorderThreshold?: InputMaybe<Scalars['Int']['input']>;
  /** Price of the particular variant in channel. */
  price: Scalars['PositiveDecimal']['input'];
};

/**
 * Manage product variant prices in channels.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantChannelListingUpdate = {
  __typename?: 'ProductVariantChannelListingUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductChannelListingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productChannelListingErrors: Array<FieldWrapper<SaleorGraphql_ProductChannelListingError>>;
  /** An updated product variant instance. */
  variant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

export type SaleorGraphql_ProductVariantChannelListingUpdateInput = {
  /** List of channels to create variant channel listings. */
  create?: InputMaybe<Array<SaleorGraphql_ProductVariantChannelListingAddInput>>;
  /** List of channel listings to remove. */
  remove?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of channel listings to update. */
  update?: InputMaybe<Array<SaleorGraphql_ChannelListingUpdateInput>>;
};

export type SaleorGraphql_ProductVariantCountableConnection = {
  __typename?: 'ProductVariantCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_ProductVariantCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_ProductVariantCountableEdge = {
  __typename?: 'ProductVariantCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_ProductVariant>;
};

/**
 * Creates a new variant for a product.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantCreate = {
  __typename?: 'ProductVariantCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

export type SaleorGraphql_ProductVariantCreateInput = {
  /** List of attributes specific to this variant. */
  attributes: Array<SaleorGraphql_AttributeValueInput>;
  /**
   * External ID of this product variant.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product variant metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Variant name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Determines if variant is in preorder.
   *
   * Added in Saleor 3.1.
   */
  preorder?: InputMaybe<SaleorGraphql_PreorderSettingsInput>;
  /**
   * Fields required to update the product variant private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Product ID of which type is the variant. */
  product: Scalars['ID']['input'];
  /**
   * Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout.
   *
   * Added in Saleor 3.1.
   */
  quantityLimitPerCustomer?: InputMaybe<Scalars['Int']['input']>;
  /** Stock keeping unit. */
  sku?: InputMaybe<Scalars['String']['input']>;
  /** Stocks of a product available for sale. */
  stocks?: InputMaybe<Array<SaleorGraphql_StockInput>>;
  /** Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item. If the field is not provided, `Shop.trackInventoryByDefault` will be used. */
  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;
  /** Weight of the Product Variant. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/**
 * Event sent when new product variant is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantCreated = SaleorGraphql_Event & {
  __typename?: 'ProductVariantCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new product variant is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantCreatedProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a product variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantDelete = {
  __typename?: 'ProductVariantDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Event sent when product variant is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantDeleted = SaleorGraphql_Event & {
  __typename?: 'ProductVariantDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when product variant is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantDeletedProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_ProductVariantFilterInput = {
  isPreorder?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  sku?: InputMaybe<Array<Scalars['String']['input']>>;
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

export type SaleorGraphql_ProductVariantInput = {
  /** List of attributes specific to this variant. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeValueInput>>;
  /**
   * External ID of this product variant.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the product variant metadata.
   *
   * Added in Saleor 3.8.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Variant name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Determines if variant is in preorder.
   *
   * Added in Saleor 3.1.
   */
  preorder?: InputMaybe<SaleorGraphql_PreorderSettingsInput>;
  /**
   * Fields required to update the product variant private metadata.
   *
   * Added in Saleor 3.8.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Determines maximum quantity of `ProductVariant`,that can be bought in a single checkout.
   *
   * Added in Saleor 3.1.
   */
  quantityLimitPerCustomer?: InputMaybe<Scalars['Int']['input']>;
  /** Stock keeping unit. */
  sku?: InputMaybe<Scalars['String']['input']>;
  /** Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item. If the field is not provided, `Shop.trackInventoryByDefault` will be used. */
  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;
  /** Weight of the Product Variant. */
  weight?: InputMaybe<Scalars['WeightScalar']['input']>;
};

/**
 * Event sent when product variant metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_ProductVariantMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'ProductVariantMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when product variant metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_ProductVariantMetadataUpdatedProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when product variant is out of stock.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantOutOfStock = SaleorGraphql_Event & {
  __typename?: 'ProductVariantOutOfStock';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Look up a warehouse. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};


/**
 * Event sent when product variant is out of stock.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantOutOfStockProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deactivates product variant preorder. It changes all preorder allocation into regular allocation.
 *
 * Added in Saleor 3.1.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantPreorderDeactivate = {
  __typename?: 'ProductVariantPreorderDeactivate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** Product variant with ended preorder. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantReorder = {
  __typename?: 'ProductVariantReorder';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

/**
 * Reorder product variant attribute values.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantReorderAttributeValues = {
  __typename?: 'ProductVariantReorderAttributeValues';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** Product variant from which attribute values are reordered. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantSetDefault = {
  __typename?: 'ProductVariantSetDefault';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
};

export enum SaleorGraphql_ProductVariantSortField {
  /** Sort products variants by last modified at. */
  LastModifiedAt = 'LAST_MODIFIED_AT'
}

export type SaleorGraphql_ProductVariantSortingInput = {
  /** Specifies the direction in which to sort productVariants. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort productVariants by the selected field. */
  field: SaleorGraphql_ProductVariantSortField | '%future added value';
};

/**
 * Event sent when product variant stock is updated.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_ProductVariantStockUpdated = SaleorGraphql_Event & {
  __typename?: 'ProductVariantStockUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Look up a warehouse. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};


/**
 * Event sent when product variant stock is updated.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_ProductVariantStockUpdatedProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Creates stocks for product variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantStocksCreate = {
  __typename?: 'ProductVariantStocksCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  bulkStockErrors: Array<FieldWrapper<SaleorGraphql_BulkStockError>>;
  errors: Array<FieldWrapper<SaleorGraphql_BulkStockError>>;
  /** Updated product variant. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Delete stocks from product variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantStocksDelete = {
  __typename?: 'ProductVariantStocksDelete';
  errors: Array<FieldWrapper<SaleorGraphql_StockError>>;
  /** Updated product variant. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  stockErrors: Array<FieldWrapper<SaleorGraphql_StockError>>;
};

/**
 * Update stocks for product variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantStocksUpdate = {
  __typename?: 'ProductVariantStocksUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  bulkStockErrors: Array<FieldWrapper<SaleorGraphql_BulkStockError>>;
  errors: Array<FieldWrapper<SaleorGraphql_BulkStockError>>;
  /** Updated product variant. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

export type SaleorGraphql_ProductVariantStocksUpdateInput = {
  /** List of warehouses to create stocks. */
  create?: InputMaybe<Array<SaleorGraphql_StockInput>>;
  /** List of stocks to remove. */
  remove?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of stocks to update. */
  update?: InputMaybe<Array<SaleorGraphql_StockUpdateInput>>;
};

/** Represents product variant's original translatable fields and related translations. */
export type SaleorGraphql_ProductVariantTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'ProductVariantTranslatableContent';
  /** List of product variant attribute values that can be translated. */
  attributeValues: Array<FieldWrapper<SaleorGraphql_AttributeValueTranslatableContent>>;
  /** The ID of the product variant translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the product variant to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Represents a version of a product such as different size or color.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /**
   * The ID of the product variant to translate.
   *
   * Added in Saleor 3.14.
   */
  productVariantId: FieldWrapper<Scalars['ID']['output']>;
  /** Returns translated product variant fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantTranslation>>;
};


/** Represents product variant's original translatable fields and related translations. */
export type SaleorGraphql_ProductVariantTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a product variant.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_ProductVariantTranslate = {
  __typename?: 'ProductVariantTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/** An enumeration. */
export enum SaleorGraphql_ProductVariantTranslateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

/** Represents product variant translations. */
export type SaleorGraphql_ProductVariantTranslation = SaleorGraphql_Node & {
  __typename?: 'ProductVariantTranslation';
  /** The ID of the product variant translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated product variant name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Represents the product variant fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantTranslatableContent>>;
};

/**
 * Updates an existing variant for product.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_ProductVariantUpdate = {
  __typename?: 'ProductVariantUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Event sent when product variant is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantUpdated = SaleorGraphql_Event & {
  __typename?: 'ProductVariantUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The product variant the event relates to. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when product variant is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ProductVariantUpdatedProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_ProductVariantWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_ProductVariantWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_ProductVariantWhereInput>>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
};

export type SaleorGraphql_ProductWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_ProductWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_ProductWhereInput>>;
  /** Filter by attributes associated with the product. */
  attributes?: InputMaybe<Array<SaleorGraphql_AttributeInput>>;
  /** Filter by the date of availability for purchase. */
  availableFrom?: InputMaybe<Scalars['DateTime']['input']>;
  /** Filter by product category. */
  category?: InputMaybe<SaleorGraphql_GlobalIdFilterInput>;
  /** Filter by collection. */
  collection?: InputMaybe<SaleorGraphql_GlobalIdFilterInput>;
  /** Filter on whether product is a gift card or not. */
  giftCard?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by product with category assigned. */
  hasCategory?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by product with preordered variants. */
  hasPreorderedVariants?: InputMaybe<Scalars['Boolean']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Filter by availability for purchase. */
  isAvailable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by public visibility. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by visibility on the channel. */
  isVisibleInListing?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  /** Filter by the lowest variant price after discounts. */
  minimalPrice?: InputMaybe<SaleorGraphql_DecimalFilterInput>;
  /** Filter by product name. */
  name?: InputMaybe<SaleorGraphql_StringFilterInput>;
  /** Filter by product variant price. */
  price?: InputMaybe<SaleorGraphql_DecimalFilterInput>;
  /** Filter by product type. */
  productType?: InputMaybe<SaleorGraphql_GlobalIdFilterInput>;
  /** Filter by the publication date. */
  publishedFrom?: InputMaybe<Scalars['DateTime']['input']>;
  /** Filter by product slug. */
  slug?: InputMaybe<SaleorGraphql_StringFilterInput>;
  /** Filter by variants having specific stock status. */
  stockAvailability?: InputMaybe<SaleorGraphql_StockAvailability | '%future added value'>;
  /** Filter by stock of the product variant. */
  stocks?: InputMaybe<SaleorGraphql_ProductStockFilterInput>;
  /** Filter by when was the most recent update. */
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeFilterInput>;
};

/**
 * Represents the promotion that allow creating discounts based on given conditions, and is visible to all the customers.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_Promotion = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Promotion';
  /** Date time of promotion creation. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** Description of the promotion. */
  description?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** End date of the promotion. */
  endDate?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The list of events associated with the promotion. */
  events?: Maybe<Array<FieldWrapper<SaleorGraphql_PromotionEvent>>>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the promotion. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The list of promotion rules. */
  rules?: Maybe<Array<FieldWrapper<SaleorGraphql_PromotionRule>>>;
  /** Start date of the promotion. */
  startDate: FieldWrapper<Scalars['DateTime']['output']>;
  /** Returns translated promotion fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_PromotionTranslation>>;
  /**
   * The type of the promotion. Implicate if the discount is applied on catalogue or order level.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  type?: Maybe<FieldWrapper<SaleorGraphql_PromotionTypeEnum | '%future added value'>>;
  /** Date time of last update of promotion. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
};


/**
 * Represents the promotion that allow creating discounts based on given conditions, and is visible to all the customers.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Represents the promotion that allow creating discounts based on given conditions, and is visible to all the customers.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Represents the promotion that allow creating discounts based on given conditions, and is visible to all the customers.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Represents the promotion that allow creating discounts based on given conditions, and is visible to all the customers.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Represents the promotion that allow creating discounts based on given conditions, and is visible to all the customers.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Deletes promotions.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_DELETED (async): A promotion was deleted.
 */
export type SaleorGraphql_PromotionBulkDelete = {
  __typename?: 'PromotionBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
};

export type SaleorGraphql_PromotionCountableConnection = {
  __typename?: 'PromotionCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_PromotionCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_PromotionCountableEdge = {
  __typename?: 'PromotionCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Promotion>;
};

/**
 * Creates a new promotion.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_CREATED (async): A promotion was created.
 * - PROMOTION_STARTED (async): Optionally called if promotion was started.
 */
export type SaleorGraphql_PromotionCreate = {
  __typename?: 'PromotionCreate';
  errors: Array<FieldWrapper<SaleorGraphql_PromotionCreateError>>;
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
};

export type SaleorGraphql_PromotionCreateError = {
  __typename?: 'PromotionCreateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PromotionCreateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Limit of gifts assigned to promotion rule. */
  giftsLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Number of gifts defined for this promotion rule exceeding the limit. */
  giftsLimitExceedBy?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Index of an input list item that caused the error. */
  index?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Limit of rules with orderPredicate defined. */
  rulesLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Number of rules with orderPredicate defined exceeding the limit. */
  rulesLimitExceedBy?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionCreateErrorCode {
  GiftsNumberLimit = 'GIFTS_NUMBER_LIMIT',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidGiftType = 'INVALID_GIFT_TYPE',
  InvalidPrecision = 'INVALID_PRECISION',
  MissingChannels = 'MISSING_CHANNELS',
  MultipleCurrenciesNotAllowed = 'MULTIPLE_CURRENCIES_NOT_ALLOWED',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  RulesNumberLimit = 'RULES_NUMBER_LIMIT'
}

export type SaleorGraphql_PromotionCreateInput = {
  /** Promotion description. */
  description?: InputMaybe<Scalars['JSON']['input']>;
  /** The end date of the promotion in ISO 8601 format. */
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** Promotion name. */
  name: Scalars['String']['input'];
  /** List of promotion rules. */
  rules?: InputMaybe<Array<SaleorGraphql_PromotionRuleInput>>;
  /** The start date of the promotion in ISO 8601 format. */
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  /**
   * Defines the promotion type. Implicate the required promotion rules predicate type and whether the promotion rules will give the catalogue or order discount.
   *
   * The default value is `Catalogue`.
   *
   * This field will be required from Saleor 3.20.
   *
   * Added in Saleor 3.19.
   */
  type?: InputMaybe<SaleorGraphql_PromotionTypeEnum | '%future added value'>;
};

/**
 * Event sent when new promotion is created.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionCreated = SaleorGraphql_Event & {
  __typename?: 'PromotionCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion the event relates to. */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion created event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionCreatedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & {
  __typename?: 'PromotionCreatedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

/**
 * Deletes a promotion.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_DELETED (async): A promotion was deleted.
 */
export type SaleorGraphql_PromotionDelete = {
  __typename?: 'PromotionDelete';
  errors: Array<FieldWrapper<SaleorGraphql_PromotionDeleteError>>;
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
};

export type SaleorGraphql_PromotionDeleteError = {
  __typename?: 'PromotionDeleteError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PromotionDeleteErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionDeleteErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  NotFound = 'NOT_FOUND'
}

/**
 * Event sent when promotion is deleted.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionDeleted = SaleorGraphql_Event & {
  __typename?: 'PromotionDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion the event relates to. */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * The event informs about the end of the promotion.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionEnded = SaleorGraphql_Event & {
  __typename?: 'PromotionEnded';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion the event relates to. */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion ended event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionEndedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & {
  __typename?: 'PromotionEndedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

export type SaleorGraphql_PromotionEvent = SaleorGraphql_PromotionCreatedEvent | SaleorGraphql_PromotionEndedEvent | SaleorGraphql_PromotionRuleCreatedEvent | SaleorGraphql_PromotionRuleDeletedEvent | SaleorGraphql_PromotionRuleUpdatedEvent | SaleorGraphql_PromotionStartedEvent | SaleorGraphql_PromotionUpdatedEvent;

export type SaleorGraphql_PromotionEventInterface = {
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionEventsEnum {
  PromotionCreated = 'PROMOTION_CREATED',
  PromotionEnded = 'PROMOTION_ENDED',
  PromotionStarted = 'PROMOTION_STARTED',
  PromotionUpdated = 'PROMOTION_UPDATED',
  RuleCreated = 'RULE_CREATED',
  RuleDeleted = 'RULE_DELETED',
  RuleUpdated = 'RULE_UPDATED'
}

/**
 * Represents the promotion rule that specifies the conditions that must be met to apply the promotion discount.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRule = SaleorGraphql_Node & {
  __typename?: 'PromotionRule';
  /** The catalogue predicate that must be met to apply the rule reward. */
  cataloguePredicate?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /**
   * List of channels where the rule applies.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  channels?: Maybe<Array<FieldWrapper<SaleorGraphql_Channel>>>;
  /** Description of the promotion rule. */
  description?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /**
   * Product variant IDs available as a gift to choose.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  giftIds?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /**
   * Defines the maximum number of gifts to choose from the gifts list.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  giftsLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the promotion rule. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * The checkout/order predicate that must be met to apply the rule reward.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  orderPredicate?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /**
   * The type of the predicate that must be met to apply the reward.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  predicateType?: Maybe<FieldWrapper<SaleorGraphql_PromotionTypeEnum | '%future added value'>>;
  /** Promotion to which the rule belongs. */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /**
   * The reward type of the promotion rule.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  rewardType?: Maybe<FieldWrapper<SaleorGraphql_RewardTypeEnum | '%future added value'>>;
  /**
   * The reward value of the promotion rule. Defines the discount value applied when the rule conditions are met.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  rewardValue?: Maybe<FieldWrapper<Scalars['PositiveDecimal']['output']>>;
  /** The type of reward value of the promotion rule. */
  rewardValueType?: Maybe<FieldWrapper<SaleorGraphql_RewardValueTypeEnum | '%future added value'>>;
  /** Returns translated promotion rule fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleTranslation>>;
};


/**
 * Represents the promotion rule that specifies the conditions that must be met to apply the promotion discount.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates a new promotion rule.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_RULE_CREATED (async): A promotion rule was created.
 */
export type SaleorGraphql_PromotionRuleCreate = {
  __typename?: 'PromotionRuleCreate';
  errors: Array<FieldWrapper<SaleorGraphql_PromotionRuleCreateError>>;
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
};

export type SaleorGraphql_PromotionRuleCreateError = {
  __typename?: 'PromotionRuleCreateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PromotionRuleCreateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Limit of gifts assigned to promotion rule. */
  giftsLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Number of gifts defined for this promotion rule exceeding the limit. */
  giftsLimitExceedBy?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Limit of rules with orderPredicate defined. */
  rulesLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Number of rules with orderPredicate defined exceeding the limit. */
  rulesLimitExceedBy?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionRuleCreateErrorCode {
  GiftsNumberLimit = 'GIFTS_NUMBER_LIMIT',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidGiftType = 'INVALID_GIFT_TYPE',
  InvalidPrecision = 'INVALID_PRECISION',
  MissingChannels = 'MISSING_CHANNELS',
  MultipleCurrenciesNotAllowed = 'MULTIPLE_CURRENCIES_NOT_ALLOWED',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  RulesNumberLimit = 'RULES_NUMBER_LIMIT'
}

export type SaleorGraphql_PromotionRuleCreateInput = {
  /** Defines the conditions on the catalogue level that must be met for the reward to be applied. */
  cataloguePredicate?: InputMaybe<SaleorGraphql_CataloguePredicateInput>;
  /** List of channel ids to which the rule should apply to. */
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Promotion rule description. */
  description?: InputMaybe<Scalars['JSON']['input']>;
  /**
   * Product variant IDs available as a gift to choose.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  gifts?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Promotion rule name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Defines the conditions on the checkout/draft order level that must be met for the reward to be applied.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  orderPredicate?: InputMaybe<SaleorGraphql_OrderPredicateInput>;
  /** The ID of the promotion that rule belongs to. */
  promotion: Scalars['ID']['input'];
  /**
   * Defines the reward type of the promotion rule.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  rewardType?: InputMaybe<SaleorGraphql_RewardTypeEnum | '%future added value'>;
  /** Defines the discount value. Required when catalogue predicate is provided. */
  rewardValue?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Defines the promotion rule reward value type. Must be provided together with reward value. */
  rewardValueType?: InputMaybe<SaleorGraphql_RewardValueTypeEnum | '%future added value'>;
};

/**
 * Event sent when new promotion rule is created.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleCreated = SaleorGraphql_Event & {
  __typename?: 'PromotionRuleCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion rule the event relates to. */
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion rule created event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleCreatedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & SaleorGraphql_PromotionRuleEventInterface & {
  __typename?: 'PromotionRuleCreatedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The rule ID associated with the promotion event. */
  ruleId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

/**
 * Deletes a promotion rule.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_RULE_DELETED (async): A promotion rule was deleted.
 */
export type SaleorGraphql_PromotionRuleDelete = {
  __typename?: 'PromotionRuleDelete';
  errors: Array<FieldWrapper<SaleorGraphql_PromotionRuleDeleteError>>;
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
};

export type SaleorGraphql_PromotionRuleDeleteError = {
  __typename?: 'PromotionRuleDeleteError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PromotionRuleDeleteErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionRuleDeleteErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  NotFound = 'NOT_FOUND'
}

/**
 * Event sent when new promotion rule is deleted.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleDeleted = SaleorGraphql_Event & {
  __typename?: 'PromotionRuleDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion rule the event relates to. */
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion rule created event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleDeletedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & SaleorGraphql_PromotionRuleEventInterface & {
  __typename?: 'PromotionRuleDeletedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The rule ID associated with the promotion event. */
  ruleId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

/**
 * History log of the promotion event related to rule.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleEventInterface = {
  /** The rule ID associated with the promotion event. */
  ruleId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_PromotionRuleInput = {
  /** Defines the conditions on the catalogue level that must be met for the reward to be applied. */
  cataloguePredicate?: InputMaybe<SaleorGraphql_CataloguePredicateInput>;
  /** List of channel ids to which the rule should apply to. */
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Promotion rule description. */
  description?: InputMaybe<Scalars['JSON']['input']>;
  /**
   * Product variant IDs available as a gift to choose.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  gifts?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Promotion rule name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Defines the conditions on the checkout/draft order level that must be met for the reward to be applied.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  orderPredicate?: InputMaybe<SaleorGraphql_OrderPredicateInput>;
  /**
   * Defines the reward type of the promotion rule.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  rewardType?: InputMaybe<SaleorGraphql_RewardTypeEnum | '%future added value'>;
  /** Defines the discount value. Required when catalogue predicate is provided. */
  rewardValue?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Defines the promotion rule reward value type. Must be provided together with reward value. */
  rewardValueType?: InputMaybe<SaleorGraphql_RewardValueTypeEnum | '%future added value'>;
};

/**
 * Represents promotion rule's original translatable fields and related translations.
 *
 * Added in Saleor 3.17.
 */
export type SaleorGraphql_PromotionRuleTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'PromotionRuleTranslatableContent';
  /**
   * Description of the promotion rule.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** ID of the promotion rule translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the promotion rule. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * ID of the promotion rule to translate.
   *
   * Added in Saleor 3.14.
   */
  promotionRuleId: FieldWrapper<Scalars['ID']['output']>;
  /** Returns translated promotion rule fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleTranslation>>;
};


/**
 * Represents promotion rule's original translatable fields and related translations.
 *
 * Added in Saleor 3.17.
 */
export type SaleorGraphql_PromotionRuleTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a promotion rule.
 *
 * Added in Saleor 3.17.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_PromotionRuleTranslate = {
  __typename?: 'PromotionRuleTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
};

/**
 * Represents promotion rule translations.
 *
 * Added in Saleor 3.17.
 */
export type SaleorGraphql_PromotionRuleTranslation = SaleorGraphql_Node & {
  __typename?: 'PromotionRuleTranslation';
  /**
   * Translated description of the promotion rule.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** ID of the promotion rule translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated name of the promotion rule. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the promotion rule fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_PromotionRuleTranslatableContent>>;
};

export type SaleorGraphql_PromotionRuleTranslationInput = {
  /**
   * Translated promotion description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Updates an existing promotion rule.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_RULE_UPDATED (async): A promotion rule was updated.
 */
export type SaleorGraphql_PromotionRuleUpdate = {
  __typename?: 'PromotionRuleUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_PromotionRuleUpdateError>>;
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
};

export type SaleorGraphql_PromotionRuleUpdateError = {
  __typename?: 'PromotionRuleUpdateError';
  /** List of channel IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PromotionRuleUpdateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Limit of gifts assigned to promotion rule. */
  giftsLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Number of gifts defined for this promotion rule exceeding the limit. */
  giftsLimitExceedBy?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionRuleUpdateErrorCode {
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GiftsNumberLimit = 'GIFTS_NUMBER_LIMIT',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidGiftType = 'INVALID_GIFT_TYPE',
  InvalidPrecision = 'INVALID_PRECISION',
  MissingChannels = 'MISSING_CHANNELS',
  MultipleCurrenciesNotAllowed = 'MULTIPLE_CURRENCIES_NOT_ALLOWED',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

export type SaleorGraphql_PromotionRuleUpdateInput = {
  /** List of channel ids to add. */
  addChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * List of variant IDs available as a gift to add.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  addGifts?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Defines the conditions on the catalogue level that must be met for the reward to be applied. */
  cataloguePredicate?: InputMaybe<SaleorGraphql_CataloguePredicateInput>;
  /** Promotion rule description. */
  description?: InputMaybe<Scalars['JSON']['input']>;
  /** Promotion rule name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Defines the conditions on the checkout/draft order level that must be met for the reward to be applied.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  orderPredicate?: InputMaybe<SaleorGraphql_OrderPredicateInput>;
  /** List of channel ids to remove. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * List of variant IDs available as a gift to remove.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  removeGifts?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * Defines the reward type of the promotion rule.
   *
   * Added in Saleor 3.19.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  rewardType?: InputMaybe<SaleorGraphql_RewardTypeEnum | '%future added value'>;
  /** Defines the discount value. Required when catalogue predicate is provided. */
  rewardValue?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Defines the promotion rule reward value type. Must be provided together with reward value. */
  rewardValueType?: InputMaybe<SaleorGraphql_RewardValueTypeEnum | '%future added value'>;
};

/**
 * Event sent when new promotion rule is updated.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleUpdated = SaleorGraphql_Event & {
  __typename?: 'PromotionRuleUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion rule the event relates to. */
  promotionRule?: Maybe<FieldWrapper<SaleorGraphql_PromotionRule>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion rule created event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionRuleUpdatedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & SaleorGraphql_PromotionRuleEventInterface & {
  __typename?: 'PromotionRuleUpdatedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** The rule ID associated with the promotion event. */
  ruleId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

export enum SaleorGraphql_PromotionSortField {
  /** Sort promotions by created at. */
  CreatedAt = 'CREATED_AT',
  /** Sort promotions by end date. */
  EndDate = 'END_DATE',
  /** Sort promotions by name. */
  Name = 'NAME',
  /** Sort promotions by start date. */
  StartDate = 'START_DATE'
}

export type SaleorGraphql_PromotionSortingInput = {
  /** Specifies the direction in which to sort promotions. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort promotions by the selected field. */
  field: SaleorGraphql_PromotionSortField | '%future added value';
};

/**
 * The event informs about the start of the promotion.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionStarted = SaleorGraphql_Event & {
  __typename?: 'PromotionStarted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion the event relates to. */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion started event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionStartedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & {
  __typename?: 'PromotionStartedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

/**
 * Represents promotion's original translatable fields and related translations.
 *
 * Added in Saleor 3.17.
 */
export type SaleorGraphql_PromotionTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'PromotionTranslatableContent';
  /**
   * Description of the promotion.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** ID of the promotion translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the promotion. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** ID of the promotion to translate. */
  promotionId: FieldWrapper<Scalars['ID']['output']>;
  /** Returns translated promotion fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_PromotionTranslation>>;
};


/**
 * Represents promotion's original translatable fields and related translations.
 *
 * Added in Saleor 3.17.
 */
export type SaleorGraphql_PromotionTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a promotion.
 *
 * Added in Saleor 3.17.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_PromotionTranslate = {
  __typename?: 'PromotionTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
};

/**
 * Represents promotion translations.
 *
 * Added in Saleor 3.17.
 */
export type SaleorGraphql_PromotionTranslation = SaleorGraphql_Node & {
  __typename?: 'PromotionTranslation';
  /**
   * Translated description of the promotion.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** ID of the promotion translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated name of the promotion. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the promotion fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_PromotionTranslatableContent>>;
};

export type SaleorGraphql_PromotionTranslationInput = {
  /**
   * Translated promotion description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionTypeEnum {
  Catalogue = 'CATALOGUE',
  Order = 'ORDER'
}

export type SaleorGraphql_PromotionTypeEnumFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<SaleorGraphql_PromotionTypeEnum | '%future added value'>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<SaleorGraphql_PromotionTypeEnum | '%future added value'>>;
};

/**
 * Updates an existing promotion.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - PROMOTION_UPDATED (async): A promotion was updated.
 * - PROMOTION_STARTED (async): Optionally called if promotion was started.
 * - PROMOTION_ENDED (async): Optionally called if promotion was ended.
 */
export type SaleorGraphql_PromotionUpdate = {
  __typename?: 'PromotionUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_PromotionUpdateError>>;
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
};

export type SaleorGraphql_PromotionUpdateError = {
  __typename?: 'PromotionUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_PromotionUpdateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_PromotionUpdateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

export type SaleorGraphql_PromotionUpdateInput = {
  /** Promotion description. */
  description?: InputMaybe<Scalars['JSON']['input']>;
  /** The end date of the promotion in ISO 8601 format. */
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** Promotion name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The start date of the promotion in ISO 8601 format. */
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

/**
 * Event sent when promotion is updated.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionUpdated = SaleorGraphql_Event & {
  __typename?: 'PromotionUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The promotion the event relates to. */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * History log of the promotion updated event.
 *
 * Added in Saleor 3.17.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_PromotionUpdatedEvent = SaleorGraphql_Node & SaleorGraphql_PromotionEventInterface & {
  __typename?: 'PromotionUpdatedEvent';
  /**
   * User or App that created the promotion event.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_APPS, OWNER.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** Date when event happened. */
  date: FieldWrapper<Scalars['DateTime']['output']>;
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Promotion event type. */
  type: FieldWrapper<SaleorGraphql_PromotionEventsEnum | '%future added value'>;
};

export type SaleorGraphql_PromotionWhereInput = {
  /** List of conditions that must be met. */
  AND?: InputMaybe<Array<SaleorGraphql_PromotionWhereInput>>;
  /** A list of conditions of which at least one must be met. */
  OR?: InputMaybe<Array<SaleorGraphql_PromotionWhereInput>>;
  /** Filter promotions by end date. */
  endDate?: InputMaybe<SaleorGraphql_DateTimeFilterInput>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  isOldSale?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  /** Filter by promotion name. */
  name?: InputMaybe<SaleorGraphql_StringFilterInput>;
  /** Filter promotions by start date. */
  startDate?: InputMaybe<SaleorGraphql_DateTimeFilterInput>;
  type?: InputMaybe<SaleorGraphql_PromotionTypeEnumFilterInput>;
};

export type SaleorGraphql_PublishableChannelListingInput = {
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** Determines if object is visible to customers. */
  isPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Publication date. ISO 8601 standard.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `publishedAt` field instead.
   */
  publicationDate?: InputMaybe<Scalars['Date']['input']>;
  /**
   * Publication date time. ISO 8601 standard.
   *
   * Added in Saleor 3.3.
   */
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SaleorGraphql_Query = {
  __typename?: 'Query';
  _entities?: Maybe<Array<Maybe<FieldWrapper<SaleorGraphql__Entity>>>>;
  _service?: Maybe<FieldWrapper<SaleorGraphql__Service>>;
  /**
   * Look up an address by ID.
   *
   * Requires one of the following permissions: MANAGE_USERS, OWNER.
   */
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** Returns address validation rules. */
  addressValidationRules?: Maybe<FieldWrapper<SaleorGraphql_AddressValidationData>>;
  /**
   * Look up an app by ID. If ID is not provided, return the currently authenticated app.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER AUTHENTICATED_APP. The authenticated app has access to its resources. Fetching different apps requires MANAGE_APPS permission.
   */
  app?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * Look up an app extension by ID.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  appExtension?: Maybe<FieldWrapper<SaleorGraphql_AppExtension>>;
  /**
   * List of all extensions.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  appExtensions?: Maybe<FieldWrapper<SaleorGraphql_AppExtensionCountableConnection>>;
  /**
   * List of the apps.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, MANAGE_APPS.
   */
  apps?: Maybe<FieldWrapper<SaleorGraphql_AppCountableConnection>>;
  /**
   * List of all apps installations
   *
   * Requires one of the following permissions: MANAGE_APPS.
   */
  appsInstallations: Array<FieldWrapper<SaleorGraphql_AppInstallation>>;
  /** Look up an attribute by ID, slug or external reference. */
  attribute?: Maybe<FieldWrapper<SaleorGraphql_Attribute>>;
  /** List of the shop's attributes. */
  attributes?: Maybe<FieldWrapper<SaleorGraphql_AttributeCountableConnection>>;
  /** List of the shop's categories. */
  categories?: Maybe<FieldWrapper<SaleorGraphql_CategoryCountableConnection>>;
  /** Look up a category by ID or slug. */
  category?: Maybe<FieldWrapper<SaleorGraphql_Category>>;
  /** Look up a channel by ID or slug. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /**
   * List of all channels.
   *
   * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
   */
  channels?: Maybe<Array<FieldWrapper<SaleorGraphql_Channel>>>;
  /**
   * Look up a checkout by id.
   *
   * Requires one of the following permissions to query checkouts that belong to other users: MANAGE_CHECKOUTS, IMPERSONATE_USER.
   */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /**
   * List of checkout lines.
   *
   * Requires one of the following permissions: MANAGE_CHECKOUTS.
   */
  checkoutLines?: Maybe<FieldWrapper<SaleorGraphql_CheckoutLineCountableConnection>>;
  /**
   * List of checkouts.
   *
   * Requires one of the following permissions: MANAGE_CHECKOUTS.
   */
  checkouts?: Maybe<FieldWrapper<SaleorGraphql_CheckoutCountableConnection>>;
  /** Look up a collection by ID. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  collection?: Maybe<FieldWrapper<SaleorGraphql_Collection>>;
  /** List of the shop's collections. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  collections?: Maybe<FieldWrapper<SaleorGraphql_CollectionCountableConnection>>;
  /**
   * List of the shop's customers.
   *
   * Requires one of the following permissions: MANAGE_ORDERS, MANAGE_USERS.
   */
  customers?: Maybe<FieldWrapper<SaleorGraphql_UserCountableConnection>>;
  /**
   * Look up digital content by ID.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContent?: Maybe<FieldWrapper<SaleorGraphql_DigitalContent>>;
  /**
   * List of digital content.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  digitalContents?: Maybe<FieldWrapper<SaleorGraphql_DigitalContentCountableConnection>>;
  /**
   * List of draft orders.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  draftOrders?: Maybe<FieldWrapper<SaleorGraphql_OrderCountableConnection>>;
  /**
   * Look up a export file by ID.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  exportFile?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
  /**
   * List of export files.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  exportFiles?: Maybe<FieldWrapper<SaleorGraphql_ExportFileCountableConnection>>;
  /**
   * Look up a gift card by ID.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  giftCard?: Maybe<FieldWrapper<SaleorGraphql_GiftCard>>;
  /**
   * List of gift card currencies.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  giftCardCurrencies: Array<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Gift card related settings from site settings.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  giftCardSettings: FieldWrapper<SaleorGraphql_GiftCardSettings>;
  /**
   * List of gift card tags.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  giftCardTags?: Maybe<FieldWrapper<SaleorGraphql_GiftCardTagCountableConnection>>;
  /**
   * List of gift cards.
   *
   * Requires one of the following permissions: MANAGE_GIFT_CARD.
   */
  giftCards?: Maybe<FieldWrapper<SaleorGraphql_GiftCardCountableConnection>>;
  /**
   * List of activity events to display on homepage (at the moment it only contains order-events).
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  homepageEvents?: Maybe<FieldWrapper<SaleorGraphql_OrderEventCountableConnection>>;
  /** Return the currently authenticated user. */
  me?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Look up a navigation menu by ID or name. */
  menu?: Maybe<FieldWrapper<SaleorGraphql_Menu>>;
  /** Look up a menu item by ID. */
  menuItem?: Maybe<FieldWrapper<SaleorGraphql_MenuItem>>;
  /** List of the storefronts's menu items. */
  menuItems?: Maybe<FieldWrapper<SaleorGraphql_MenuItemCountableConnection>>;
  /** List of the storefront's menus. */
  menus?: Maybe<FieldWrapper<SaleorGraphql_MenuCountableConnection>>;
  /** Look up an order by ID or external reference. */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /**
   * Look up an order by token.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  orderByToken?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /**
   * Order related settings from site settings. Returns `orderSettings` for the first `channel` in alphabetical order.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   * @deprecated This field will be removed in Saleor 4.0. Use the `channel` query to fetch the `orderSettings` field instead.
   */
  orderSettings?: Maybe<FieldWrapper<SaleorGraphql_OrderSettings>>;
  /**
   * List of orders.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  orders?: Maybe<FieldWrapper<SaleorGraphql_OrderCountableConnection>>;
  /**
   * Return the total sales amount from a specific period.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  ordersTotal?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /** Look up a page by ID or slug. */
  page?: Maybe<FieldWrapper<SaleorGraphql_Page>>;
  /** Look up a page type by ID. */
  pageType?: Maybe<FieldWrapper<SaleorGraphql_PageType>>;
  /** List of the page types. */
  pageTypes?: Maybe<FieldWrapper<SaleorGraphql_PageTypeCountableConnection>>;
  /** List of the shop's pages. */
  pages?: Maybe<FieldWrapper<SaleorGraphql_PageCountableConnection>>;
  /**
   * Look up a payment by ID.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  payment?: Maybe<FieldWrapper<SaleorGraphql_Payment>>;
  /**
   * List of payments.
   *
   * Requires one of the following permissions: MANAGE_ORDERS.
   */
  payments?: Maybe<FieldWrapper<SaleorGraphql_PaymentCountableConnection>>;
  /**
   * Look up permission group by ID.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   */
  permissionGroup?: Maybe<FieldWrapper<SaleorGraphql_Group>>;
  /**
   * List of permission groups.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   */
  permissionGroups?: Maybe<FieldWrapper<SaleorGraphql_GroupCountableConnection>>;
  /**
   * Look up a plugin by ID.
   *
   * Requires one of the following permissions: MANAGE_PLUGINS.
   */
  plugin?: Maybe<FieldWrapper<SaleorGraphql_Plugin>>;
  /**
   * List of plugins.
   *
   * Requires one of the following permissions: MANAGE_PLUGINS.
   */
  plugins?: Maybe<FieldWrapper<SaleorGraphql_PluginCountableConnection>>;
  /** Look up a product by ID. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  product?: Maybe<FieldWrapper<SaleorGraphql_Product>>;
  /** Look up a product type by ID. */
  productType?: Maybe<FieldWrapper<SaleorGraphql_ProductType>>;
  /** List of the shop's product types. */
  productTypes?: Maybe<FieldWrapper<SaleorGraphql_ProductTypeCountableConnection>>;
  /** Look up a product variant by ID or SKU. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
  /** List of product variants. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  productVariants?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantCountableConnection>>;
  /** List of the shop's products. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. */
  products?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /**
   * Look up a promotion by ID.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  promotion?: Maybe<FieldWrapper<SaleorGraphql_Promotion>>;
  /**
   * List of the promotions.
   *
   * Added in Saleor 3.17.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  promotions?: Maybe<FieldWrapper<SaleorGraphql_PromotionCountableConnection>>;
  /**
   * List of top selling products.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  reportProductSales?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantCountableConnection>>;
  /**
   * Look up a sale by ID.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   * @deprecated This field will be removed in Saleor 4.0. Use the `promotion` query instead.
   */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /**
   * List of the shop's sales.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   * @deprecated This field will be removed in Saleor 4.0. Use the `promotions` query instead.
   */
  sales?: Maybe<FieldWrapper<SaleorGraphql_SaleCountableConnection>>;
  /**
   * Look up a shipping zone by ID.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /**
   * List of the shop's shipping zones.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  shippingZones?: Maybe<FieldWrapper<SaleorGraphql_ShippingZoneCountableConnection>>;
  /** Return information about the shop. */
  shop: FieldWrapper<SaleorGraphql_Shop>;
  /**
   * List of the shop's staff users.
   *
   * Requires one of the following permissions: MANAGE_STAFF.
   */
  staffUsers?: Maybe<FieldWrapper<SaleorGraphql_UserCountableConnection>>;
  /**
   * Look up a stock by ID
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  stock?: Maybe<FieldWrapper<SaleorGraphql_Stock>>;
  /**
   * List of stocks.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS.
   */
  stocks?: Maybe<FieldWrapper<SaleorGraphql_StockCountableConnection>>;
  /**
   * Look up a tax class.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
  /**
   * List of tax classes.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxClasses?: Maybe<FieldWrapper<SaleorGraphql_TaxClassCountableConnection>>;
  /**
   * Look up a tax configuration.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxConfiguration?: Maybe<FieldWrapper<SaleorGraphql_TaxConfiguration>>;
  /**
   * List of tax configurations.
   *
   * Added in Saleor 3.9.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxConfigurations?: Maybe<FieldWrapper<SaleorGraphql_TaxConfigurationCountableConnection>>;
  /**
   * Tax class rates grouped by country.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxCountryConfiguration?: Maybe<FieldWrapper<SaleorGraphql_TaxCountryConfiguration>>;
  /** \n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP. */
  taxCountryConfigurations?: Maybe<Array<FieldWrapper<SaleorGraphql_TaxCountryConfiguration>>>;
  /** List of all tax rates available from tax gateway. */
  taxTypes?: Maybe<Array<FieldWrapper<SaleorGraphql_TaxType>>>;
  /**
   * Look up a transaction by ID.
   *
   * Added in Saleor 3.6.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   *
   * Requires one of the following permissions: HANDLE_PAYMENTS.
   */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /**
   * Lookup a translatable item by ID.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  translation?: Maybe<FieldWrapper<SaleorGraphql_TranslatableItem>>;
  /**
   * Returns a list of all translatable items of a given kind.
   *
   * Requires one of the following permissions: MANAGE_TRANSLATIONS.
   */
  translations?: Maybe<FieldWrapper<SaleorGraphql_TranslatableItemConnection>>;
  /**
   * Look up a user by ID or email address.
   *
   * Requires one of the following permissions: MANAGE_STAFF, MANAGE_USERS, MANAGE_ORDERS.
   */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /**
   * Look up a voucher by ID.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
  /**
   * List of the shop's vouchers.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  vouchers?: Maybe<FieldWrapper<SaleorGraphql_VoucherCountableConnection>>;
  /**
   * Look up a warehouse by ID.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS, MANAGE_SHIPPING.
   */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
  /**
   * List of warehouses.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS, MANAGE_SHIPPING.
   */
  warehouses?: Maybe<FieldWrapper<SaleorGraphql_WarehouseCountableConnection>>;
  /** Look up a webhook by ID. Requires one of the following permissions: MANAGE_APPS, OWNER. */
  webhook?: Maybe<FieldWrapper<SaleorGraphql_Webhook>>;
  /**
   * List of all available webhook events.
   *
   * Requires one of the following permissions: MANAGE_APPS.
   * @deprecated This field will be removed in Saleor 4.0. Use `WebhookEventTypeAsyncEnum` and `WebhookEventTypeSyncEnum` to get available event types.
   */
  webhookEvents?: Maybe<Array<FieldWrapper<SaleorGraphql_WebhookEvent>>>;
  /** Retrieve a sample payload for a given webhook event based on real data. It can be useful for some integrations where sample payload is required. */
  webhookSamplePayload?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
};


export type SaleorGraphql_Query_EntitiesArgs = {
  representations?: InputMaybe<Array<InputMaybe<Scalars['_Any']['input']>>>;
};


export type SaleorGraphql_QueryAddressArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryAddressValidationRulesArgs = {
  city?: InputMaybe<Scalars['String']['input']>;
  cityArea?: InputMaybe<Scalars['String']['input']>;
  countryArea?: InputMaybe<Scalars['String']['input']>;
  countryCode: SaleorGraphql_CountryCode;
};


export type SaleorGraphql_QueryAppArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_QueryAppExtensionArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryAppExtensionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_AppExtensionFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryAppsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_AppFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_AppSortingInput>;
};


export type SaleorGraphql_QueryAttributeArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryAttributesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_AttributeFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_AttributeSortingInput>;
  where?: InputMaybe<SaleorGraphql_AttributeWhereInput>;
};


export type SaleorGraphql_QueryCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_CategoryFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  level?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_CategorySortingInput>;
  where?: InputMaybe<SaleorGraphql_CategoryWhereInput>;
};


export type SaleorGraphql_QueryCategoryArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryChannelArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryCheckoutArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_QueryCheckoutLinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryCheckoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_CheckoutFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_CheckoutSortingInput>;
};


export type SaleorGraphql_QueryCollectionArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_CollectionFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_CollectionSortingInput>;
  where?: InputMaybe<SaleorGraphql_CollectionWhereInput>;
};


export type SaleorGraphql_QueryCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_CustomerFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_UserSortingInput>;
};


export type SaleorGraphql_QueryDigitalContentArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryDigitalContentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryDraftOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_OrderDraftFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_OrderSortingInput>;
};


export type SaleorGraphql_QueryExportFileArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryExportFilesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ExportFileFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_ExportFileSortingInput>;
};


export type SaleorGraphql_QueryGiftCardArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryGiftCardTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_GiftCardTagFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryGiftCardsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_GiftCardFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_GiftCardSortingInput>;
};


export type SaleorGraphql_QueryHomepageEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryMenuArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryMenuItemArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_MenuItemFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_MenuItemSortingInput>;
};


export type SaleorGraphql_QueryMenusArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_MenuFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_MenuSortingInput>;
};


export type SaleorGraphql_QueryOrderArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_QueryOrderByTokenArgs = {
  token: Scalars['UUID']['input'];
};


export type SaleorGraphql_QueryOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_OrderFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_OrderSortingInput>;
};


export type SaleorGraphql_QueryOrdersTotalArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  period?: InputMaybe<SaleorGraphql_ReportingPeriod>;
};


export type SaleorGraphql_QueryPageArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryPageTypeArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryPageTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_PageTypeFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_PageTypeSortingInput>;
};


export type SaleorGraphql_QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_PageFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_PageSortingInput>;
};


export type SaleorGraphql_QueryPaymentArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryPaymentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_PaymentFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryPermissionGroupArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryPermissionGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_PermissionGroupFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_PermissionGroupSortingInput>;
};


export type SaleorGraphql_QueryPluginArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryPluginsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_PluginFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_PluginSortingInput>;
};


export type SaleorGraphql_QueryProductArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryProductTypeArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryProductTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ProductTypeFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_ProductTypeSortingInput>;
};


export type SaleorGraphql_QueryProductVariantArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
};


export type SaleorGraphql_QueryProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ProductVariantFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_ProductVariantSortingInput>;
  where?: InputMaybe<SaleorGraphql_ProductVariantWhereInput>;
};


export type SaleorGraphql_QueryProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ProductFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_ProductOrder>;
  where?: InputMaybe<SaleorGraphql_ProductWhereInput>;
};


export type SaleorGraphql_QueryPromotionArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryPromotionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_PromotionSortingInput>;
  where?: InputMaybe<SaleorGraphql_PromotionWhereInput>;
};


export type SaleorGraphql_QueryReportProductSalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel: Scalars['String']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  period: SaleorGraphql_ReportingPeriod;
};


export type SaleorGraphql_QuerySaleArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QuerySalesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_SaleFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_SaleSortingInput>;
};


export type SaleorGraphql_QueryShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryShippingZonesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_ShippingZoneFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryStaffUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_StaffUserInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_UserSortingInput>;
};


export type SaleorGraphql_QueryStockArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryStocksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_StockFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryTaxClassArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryTaxClassesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_TaxClassFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_TaxClassSortingInput>;
};


export type SaleorGraphql_QueryTaxConfigurationArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryTaxConfigurationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_TaxConfigurationFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryTaxCountryConfigurationArgs = {
  countryCode: SaleorGraphql_CountryCode;
};


export type SaleorGraphql_QueryTransactionArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  token?: InputMaybe<Scalars['UUID']['input']>;
};


export type SaleorGraphql_QueryTranslationArgs = {
  id: Scalars['ID']['input'];
  kind: SaleorGraphql_TranslatableKinds;
};


export type SaleorGraphql_QueryTranslationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  kind: SaleorGraphql_TranslatableKinds;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SaleorGraphql_QueryUserArgs = {
  email?: InputMaybe<Scalars['String']['input']>;
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_QueryVoucherArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryVouchersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_VoucherFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_VoucherSortingInput>;
};


export type SaleorGraphql_QueryWarehouseArgs = {
  externalReference?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type SaleorGraphql_QueryWarehousesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_WarehouseFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_WarehouseSortingInput>;
};


export type SaleorGraphql_QueryWebhookArgs = {
  id: Scalars['ID']['input'];
};


export type SaleorGraphql_QueryWebhookSamplePayloadArgs = {
  eventType: SaleorGraphql_WebhookSampleEventTypeEnum;
};

/** Represents a reduced VAT rate for a particular type of goods. */
export type SaleorGraphql_ReducedRate = {
  __typename?: 'ReducedRate';
  /** Reduced VAT rate in percent. */
  rate: FieldWrapper<Scalars['Float']['output']>;
  /** A type of goods. */
  rateType: FieldWrapper<Scalars['String']['output']>;
};

/** Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `refreshToken`. `csrfToken` is required when `refreshToken` is provided as a cookie. */
export type SaleorGraphql_RefreshToken = {
  __typename?: 'RefreshToken';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** JWT token, required to authenticate. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

export type SaleorGraphql_ReorderInput = {
  /** The ID of the item to move. */
  id: Scalars['ID']['input'];
  /** The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged. */
  sortOrder?: InputMaybe<Scalars['Int']['input']>;
};

export enum SaleorGraphql_ReportingPeriod {
  ThisMonth = 'THIS_MONTH',
  Today = 'TODAY'
}

/**
 * Request email change of the logged in user.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for account email change.
 * - ACCOUNT_CHANGE_EMAIL_REQUESTED (async): An account email change was requested.
 */
export type SaleorGraphql_RequestEmailChange = {
  __typename?: 'RequestEmailChange';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** A user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Sends an email with the account password modification link.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for password reset.
 * - ACCOUNT_SET_PASSWORD_REQUESTED (async): Setting a new password for the account is requested.
 * - STAFF_SET_PASSWORD_REQUESTED (async): Setting a new password for the staff account is requested.
 */
export type SaleorGraphql_RequestPasswordReset = {
  __typename?: 'RequestPasswordReset';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
};

/** An enumeration. */
export enum SaleorGraphql_RewardTypeEnum {
  Gift = 'GIFT',
  SubtotalDiscount = 'SUBTOTAL_DISCOUNT'
}

/** An enumeration. */
export enum SaleorGraphql_RewardValueTypeEnum {
  Fixed = 'FIXED',
  Percentage = 'PERCENTAGE'
}

/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_Sale = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Sale';
  /** List of categories this sale applies to. */
  categories?: Maybe<FieldWrapper<SaleorGraphql_CategoryCountableConnection>>;
  /**
   * List of channels available for the sale.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  channelListings?: Maybe<Array<FieldWrapper<SaleorGraphql_SaleChannelListing>>>;
  /**
   * List of collections this sale applies to.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  collections?: Maybe<FieldWrapper<SaleorGraphql_CollectionCountableConnection>>;
  /** The date and time when the sale was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** Currency code for sale. */
  currency?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Sale value. */
  discountValue?: Maybe<FieldWrapper<Scalars['Float']['output']>>;
  /** The end date and time of the sale. */
  endDate?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The ID of the sale. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** The name of the sale. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * List of products this sale applies to.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  products?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /** The start date and time of the sale. */
  startDate: FieldWrapper<Scalars['DateTime']['output']>;
  /** Returns translated sale fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_SaleTranslation>>;
  /** Type of the sale, fixed or percentage. */
  type: FieldWrapper<SaleorGraphql_SaleType | '%future added value'>;
  /** The date and time when the sale was updated. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * List of product variants this sale applies to.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  variants?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantCountableConnection>>;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SalePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SalePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


/**
 * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `Promotion` type instead.
 */
export type SaleorGraphql_SaleVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Adds products, categories, collections to a sale.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionRuleCreate` mutation instead.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - SALE_UPDATED (async): A sale was updated.
 */
export type SaleorGraphql_SaleAddCatalogues = {
  __typename?: 'SaleAddCatalogues';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  /** Sale of which catalogue IDs will be modified. */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
};

/**
 * Deletes sales.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - SALE_DELETED (async): A sale was deleted.
 */
export type SaleorGraphql_SaleBulkDelete = {
  __typename?: 'SaleBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
};

/**
 * Represents sale channel listing.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `PromotionRule` type instead.
 */
export type SaleorGraphql_SaleChannelListing = SaleorGraphql_Node & {
  __typename?: 'SaleChannelListing';
  /** The channel in which the sale is available. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** The currency in which the discount value is specified. */
  currency: FieldWrapper<Scalars['String']['output']>;
  /** The value of the discount applied to the sale in the channel. */
  discountValue: FieldWrapper<Scalars['Float']['output']>;
  /** The ID of the channel listing. */
  id: FieldWrapper<Scalars['ID']['output']>;
};

export type SaleorGraphql_SaleChannelListingAddInput = {
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** The value of the discount. */
  discountValue: Scalars['PositiveDecimal']['input'];
};

export type SaleorGraphql_SaleChannelListingInput = {
  /** List of channels to which the sale should be assigned. */
  addChannels?: InputMaybe<Array<SaleorGraphql_SaleChannelListingAddInput>>;
  /** List of channels from which the sale should be unassigned. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Manage sale's availability in channels.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionRuleCreate` or `promotionRuleUpdate` mutations instead.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 */
export type SaleorGraphql_SaleChannelListingUpdate = {
  __typename?: 'SaleChannelListingUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  /** An updated sale instance. */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
};

export type SaleorGraphql_SaleCountableConnection = {
  __typename?: 'SaleCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_SaleCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_SaleCountableEdge = {
  __typename?: 'SaleCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Sale>;
};

/**
 * Creates a new sale.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionCreate` mutation instead.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - SALE_CREATED (async): A sale was created.
 */
export type SaleorGraphql_SaleCreate = {
  __typename?: 'SaleCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
};

/**
 * Event sent when new sale is created.
 *
 * Added in Saleor 3.2.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionCreated` event instead.
 */
export type SaleorGraphql_SaleCreated = SaleorGraphql_Event & {
  __typename?: 'SaleCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The sale the event relates to. */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new sale is created.
 *
 * Added in Saleor 3.2.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionCreated` event instead.
 */
export type SaleorGraphql_SaleCreatedSaleArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a sale.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionDelete` mutation instead.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - SALE_DELETED (async): A sale was deleted.
 */
export type SaleorGraphql_SaleDelete = {
  __typename?: 'SaleDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
};

/**
 * Event sent when sale is deleted.
 *
 * Added in Saleor 3.2.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionDeleted` event instead.
 */
export type SaleorGraphql_SaleDeleted = SaleorGraphql_Event & {
  __typename?: 'SaleDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The sale the event relates to. */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when sale is deleted.
 *
 * Added in Saleor 3.2.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionDeleted` event instead.
 */
export type SaleorGraphql_SaleDeletedSaleArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_SaleFilterInput = {
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  saleType?: InputMaybe<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>;
  search?: InputMaybe<Scalars['String']['input']>;
  started?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
  status?: InputMaybe<Array<SaleorGraphql_DiscountStatusEnum | '%future added value'>>;
  updatedAt?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
};

export type SaleorGraphql_SaleInput = {
  /** Categories related to the discount. */
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Collections related to the discount. */
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** End date of the voucher in ISO 8601 format. */
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** Voucher name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Products related to the discount. */
  products?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Start date of the voucher in ISO 8601 format. */
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** Fixed or percentage. */
  type?: InputMaybe<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>;
  /** Value of the voucher. */
  value?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  variants?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Removes products, categories, collections from a sale.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionRuleUpdate` or `promotionRuleDelete` mutations instead.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - SALE_UPDATED (async): A sale was updated.
 */
export type SaleorGraphql_SaleRemoveCatalogues = {
  __typename?: 'SaleRemoveCatalogues';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  /** Sale of which catalogue IDs will be modified. */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
};

export enum SaleorGraphql_SaleSortField {
  /** Sort sales by created at. */
  CreatedAt = 'CREATED_AT',
  /** Sort sales by end date. */
  EndDate = 'END_DATE',
  /** Sort sales by last modified at. */
  LastModifiedAt = 'LAST_MODIFIED_AT',
  /** Sort sales by name. */
  Name = 'NAME',
  /** Sort sales by start date. */
  StartDate = 'START_DATE',
  /** Sort sales by type. */
  Type = 'TYPE',
  /**
   * Sort sales by value.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  Value = 'VALUE'
}

export type SaleorGraphql_SaleSortingInput = {
  /**
   * Specifies the channel in which to sort the data.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** Specifies the direction in which to sort sales. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort sales by the selected field. */
  field: SaleorGraphql_SaleSortField | '%future added value';
};

/**
 * The event informs about the start or end of the sale.
 *
 * Added in Saleor 3.5.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionStarted` and `PromotionEnded` events instead.
 */
export type SaleorGraphql_SaleToggle = SaleorGraphql_Event & {
  __typename?: 'SaleToggle';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * The sale the event relates to.
   *
   * Added in Saleor 3.5.
   */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * The event informs about the start or end of the sale.
 *
 * Added in Saleor 3.5.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionStarted` and `PromotionEnded` events instead.
 */
export type SaleorGraphql_SaleToggleSaleArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Represents sale's original translatable fields and related translations.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `PromotionTranslatableContent` instead.
 */
export type SaleorGraphql_SaleTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'SaleTranslatableContent';
  /** The ID of the sale translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Name of the sale to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Sales allow creating discounts for categories, collections or products and are visible to all the customers.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /**
   * The ID of the sale to translate.
   *
   * Added in Saleor 3.14.
   */
  saleId: FieldWrapper<Scalars['ID']['output']>;
  /** Returns translated sale fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_SaleTranslation>>;
};


/**
 * Represents sale's original translatable fields and related translations.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `PromotionTranslatableContent` instead.
 */
export type SaleorGraphql_SaleTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a sale.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `PromotionTranslate` mutation instead.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_SaleTranslate = {
  __typename?: 'SaleTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

/**
 * Represents sale translations.
 *
 * DEPRECATED: this type will be removed in Saleor 4.0. Use `PromotionTranslation` instead.
 */
export type SaleorGraphql_SaleTranslation = SaleorGraphql_Node & {
  __typename?: 'SaleTranslation';
  /** The ID of the sale translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated name of sale. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the sale fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_SaleTranslatableContent>>;
};

export enum SaleorGraphql_SaleType {
  Fixed = 'FIXED',
  Percentage = 'PERCENTAGE'
}

/**
 * Updates a sale.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `promotionUpdate` mutation instead.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - SALE_UPDATED (async): A sale was updated.
 * - SALE_TOGGLE (async): Optionally triggered when a sale is started or stopped.
 */
export type SaleorGraphql_SaleUpdate = {
  __typename?: 'SaleUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
};

/**
 * Event sent when sale is updated.
 *
 * Added in Saleor 3.2.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionUpdated` event instead.
 */
export type SaleorGraphql_SaleUpdated = SaleorGraphql_Event & {
  __typename?: 'SaleUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The sale the event relates to. */
  sale?: Maybe<FieldWrapper<SaleorGraphql_Sale>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when sale is updated.
 *
 * Added in Saleor 3.2.
 *
 * DEPRECATED: this event will be removed in Saleor 4.0. Use `PromotionUpdated` event instead.
 */
export type SaleorGraphql_SaleUpdatedSaleArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/** Represents a custom attribute. */
export type SaleorGraphql_SelectedAttribute = {
  __typename?: 'SelectedAttribute';
  /** Name of an attribute displayed in the interface. */
  attribute: FieldWrapper<SaleorGraphql_Attribute>;
  /** Values of an attribute. */
  values: Array<FieldWrapper<SaleorGraphql_AttributeValue>>;
};

/**
 * Sends a notification confirmation.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - NOTIFY_USER (async): A notification for account confirmation.
 * - ACCOUNT_CONFIRMATION_REQUESTED (async): An account confirmation was requested. This event is always sent regardless of settings.
 */
export type SaleorGraphql_SendConfirmationEmail = {
  __typename?: 'SendConfirmationEmail';
  errors: Array<FieldWrapper<SaleorGraphql_SendConfirmationEmailError>>;
};

export type SaleorGraphql_SendConfirmationEmailError = {
  __typename?: 'SendConfirmationEmailError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_SendConfirmationEmailErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_SendConfirmationEmailErrorCode {
  AccountConfirmed = 'ACCOUNT_CONFIRMED',
  ConfirmationAlreadyRequested = 'CONFIRMATION_ALREADY_REQUESTED',
  Invalid = 'INVALID',
  MissingChannelSlug = 'MISSING_CHANNEL_SLUG'
}

export type SaleorGraphql_SeoInput = {
  /** SEO description. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** SEO title. */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Sets the user's password from the token sent by email using the RequestPasswordReset mutation. */
export type SaleorGraphql_SetPassword = {
  __typename?: 'SetPassword';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** CSRF token required to re-generate access token. */
  csrfToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** JWT refresh token, required to re-generate access token. */
  refreshToken?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** JWT token, required to authenticate. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

export type SaleorGraphql_ShippingError = {
  __typename?: 'ShippingError';
  /** List of channels IDs which causes the error. */
  channels?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ShippingErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of warehouse IDs which causes the error. */
  warehouses?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_ShippingErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MaxLessThanMin = 'MAX_LESS_THAN_MIN',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

/**
 * List shipping methods for checkout.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_ShippingListMethodsForCheckout = SaleorGraphql_Event & {
  __typename?: 'ShippingListMethodsForCheckout';
  /** The checkout the event relates to. */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * Shipping methods that can be used with this checkout.
   *
   * Added in Saleor 3.6.
   */
  shippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethod>>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Shipping methods that can be used as means of shipping for orders and checkouts. */
export type SaleorGraphql_ShippingMethod = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'ShippingMethod';
  /** Describes if this shipping method is active and can be selected. */
  active: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Shipping method description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** Unique ID of ShippingMethod available for Order. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Maximum delivery days for this shipping method. */
  maximumDeliveryDays?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Maximum order price for this shipping method. */
  maximumOrderPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /**
   * Maximum order weight for this shipping method.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  maximumOrderWeight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
  /** Message connected to this shipping method. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Public metadata. Use `keys` to control which fields you want to include. The default is to include everything. */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Minimum delivery days for this shipping method. */
  minimumDeliveryDays?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Minimal order price for this shipping method. */
  minimumOrderPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /**
   * Minimum order weight for this shipping method.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  minimumOrderWeight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
  /** Shipping method name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** The price of selected shipping method. */
  price: FieldWrapper<SaleorGraphql_Money>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything. */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Returns translated shipping method fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodTranslation>>;
  /**
   * Type of the shipping method.
   * @deprecated This field will be removed in Saleor 4.0.
   */
  type?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodTypeEnum | '%future added value'>>;
};


/** Shipping methods that can be used as means of shipping for orders and checkouts. */
export type SaleorGraphql_ShippingMethodMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Shipping methods that can be used as means of shipping for orders and checkouts. */
export type SaleorGraphql_ShippingMethodMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Shipping methods that can be used as means of shipping for orders and checkouts. */
export type SaleorGraphql_ShippingMethodPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Shipping methods that can be used as means of shipping for orders and checkouts. */
export type SaleorGraphql_ShippingMethodPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Shipping methods that can be used as means of shipping for orders and checkouts. */
export type SaleorGraphql_ShippingMethodTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/** Represents shipping method channel listing. */
export type SaleorGraphql_ShippingMethodChannelListing = SaleorGraphql_Node & {
  __typename?: 'ShippingMethodChannelListing';
  /** The channel associated with the shipping method channel listing. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** The ID of shipping method channel listing. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Maximum order price. */
  maximumOrderPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Minimum order price. */
  minimumOrderPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Price of the shipping method in the associated channel. */
  price?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
};

export type SaleorGraphql_ShippingMethodChannelListingAddInput = {
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** Maximum order price to use this shipping method. */
  maximumOrderPrice?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Minimum order price to use this shipping method. */
  minimumOrderPrice?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Shipping price of the shipping method in this channel. */
  price?: InputMaybe<Scalars['PositiveDecimal']['input']>;
};

export type SaleorGraphql_ShippingMethodChannelListingInput = {
  /** List of channels to which the shipping method should be assigned. */
  addChannels?: InputMaybe<Array<SaleorGraphql_ShippingMethodChannelListingAddInput>>;
  /** List of channels from which the shipping method should be unassigned. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Manage shipping method's availability in channels.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingMethodChannelListingUpdate = {
  __typename?: 'ShippingMethodChannelListingUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** An updated shipping method instance. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
};

/** Represents shipping method postal code rule. */
export type SaleorGraphql_ShippingMethodPostalCodeRule = SaleorGraphql_Node & {
  __typename?: 'ShippingMethodPostalCodeRule';
  /** End address range. */
  end?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Inclusion type of the postal code rule. */
  inclusionType?: Maybe<FieldWrapper<SaleorGraphql_PostalCodeRuleInclusionTypeEnum | '%future added value'>>;
  /** Start address range. */
  start?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Represents shipping method's original translatable fields and related translations. */
export type SaleorGraphql_ShippingMethodTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'ShippingMethodTranslatableContent';
  /**
   * Shipping method description to translate.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the shipping method translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Shipping method name to translate. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Shipping method are the methods you'll use to get customer's orders  to them. They are directly exposed to the customers.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /**
   * The ID of the shipping method to translate.
   *
   * Added in Saleor 3.14.
   */
  shippingMethodId: FieldWrapper<Scalars['ID']['output']>;
  /** Returns translated shipping method fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodTranslation>>;
};


/** Represents shipping method's original translatable fields and related translations. */
export type SaleorGraphql_ShippingMethodTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/** Represents shipping method translations. */
export type SaleorGraphql_ShippingMethodTranslation = SaleorGraphql_Node & {
  __typename?: 'ShippingMethodTranslation';
  /**
   * Translated description of the shipping method.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** The ID of the shipping method translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated shipping method name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * Represents the shipping method fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodTranslatableContent>>;
};

/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodType = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'ShippingMethodType';
  /**
   * List of channels available for the method.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  channelListings?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethodChannelListing>>>;
  /**
   * Shipping method description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /**
   * List of excluded products for the shipping method.
   *
   * Requires one of the following permissions: MANAGE_SHIPPING.
   */
  excludedProducts?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /** Shipping method ID. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Maximum number of days for delivery. */
  maximumDeliveryDays?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The price of the cheapest variant (including discounts). */
  maximumOrderPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Maximum order weight to use this shipping method. */
  maximumOrderWeight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Minimal number of days for delivery. */
  minimumDeliveryDays?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** The price of the cheapest variant (including discounts). */
  minimumOrderPrice?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Minimum order weight to use this shipping method. */
  minimumOrderWeight?: Maybe<FieldWrapper<SaleorGraphql_Weight>>;
  /** Shipping method name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Postal code ranges rule of exclusion or inclusion of the shipping method. */
  postalCodeRules?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethodPostalCodeRule>>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Tax class assigned to this shipping method.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
  /** Returns translated shipping method fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodTranslation>>;
  /** Type of the shipping method. */
  type?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodTypeEnum | '%future added value'>>;
};


/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodTypeExcludedProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodTypeMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodTypeMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodTypePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodTypePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers. */
export type SaleorGraphql_ShippingMethodTypeTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/** An enumeration. */
export enum SaleorGraphql_ShippingMethodTypeEnum {
  Price = 'PRICE',
  Weight = 'WEIGHT'
}

/**
 * List of shipping methods available for the country.
 *
 * Added in Saleor 3.6.
 */
export type SaleorGraphql_ShippingMethodsPerCountry = {
  __typename?: 'ShippingMethodsPerCountry';
  /** The country code. */
  countryCode: FieldWrapper<SaleorGraphql_CountryCode | '%future added value'>;
  /** List of available shipping methods. */
  shippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethod>>>;
};

export type SaleorGraphql_ShippingPostalCodeRulesCreateInputRange = {
  /** End range of the postal code. */
  end?: InputMaybe<Scalars['String']['input']>;
  /** Start range of the postal code. */
  start: Scalars['String']['input'];
};

/**
 * Deletes shipping prices.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingPriceBulkDelete = {
  __typename?: 'ShippingPriceBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
};

/**
 * Creates a new shipping price.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingPriceCreate = {
  __typename?: 'ShippingPriceCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** A shipping zone to which the shipping method belongs. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
};

/**
 * Event sent when new shipping price is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceCreated = SaleorGraphql_Event & {
  __typename?: 'ShippingPriceCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping method the event relates to. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** The shipping zone the shipping method belongs to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new shipping price is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceCreatedShippingMethodArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};


/**
 * Event sent when new shipping price is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceCreatedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a shipping price.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingPriceDelete = {
  __typename?: 'ShippingPriceDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** A shipping method to delete. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** A shipping zone to which the shipping method belongs. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
};

/**
 * Event sent when shipping price is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceDeleted = SaleorGraphql_Event & {
  __typename?: 'ShippingPriceDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping method the event relates to. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** The shipping zone the shipping method belongs to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when shipping price is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceDeletedShippingMethodArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};


/**
 * Event sent when shipping price is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceDeletedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Exclude products from shipping price.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingPriceExcludeProducts = {
  __typename?: 'ShippingPriceExcludeProducts';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** A shipping method with new list of excluded products. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
};

export type SaleorGraphql_ShippingPriceExcludeProductsInput = {
  /** List of products which will be excluded. */
  products: Array<Scalars['ID']['input']>;
};

export type SaleorGraphql_ShippingPriceInput = {
  /** Postal code rules to add. */
  addPostalCodeRules?: InputMaybe<Array<SaleorGraphql_ShippingPostalCodeRulesCreateInputRange>>;
  /** Postal code rules to delete. */
  deletePostalCodeRules?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Shipping method description. */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  /** Inclusion type for currently assigned postal code rules. */
  inclusionType?: InputMaybe<SaleorGraphql_PostalCodeRuleInclusionTypeEnum | '%future added value'>;
  /** Maximum number of days for delivery. */
  maximumDeliveryDays?: InputMaybe<Scalars['Int']['input']>;
  /** Maximum order weight to use this shipping method. */
  maximumOrderWeight?: InputMaybe<Scalars['WeightScalar']['input']>;
  /** Minimal number of days for delivery. */
  minimumDeliveryDays?: InputMaybe<Scalars['Int']['input']>;
  /** Minimum order weight to use this shipping method. */
  minimumOrderWeight?: InputMaybe<Scalars['WeightScalar']['input']>;
  /** Name of the shipping method. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Shipping zone this method belongs to. */
  shippingZone?: InputMaybe<Scalars['ID']['input']>;
  /** ID of a tax class to assign to this shipping method. If not provided, the default tax class will be used. */
  taxClass?: InputMaybe<Scalars['ID']['input']>;
  /** Shipping type: price or weight based. */
  type?: InputMaybe<SaleorGraphql_ShippingMethodTypeEnum | '%future added value'>;
};

/**
 * Remove product from excluded list for shipping price.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingPriceRemoveProductFromExclude = {
  __typename?: 'ShippingPriceRemoveProductFromExclude';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** A shipping method with new list of excluded products. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
};

/**
 * Creates/updates translations for a shipping method.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_ShippingPriceTranslate = {
  __typename?: 'ShippingPriceTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

export type SaleorGraphql_ShippingPriceTranslationInput = {
  /**
   * Translated shipping method description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Updates a new shipping price.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingPriceUpdate = {
  __typename?: 'ShippingPriceUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** A shipping zone to which the shipping method belongs. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
};

/**
 * Event sent when shipping price is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceUpdated = SaleorGraphql_Event & {
  __typename?: 'ShippingPriceUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping method the event relates to. */
  shippingMethod?: Maybe<FieldWrapper<SaleorGraphql_ShippingMethodType>>;
  /** The shipping zone the shipping method belongs to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when shipping price is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceUpdatedShippingMethodArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};


/**
 * Event sent when shipping price is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingPriceUpdatedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/** Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly. */
export type SaleorGraphql_ShippingZone = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'ShippingZone';
  /** List of channels for shipping zone. */
  channels: Array<FieldWrapper<SaleorGraphql_Channel>>;
  /** List of countries available for the method. */
  countries: Array<FieldWrapper<SaleorGraphql_CountryDisplay>>;
  /** Indicates if the shipping zone is default one. */
  default: FieldWrapper<Scalars['Boolean']['output']>;
  /** Description of a shipping zone. */
  description?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of shipping zone. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Shipping zone name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** Lowest and highest prices for the shipping. */
  priceRange?: Maybe<FieldWrapper<SaleorGraphql_MoneyRange>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** List of shipping methods available for orders shipped to countries within this shipping zone. */
  shippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethodType>>>;
  /** List of warehouses for shipping zone. */
  warehouses: Array<FieldWrapper<SaleorGraphql_Warehouse>>;
};


/** Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly. */
export type SaleorGraphql_ShippingZoneMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly. */
export type SaleorGraphql_ShippingZoneMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly. */
export type SaleorGraphql_ShippingZonePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly. */
export type SaleorGraphql_ShippingZonePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Deletes shipping zones.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingZoneBulkDelete = {
  __typename?: 'ShippingZoneBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
};

export type SaleorGraphql_ShippingZoneCountableConnection = {
  __typename?: 'ShippingZoneCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_ShippingZoneCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_ShippingZoneCountableEdge = {
  __typename?: 'ShippingZoneCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_ShippingZone>;
};

/**
 * Creates a new shipping zone.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingZoneCreate = {
  __typename?: 'ShippingZoneCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
};

export type SaleorGraphql_ShippingZoneCreateInput = {
  /** List of channels to assign to the shipping zone. */
  addChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of warehouses to assign to a shipping zone */
  addWarehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of countries in this shipping zone. */
  countries?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Default shipping zone will be used for countries not covered by other zones. */
  default?: InputMaybe<Scalars['Boolean']['input']>;
  /** Description of the shipping zone. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Shipping zone's name. Visible only to the staff. */
  name?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new shipping zone is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingZoneCreated = SaleorGraphql_Event & {
  __typename?: 'ShippingZoneCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping zone the event relates to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when new shipping zone is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingZoneCreatedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a shipping zone.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingZoneDelete = {
  __typename?: 'ShippingZoneDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
};

/**
 * Event sent when shipping zone is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingZoneDeleted = SaleorGraphql_Event & {
  __typename?: 'ShippingZoneDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping zone the event relates to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when shipping zone is deleted.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingZoneDeletedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_ShippingZoneFilterInput = {
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when shipping zone metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_ShippingZoneMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'ShippingZoneMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping zone the event relates to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when shipping zone metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_ShippingZoneMetadataUpdatedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Updates a new shipping zone.
 *
 * Requires one of the following permissions: MANAGE_SHIPPING.
 */
export type SaleorGraphql_ShippingZoneUpdate = {
  __typename?: 'ShippingZoneUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shippingErrors: Array<FieldWrapper<SaleorGraphql_ShippingError>>;
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
};

export type SaleorGraphql_ShippingZoneUpdateInput = {
  /** List of channels to assign to the shipping zone. */
  addChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of warehouses to assign to a shipping zone */
  addWarehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of countries in this shipping zone. */
  countries?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Default shipping zone will be used for countries not covered by other zones. */
  default?: InputMaybe<Scalars['Boolean']['input']>;
  /** Description of the shipping zone. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Shipping zone's name. Visible only to the staff. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** List of channels to unassign from the shipping zone. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** List of warehouses to unassign from a shipping zone */
  removeWarehouses?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Event sent when shipping zone is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingZoneUpdated = SaleorGraphql_Event & {
  __typename?: 'ShippingZoneUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The shipping zone the event relates to. */
  shippingZone?: Maybe<FieldWrapper<SaleorGraphql_ShippingZone>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};


/**
 * Event sent when shipping zone is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_ShippingZoneUpdatedShippingZoneArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_Shop = SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Shop';
  /**
   * Determines if user can login without confirmation when `enableAccountConfrimation` is enabled.
   *
   * Added in Saleor 3.15.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  allowLoginWithoutConfirmation?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /**
   * Enable automatic fulfillment for all digital products.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  automaticFulfillmentDigitalProducts?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** List of available external authentications. */
  availableExternalAuthentications: Array<FieldWrapper<SaleorGraphql_ExternalAuthentication>>;
  /** List of available payment gateways. */
  availablePaymentGateways: Array<FieldWrapper<SaleorGraphql_PaymentGateway>>;
  /** Shipping methods that are available for the shop. */
  availableShippingMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_ShippingMethod>>>;
  /**
   * List of tax apps that can be assigned to the channel. The list will be calculated by Saleor based on the apps that are subscribed to webhooks related to tax calculations: CHECKOUT_CALCULATE_TAXES
   *
   * Added in Saleor 3.19.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, MANAGE_APPS.
   */
  availableTaxApps: Array<FieldWrapper<SaleorGraphql_App>>;
  /**
   * List of all currencies supported by shop's channels.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  channelCurrencies: Array<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Charge taxes on shipping.
   * @deprecated This field will be removed in Saleor 4.0. Use `ShippingMethodType.taxClass` to determine whether taxes are calculated for shipping methods; if a tax class is set, the taxes will be calculated, otherwise no tax rate will be applied.
   */
  chargeTaxesOnShipping: FieldWrapper<Scalars['Boolean']['output']>;
  /** Company address. */
  companyAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** List of countries available in the shop. */
  countries: Array<FieldWrapper<SaleorGraphql_CountryDisplay>>;
  /** URL of a view where customers can set their password. */
  customerSetPasswordUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop's default country. */
  defaultCountry?: Maybe<FieldWrapper<SaleorGraphql_CountryDisplay>>;
  /**
   * Default number of max downloads per digital content URL.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  defaultDigitalMaxDownloads?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Default number of days which digital content URL will be valid.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  defaultDigitalUrlValidDays?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Default shop's email sender's address.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  defaultMailSenderAddress?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Default shop's email sender's name.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  defaultMailSenderName?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Default weight unit. */
  defaultWeightUnit?: Maybe<FieldWrapper<SaleorGraphql_WeightUnitsEnum | '%future added value'>>;
  /** Shop's description. */
  description?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Display prices with tax in store.
   * @deprecated This field will be removed in Saleor 4.0. Use `Channel.taxConfiguration` to determine whether to display gross or net prices.
   */
  displayGrossPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /** Shop's domain data. */
  domain: FieldWrapper<SaleorGraphql_Domain>;
  /**
   * Determines if account confirmation by email is enabled.
   *
   * Added in Saleor 3.14.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  enableAccountConfirmationByEmail?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /**
   * Allow to approve fulfillments which are unpaid.
   *
   * Added in Saleor 3.1.
   */
  fulfillmentAllowUnpaid: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Automatically approve all new fulfillments.
   *
   * Added in Saleor 3.1.
   */
  fulfillmentAutoApprove: FieldWrapper<Scalars['Boolean']['output']>;
  /** Header text. */
  headerText?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** ID of the shop. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Include taxes in prices.
   * @deprecated This field will be removed in Saleor 4.0. Use `Channel.taxConfiguration.pricesEnteredWithTax` to determine whether prices are entered with tax.
   */
  includeTaxesInPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of the shops's supported languages. */
  languages: Array<FieldWrapper<SaleorGraphql_LanguageDisplay>>;
  /**
   * Default number of maximum line quantity in single checkout (per single checkout line).
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  limitQuantityPerCheckout?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Resource limitations and current usage if any set for a shop
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
   */
  limits: FieldWrapper<SaleorGraphql_LimitInfo>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Public metadata. Use `keys` to control which fields you want to include. The default is to include everything. */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Shop's name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of available permissions. */
  permissions: Array<FieldWrapper<SaleorGraphql_Permission>>;
  /** List of possible phone prefixes. */
  phonePrefixes: Array<FieldWrapper<Scalars['String']['output']>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything. */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Default number of minutes stock will be reserved for anonymous checkout or null when stock reservation is disabled.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  reserveStockDurationAnonymousUser?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Default number of minutes stock will be reserved for authenticated checkout or null when stock reservation is disabled.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  reserveStockDurationAuthenticatedUser?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /**
   * Minor Saleor API version.
   *
   * Added in Saleor 3.5.
   */
  schemaVersion: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of staff notification recipients.
   *
   * Requires one of the following permissions: MANAGE_SETTINGS.
   */
  staffNotificationRecipients?: Maybe<Array<FieldWrapper<SaleorGraphql_StaffNotificationRecipient>>>;
  /** This field is used as a default value for `ProductVariant.trackInventory`. */
  trackInventoryByDefault?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Returns translated shop fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_ShopTranslation>>;
  /**
   * Saleor API version.
   *
   * Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP.
   */
  version: FieldWrapper<Scalars['String']['output']>;
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopAvailablePaymentGatewaysArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopAvailableShippingMethodsArgs = {
  address?: InputMaybe<SaleorGraphql_AddressInput>;
  channel: Scalars['String']['input'];
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopCountriesArgs = {
  filter?: InputMaybe<SaleorGraphql_CountryFilterInput>;
  languageCode?: InputMaybe<SaleorGraphql_LanguageCodeEnum>;
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents a shop resource containing general shop data and configuration. */
export type SaleorGraphql_ShopTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Update the shop's address. If the `null` value is passed, the currently selected address will be deleted.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 */
export type SaleorGraphql_ShopAddressUpdate = {
  __typename?: 'ShopAddressUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** Updated shop. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
};

/**
 * Updates site domain of the shop.
 *
 * DEPRECATED: this mutation will be removed in Saleor 4.0. Use `PUBLIC_URL` environment variable instead.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 */
export type SaleorGraphql_ShopDomainUpdate = {
  __typename?: 'ShopDomainUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** Updated shop. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
};

export type SaleorGraphql_ShopError = {
  __typename?: 'ShopError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_ShopErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_ShopErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  CannotFetchTaxRates = 'CANNOT_FETCH_TAX_RATES',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

/**
 * Fetch tax rates.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 */
export type SaleorGraphql_ShopFetchTaxRates = {
  __typename?: 'ShopFetchTaxRates';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** Updated shop. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
};

/**
 * Event sent when shop metadata is updated.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_ShopMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'ShopMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_ShopSettingsInput = {
  /**
   * Enable possibility to login without account confirmation.
   *
   * Added in Saleor 3.15.
   */
  allowLoginWithoutConfirmation?: InputMaybe<Scalars['Boolean']['input']>;
  /** Enable automatic fulfillment for all digital products. */
  automaticFulfillmentDigitalProducts?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Charge taxes on shipping.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. To enable taxes for a shipping method, assign a tax class to the shipping method with `shippingPriceCreate` or `shippingPriceUpdate` mutations.
   */
  chargeTaxesOnShipping?: InputMaybe<Scalars['Boolean']['input']>;
  /** URL of a view where customers can set their password. */
  customerSetPasswordUrl?: InputMaybe<Scalars['String']['input']>;
  /** Default number of max downloads per digital content URL. */
  defaultDigitalMaxDownloads?: InputMaybe<Scalars['Int']['input']>;
  /** Default number of days which digital content URL will be valid. */
  defaultDigitalUrlValidDays?: InputMaybe<Scalars['Int']['input']>;
  /** Default email sender's address. */
  defaultMailSenderAddress?: InputMaybe<Scalars['String']['input']>;
  /** Default email sender's name. */
  defaultMailSenderName?: InputMaybe<Scalars['String']['input']>;
  /** Default weight unit. */
  defaultWeightUnit?: InputMaybe<SaleorGraphql_WeightUnitsEnum | '%future added value'>;
  /** SEO description. */
  description?: InputMaybe<Scalars['String']['input']>;
  /**
   * Display prices with tax in store.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `taxConfigurationUpdate` mutation to configure this setting per channel or country.
   */
  displayGrossPrices?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Enable automatic account confirmation by email.
   *
   * Added in Saleor 3.14.
   */
  enableAccountConfirmationByEmail?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Enable ability to approve fulfillments which are unpaid.
   *
   * Added in Saleor 3.1.
   */
  fulfillmentAllowUnpaid?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Enable automatic approval of all new fulfillments.
   *
   * Added in Saleor 3.1.
   */
  fulfillmentAutoApprove?: InputMaybe<Scalars['Boolean']['input']>;
  /** Header text. */
  headerText?: InputMaybe<Scalars['String']['input']>;
  /**
   * Include taxes in prices.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `taxConfigurationUpdate` mutation to configure this setting per channel or country.
   */
  includeTaxesInPrices?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * Default number of maximum line quantity in single checkout. Minimum possible value is 1, default value is 50.
   *
   * Added in Saleor 3.1.
   */
  limitQuantityPerCheckout?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Shop public metadata.
   *
   * Added in Saleor 3.15.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Shop private metadata.
   *
   * Added in Saleor 3.15.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Default number of minutes stock will be reserved for anonymous checkout. Enter 0 or null to disable.
   *
   * Added in Saleor 3.1.
   */
  reserveStockDurationAnonymousUser?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Default number of minutes stock will be reserved for authenticated checkout. Enter 0 or null to disable.
   *
   * Added in Saleor 3.1.
   */
  reserveStockDurationAuthenticatedUser?: InputMaybe<Scalars['Int']['input']>;
  /** This field is used as a default value for `ProductVariant.trackInventory`. */
  trackInventoryByDefault?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Creates/updates translations for shop settings.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_ShopSettingsTranslate = {
  __typename?: 'ShopSettingsTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  /** Updated shop settings. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
};

export type SaleorGraphql_ShopSettingsTranslationInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  headerText?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Updates shop settings.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 *
 * Triggers the following webhook events:
 * - SHOP_METADATA_UPDATED (async): Optionally triggered when public or private metadata is updated.
 */
export type SaleorGraphql_ShopSettingsUpdate = {
  __typename?: 'ShopSettingsUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** Updated shop. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
};

/** Represents shop translations. */
export type SaleorGraphql_ShopTranslation = SaleorGraphql_Node & {
  __typename?: 'ShopTranslation';
  /** Translated description of sale. */
  description: FieldWrapper<Scalars['String']['output']>;
  /** Translated header text of sale. */
  headerText: FieldWrapper<Scalars['String']['output']>;
  /** The ID of the shop translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
};

export type SaleorGraphql_SiteDomainInput = {
  /** Domain name for shop. */
  domain?: InputMaybe<Scalars['String']['input']>;
  /** Shop site name. */
  name?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes staff users. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - STAFF_DELETED (async): A staff account was deleted.
 */
export type SaleorGraphql_StaffBulkDelete = {
  __typename?: 'StaffBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  staffErrors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
};

/**
 * Creates a new staff user. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - STAFF_CREATED (async): A new staff account was created.
 * - NOTIFY_USER (async): A notification for setting the password.
 * - STAFF_SET_PASSWORD_REQUESTED (async): Setting a new password for the staff account is requested.
 */
export type SaleorGraphql_StaffCreate = {
  __typename?: 'StaffCreate';
  errors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  staffErrors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Fields required to create a staff user. */
export type SaleorGraphql_StaffCreateInput = {
  /** List of permission group IDs to which user should be assigned. */
  addGroups?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** The unique email address of the user. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User account is active. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** A note about the user. */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user private metadata.
   *
   * Added in Saleor 3.14.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of a view where users should be redirected to set the password. URL in RFC 1808 format. */
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new staff user is created.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_StaffCreated = SaleorGraphql_Event & {
  __typename?: 'StaffCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Deletes a staff user. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - STAFF_DELETED (async): A staff account was deleted.
 */
export type SaleorGraphql_StaffDelete = {
  __typename?: 'StaffDelete';
  errors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  staffErrors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Event sent when staff user is deleted.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_StaffDeleted = SaleorGraphql_Event & {
  __typename?: 'StaffDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_StaffError = {
  __typename?: 'StaffError';
  /** A type of address that causes the error. */
  addressType?: Maybe<FieldWrapper<SaleorGraphql_AddressTypeEnum | '%future added value'>>;
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_AccountErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of permission group IDs which cause the error. */
  groups?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of permissions which causes the error. */
  permissions?: Maybe<Array<FieldWrapper<SaleorGraphql_PermissionEnum | '%future added value'>>>;
  /** List of user IDs which causes the error. */
  users?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** Represents status of a staff account. */
export enum SaleorGraphql_StaffMemberStatus {
  /** User account has been activated. */
  Active = 'ACTIVE',
  /** User account has not been activated yet. */
  Deactivated = 'DEACTIVATED'
}

/** Represents a recipient of email notifications send by Saleor, such as notifications about new orders. Notifications can be assigned to staff users or arbitrary email addresses. */
export type SaleorGraphql_StaffNotificationRecipient = SaleorGraphql_Node & {
  __typename?: 'StaffNotificationRecipient';
  /** Determines if a notification active. */
  active?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Returns email address of a user subscribed to email notifications. */
  email?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the staff notification recipient. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Returns a user subscribed to email notifications. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Creates a new staff notification recipient.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 */
export type SaleorGraphql_StaffNotificationRecipientCreate = {
  __typename?: 'StaffNotificationRecipientCreate';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  staffNotificationRecipient?: Maybe<FieldWrapper<SaleorGraphql_StaffNotificationRecipient>>;
};

/**
 * Delete staff notification recipient.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 */
export type SaleorGraphql_StaffNotificationRecipientDelete = {
  __typename?: 'StaffNotificationRecipientDelete';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  staffNotificationRecipient?: Maybe<FieldWrapper<SaleorGraphql_StaffNotificationRecipient>>;
};

export type SaleorGraphql_StaffNotificationRecipientInput = {
  /** Determines if a notification active. */
  active?: InputMaybe<Scalars['Boolean']['input']>;
  /** Email address of a user subscribed to email notifications. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the user subscribed to email notifications.. */
  user?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Updates a staff notification recipient.
 *
 * Requires one of the following permissions: MANAGE_SETTINGS.
 */
export type SaleorGraphql_StaffNotificationRecipientUpdate = {
  __typename?: 'StaffNotificationRecipientUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  shopErrors: Array<FieldWrapper<SaleorGraphql_ShopError>>;
  staffNotificationRecipient?: Maybe<FieldWrapper<SaleorGraphql_StaffNotificationRecipient>>;
};

/**
 * Event sent when setting a new password for staff is requested.
 *
 * Added in Saleor 3.15.
 */
export type SaleorGraphql_StaffSetPasswordRequested = SaleorGraphql_Event & {
  __typename?: 'StaffSetPasswordRequested';
  /** The channel data. */
  channel?: Maybe<FieldWrapper<SaleorGraphql_Channel>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The URL to redirect the user after he accepts the request. */
  redirectUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Shop data. */
  shop?: Maybe<FieldWrapper<SaleorGraphql_Shop>>;
  /** The token required to confirm request. */
  token?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Updates an existing staff user. Apps are not allowed to perform this mutation.
 *
 * Requires one of the following permissions: MANAGE_STAFF.
 *
 * Triggers the following webhook events:
 * - STAFF_UPDATED (async): A staff account was updated.
 */
export type SaleorGraphql_StaffUpdate = {
  __typename?: 'StaffUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  staffErrors: Array<FieldWrapper<SaleorGraphql_StaffError>>;
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** Fields required to update a staff user. */
export type SaleorGraphql_StaffUpdateInput = {
  /** List of permission group IDs to which user should be assigned. */
  addGroups?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** The unique email address of the user. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User account is active. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** A note about the user. */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user private metadata.
   *
   * Added in Saleor 3.14.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** List of permission group IDs from which user should be unassigned. */
  removeGroups?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Event sent when staff user is updated.
 *
 * Added in Saleor 3.5.
 */
export type SaleorGraphql_StaffUpdated = SaleorGraphql_Event & {
  __typename?: 'StaffUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user the event relates to. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_StaffUserInput = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<SaleorGraphql_StaffMemberStatus | '%future added value'>;
};

/** Represents stock. */
export type SaleorGraphql_Stock = SaleorGraphql_Node & {
  __typename?: 'Stock';
  /** The ID of stock. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Information about the product variant. */
  productVariant: FieldWrapper<SaleorGraphql_ProductVariant>;
  /**
   * Quantity of a product in the warehouse's possession, including the allocated stock that is waiting for shipment.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /**
   * Quantity allocated for orders.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  quantityAllocated: FieldWrapper<Scalars['Int']['output']>;
  /**
   * Quantity reserved for checkouts.
   *
   * Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS.
   */
  quantityReserved: FieldWrapper<Scalars['Int']['output']>;
  /** The warehouse associated with the stock. */
  warehouse: FieldWrapper<SaleorGraphql_Warehouse>;
};

export enum SaleorGraphql_StockAvailability {
  InStock = 'IN_STOCK',
  OutOfStock = 'OUT_OF_STOCK'
}

export type SaleorGraphql_StockBulkResult = {
  __typename?: 'StockBulkResult';
  /** List of errors occurred on create or update attempt. */
  errors?: Maybe<Array<FieldWrapper<SaleorGraphql_StockBulkUpdateError>>>;
  /** Stock data. */
  stock?: Maybe<FieldWrapper<SaleorGraphql_Stock>>;
};

/**
 * Updates stocks for a given variant and warehouse. Variant and warehouse selectors have to be the same for all stock inputs. Is not allowed to use 'variantId' in one input and 'variantExternalReference' in another.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 *
 * Triggers the following webhook events:
 * - PRODUCT_VARIANT_STOCK_UPDATED (async): A product variant stock details were updated.
 */
export type SaleorGraphql_StockBulkUpdate = {
  __typename?: 'StockBulkUpdate';
  /** Returns how many objects were updated. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_StockBulkUpdateError>>;
  /** List of the updated stocks. */
  results: Array<FieldWrapper<SaleorGraphql_StockBulkResult>>;
};

export type SaleorGraphql_StockBulkUpdateError = {
  __typename?: 'StockBulkUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_StockBulkUpdateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_StockBulkUpdateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

export type SaleorGraphql_StockBulkUpdateInput = {
  /** Quantity of items available for sell. */
  quantity: Scalars['Int']['input'];
  /** Variant external reference. */
  variantExternalReference?: InputMaybe<Scalars['String']['input']>;
  /** Variant ID. */
  variantId?: InputMaybe<Scalars['ID']['input']>;
  /** Warehouse external reference. */
  warehouseExternalReference?: InputMaybe<Scalars['String']['input']>;
  /** Warehouse ID. */
  warehouseId?: InputMaybe<Scalars['ID']['input']>;
};

export type SaleorGraphql_StockCountableConnection = {
  __typename?: 'StockCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_StockCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_StockCountableEdge = {
  __typename?: 'StockCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Stock>;
};

export type SaleorGraphql_StockError = {
  __typename?: 'StockError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_StockErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_StockErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_StockFilterInput = {
  quantity?: InputMaybe<Scalars['Float']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_StockInput = {
  /** Quantity of items available for sell. */
  quantity: Scalars['Int']['input'];
  /** Warehouse in which stock is located. */
  warehouse: Scalars['ID']['input'];
};

/**
 * Represents the channel stock settings.
 *
 * Added in Saleor 3.7.
 */
export type SaleorGraphql_StockSettings = {
  __typename?: 'StockSettings';
  /** Allocation strategy defines the preference of warehouses for allocations and reservations. */
  allocationStrategy: FieldWrapper<SaleorGraphql_AllocationStrategyEnum | '%future added value'>;
};

export type SaleorGraphql_StockSettingsInput = {
  /** Allocation strategy options. Strategy defines the preference of warehouses for allocations and reservations. */
  allocationStrategy: SaleorGraphql_AllocationStrategyEnum | '%future added value';
};

export type SaleorGraphql_StockUpdateInput = {
  /** Quantity of items available for sell. */
  quantity: Scalars['Int']['input'];
  /** Stock. */
  stock: Scalars['ID']['input'];
};

/**
 * Determine how stocks should be updated, while processing an order.
 *
 *     SKIP - stocks are not checked and not updated.
 *     UPDATE - only do update, if there is enough stock.
 *     FORCE - force update, if there is not enough stock.
 */
export enum SaleorGraphql_StockUpdatePolicyEnum {
  Force = 'FORCE',
  Skip = 'SKIP',
  Update = 'UPDATE'
}

/** Enum representing the type of a payment storage in a gateway. */
export enum SaleorGraphql_StorePaymentMethodEnum {
  /** Storage is disabled. The payment is not stored. */
  None = 'NONE',
  /** Off session storage type. The payment is stored to be reused even if the customer is absent. */
  OffSession = 'OFF_SESSION',
  /** On session storage type. The payment is stored only to be reused when the customer is present in the checkout flow. */
  OnSession = 'ON_SESSION'
}

/**
 * Represents a payment method stored for user (tokenized) in payment gateway.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_StoredPaymentMethod = {
  __typename?: 'StoredPaymentMethod';
  /** Stored credit card details if available. */
  creditCardInfo?: Maybe<FieldWrapper<SaleorGraphql_CreditCard>>;
  /** JSON data returned by Payment Provider app for this payment method. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** Payment gateway that stores this payment method. */
  gateway: FieldWrapper<SaleorGraphql_PaymentGateway>;
  /** Stored payment method ID. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Payment method name. Example: last 4 digits of credit card, obfuscated email, etc. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** ID of stored payment method used to make payment actions. Note: method ID is unique only within the payment gateway. */
  paymentMethodId: FieldWrapper<Scalars['String']['output']>;
  supportedPaymentFlows?: Maybe<Array<FieldWrapper<SaleorGraphql_TokenizedPaymentFlowEnum | '%future added value'>>>;
  /** Type of the payment method. Example: credit card, wallet, etc. */
  type: FieldWrapper<Scalars['String']['output']>;
};

/**
 * Event sent when user requests to delete a payment method.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_StoredPaymentMethodDeleteRequested = SaleorGraphql_Event & {
  __typename?: 'StoredPaymentMethodDeleteRequested';
  /** Channel related to the requested delete action. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The ID of the payment method that should be deleted by the payment gateway. */
  paymentMethodId: FieldWrapper<Scalars['String']['output']>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The user for which the app should proceed with payment method delete request. */
  user: FieldWrapper<SaleorGraphql_User>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Request to delete a stored payment method on payment provider side.
 *
 * Added in Saleor 3.16.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_USER.
 *
 * Triggers the following webhook events:
 * - STORED_PAYMENT_METHOD_DELETE_REQUESTED (sync): The customer requested to delete a payment method.
 */
export type SaleorGraphql_StoredPaymentMethodRequestDelete = {
  __typename?: 'StoredPaymentMethodRequestDelete';
  errors: Array<FieldWrapper<SaleorGraphql_PaymentMethodRequestDeleteError>>;
  /** The result of deleting a stored payment method. */
  result: FieldWrapper<SaleorGraphql_StoredPaymentMethodRequestDeleteResult | '%future added value'>;
};

/** An enumeration. */
export enum SaleorGraphql_StoredPaymentMethodRequestDeleteErrorCode {
  ChannelInactive = 'CHANNEL_INACTIVE',
  GatewayError = 'GATEWAY_ERROR',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Result of deleting a stored payment method.
 *
 *     This enum is used to determine the result of deleting a stored payment method.
 *     SUCCESSFULLY_DELETED - The stored payment method was successfully deleted.
 *     FAILED_TO_DELETE - The stored payment method was not deleted.
 *     FAILED_TO_DELIVER - The request to delete the stored payment method was not
 *     delivered.
 */
export enum SaleorGraphql_StoredPaymentMethodRequestDeleteResult {
  FailedToDelete = 'FAILED_TO_DELETE',
  FailedToDeliver = 'FAILED_TO_DELIVER',
  SuccessfullyDeleted = 'SUCCESSFULLY_DELETED'
}

/**
 * Define the filtering options for string fields.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_StringFilterInput = {
  /** The value equal to. */
  eq?: InputMaybe<Scalars['String']['input']>;
  /** The value included in. */
  oneOf?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_Subscription = {
  __typename?: 'Subscription';
  /**
   * Look up subscription event.
   *
   * Added in Saleor 3.2.
   */
  event?: Maybe<FieldWrapper<SaleorGraphql_Event>>;
};

export enum SaleorGraphql_TaxCalculationStrategy {
  FlatRates = 'FLAT_RATES',
  TaxApp = 'TAX_APP'
}

/**
 * Tax class is a named object used to define tax rates per country. Tax class can be assigned to product types, products and shipping methods to define their tax rates.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxClass = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'TaxClass';
  /** Country-specific tax rates for this tax class. */
  countries: Array<FieldWrapper<SaleorGraphql_TaxClassCountryRate>>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Name of the tax class. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
};


/**
 * Tax class is a named object used to define tax rates per country. Tax class can be assigned to product types, products and shipping methods to define their tax rates.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxClassMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Tax class is a named object used to define tax rates per country. Tax class can be assigned to product types, products and shipping methods to define their tax rates.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxClassMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Tax class is a named object used to define tax rates per country. Tax class can be assigned to product types, products and shipping methods to define their tax rates.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxClassPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Tax class is a named object used to define tax rates per country. Tax class can be assigned to product types, products and shipping methods to define their tax rates.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxClassPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_TaxClassCountableConnection = {
  __typename?: 'TaxClassCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_TaxClassCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_TaxClassCountableEdge = {
  __typename?: 'TaxClassCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_TaxClass>;
};

/**
 * Tax rate for a country. When tax class is null, it represents the default tax rate for that country; otherwise it's a country tax rate specific to the given tax class.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxClassCountryRate = {
  __typename?: 'TaxClassCountryRate';
  /** Country in which this tax rate applies. */
  country: FieldWrapper<SaleorGraphql_CountryDisplay>;
  /** Tax rate value. */
  rate: FieldWrapper<Scalars['Float']['output']>;
  /** Related tax class. */
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
};

/**
 * Create a tax class.
 *
 * Added in Saleor 3.9.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxClassCreate = {
  __typename?: 'TaxClassCreate';
  errors: Array<FieldWrapper<SaleorGraphql_TaxClassCreateError>>;
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
};

export type SaleorGraphql_TaxClassCreateError = {
  __typename?: 'TaxClassCreateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxClassCreateErrorCode | '%future added value'>;
  /** List of country codes for which the configuration is invalid. */
  countryCodes: Array<FieldWrapper<Scalars['String']['output']>>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxClassCreateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

export type SaleorGraphql_TaxClassCreateInput = {
  /** List of country-specific tax rates to create for this tax class. */
  createCountryRates?: InputMaybe<Array<SaleorGraphql_CountryRateInput>>;
  /** Name of the tax class. */
  name: Scalars['String']['input'];
};

/**
 * Delete a tax class. After deleting the tax class any products, product types or shipping methods using it are updated to use the default tax class.
 *
 * Added in Saleor 3.9.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxClassDelete = {
  __typename?: 'TaxClassDelete';
  errors: Array<FieldWrapper<SaleorGraphql_TaxClassDeleteError>>;
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
};

export type SaleorGraphql_TaxClassDeleteError = {
  __typename?: 'TaxClassDeleteError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxClassDeleteErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxClassDeleteErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

export type SaleorGraphql_TaxClassFilterInput = {
  countries?: InputMaybe<Array<SaleorGraphql_CountryCode | '%future added value'>>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
};

export type SaleorGraphql_TaxClassRateInput = {
  /** Tax rate value. */
  rate?: InputMaybe<Scalars['Float']['input']>;
  /** ID of a tax class for which to update the tax rate */
  taxClassId?: InputMaybe<Scalars['ID']['input']>;
};

export enum SaleorGraphql_TaxClassSortField {
  /** Sort tax classes by name. */
  Name = 'NAME'
}

export type SaleorGraphql_TaxClassSortingInput = {
  /** Specifies the direction in which to sort tax classes. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort tax classes by the selected field. */
  field: SaleorGraphql_TaxClassSortField | '%future added value';
};

/**
 * Update a tax class.
 *
 * Added in Saleor 3.9.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxClassUpdate = {
  __typename?: 'TaxClassUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_TaxClassUpdateError>>;
  taxClass?: Maybe<FieldWrapper<SaleorGraphql_TaxClass>>;
};

export type SaleorGraphql_TaxClassUpdateError = {
  __typename?: 'TaxClassUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxClassUpdateErrorCode | '%future added value'>;
  /** List of country codes for which the configuration is invalid. */
  countryCodes: Array<FieldWrapper<Scalars['String']['output']>>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxClassUpdateErrorCode {
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

export type SaleorGraphql_TaxClassUpdateInput = {
  /** Name of the tax class. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** List of country codes for which to remove the tax class rates. Note: It removes all rates for given country code. */
  removeCountryRates?: InputMaybe<Array<SaleorGraphql_CountryCode | '%future added value'>>;
  /** List of country-specific tax rates to create or update for this tax class. */
  updateCountryRates?: InputMaybe<Array<SaleorGraphql_CountryRateUpdateInput>>;
};

/**
 * Channel-specific tax configuration.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxConfiguration = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'TaxConfiguration';
  /** A channel to which the tax configuration applies to. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Determines whether taxes are charged in the given channel. */
  chargeTaxes: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of country-specific exceptions in tax configuration. */
  countries: Array<FieldWrapper<SaleorGraphql_TaxConfigurationPerCountry>>;
  /** Determines whether displayed prices should include taxes. */
  displayGrossPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Determines whether prices are entered with the tax included. */
  pricesEnteredWithTax: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * The tax app `App.identifier` that will be used to calculate the taxes for the given channel. Empty value for `TAX_APP` set as `taxCalculationStrategy` means that Saleor will iterate over all installed tax apps. If multiple tax apps exist with provided tax app id use the `App` with newest `created` date. Will become mandatory in 4.0 for `TAX_APP` `taxCalculationStrategy`.
   *
   * Added in Saleor 3.19.
   */
  taxAppId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The default strategy to use for tax calculation in the given channel. Taxes can be calculated either using user-defined flat rates or with a tax app. Empty value means that no method is selected and taxes are not calculated. */
  taxCalculationStrategy?: Maybe<FieldWrapper<SaleorGraphql_TaxCalculationStrategy | '%future added value'>>;
};


/**
 * Channel-specific tax configuration.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxConfigurationMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Channel-specific tax configuration.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxConfigurationMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Channel-specific tax configuration.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxConfigurationPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Channel-specific tax configuration.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxConfigurationPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SaleorGraphql_TaxConfigurationCountableConnection = {
  __typename?: 'TaxConfigurationCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_TaxConfigurationCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_TaxConfigurationCountableEdge = {
  __typename?: 'TaxConfigurationCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_TaxConfiguration>;
};

export type SaleorGraphql_TaxConfigurationFilterInput = {
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
};

/**
 * Country-specific exceptions of a channel's tax configuration.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxConfigurationPerCountry = {
  __typename?: 'TaxConfigurationPerCountry';
  /** Determines whether taxes are charged in this country. */
  chargeTaxes: FieldWrapper<Scalars['Boolean']['output']>;
  /** Country in which this configuration applies. */
  country: FieldWrapper<SaleorGraphql_CountryDisplay>;
  /** Determines whether displayed prices should include taxes for this country. */
  displayGrossPrices: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * The tax app `App.identifier` that will be used to calculate the taxes for the given channel and country. If not provided, use the value from the channel's tax configuration.
   *
   * Added in Saleor 3.19.
   */
  taxAppId?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** A country-specific strategy to use for tax calculation. Taxes can be calculated either using user-defined flat rates or with a tax app. If not provided, use the value from the channel's tax configuration. */
  taxCalculationStrategy?: Maybe<FieldWrapper<SaleorGraphql_TaxCalculationStrategy | '%future added value'>>;
};

export type SaleorGraphql_TaxConfigurationPerCountryInput = {
  /** Determines whether taxes are charged in this country. */
  chargeTaxes: Scalars['Boolean']['input'];
  /** Country in which this configuration applies. */
  countryCode: SaleorGraphql_CountryCode | '%future added value';
  /** Determines whether displayed prices should include taxes for this country. */
  displayGrossPrices: Scalars['Boolean']['input'];
  /**
   * The tax app `App.identifier` that will be used to calculate the taxes for the given channel and country. If not provided, use the value from the channel's tax configuration.
   *
   * Added in Saleor 3.19.
   */
  taxAppId?: InputMaybe<Scalars['String']['input']>;
  /** A country-specific strategy to use for tax calculation. Taxes can be calculated either using user-defined flat rates or with a tax app. If not provided, use the value from the channel's tax configuration. */
  taxCalculationStrategy?: InputMaybe<SaleorGraphql_TaxCalculationStrategy | '%future added value'>;
};

/**
 * Update tax configuration for a channel.
 *
 * Added in Saleor 3.9.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxConfigurationUpdate = {
  __typename?: 'TaxConfigurationUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_TaxConfigurationUpdateError>>;
  taxConfiguration?: Maybe<FieldWrapper<SaleorGraphql_TaxConfiguration>>;
};

export type SaleorGraphql_TaxConfigurationUpdateError = {
  __typename?: 'TaxConfigurationUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxConfigurationUpdateErrorCode | '%future added value'>;
  /** List of country codes for which the configuration is invalid. */
  countryCodes: Array<FieldWrapper<Scalars['String']['output']>>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxConfigurationUpdateErrorCode {
  DuplicatedInputItem = 'DUPLICATED_INPUT_ITEM',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

export type SaleorGraphql_TaxConfigurationUpdateInput = {
  /** Determines whether taxes are charged in the given channel. */
  chargeTaxes?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines whether displayed prices should include taxes. */
  displayGrossPrices?: InputMaybe<Scalars['Boolean']['input']>;
  /** Determines whether prices are entered with the tax included. */
  pricesEnteredWithTax?: InputMaybe<Scalars['Boolean']['input']>;
  /** List of country codes for which to remove the tax configuration. */
  removeCountriesConfiguration?: InputMaybe<Array<SaleorGraphql_CountryCode | '%future added value'>>;
  /**
   * The tax app `App.identifier` that will be used to calculate the taxes for the given channel. Empty value for `TAX_APP` set as `taxCalculationStrategy` means that Saleor will iterate over all installed tax apps. If multiple tax apps exist with provided tax app id use the `App` with newest `created` date. It's possible to set plugin by using prefix `plugin:` with `PLUGIN_ID` e.g. with Avalara `plugin:mirumee.taxes.avalara`.Will become mandatory in 4.0 for `TAX_APP` `taxCalculationStrategy`.
   *
   * Added in Saleor 3.19.
   */
  taxAppId?: InputMaybe<Scalars['String']['input']>;
  /** The default strategy to use for tax calculation in the given channel. Taxes can be calculated either using user-defined flat rates or with a tax app. Empty value means that no method is selected and taxes are not calculated. */
  taxCalculationStrategy?: InputMaybe<SaleorGraphql_TaxCalculationStrategy | '%future added value'>;
  /** List of tax country configurations to create or update (identified by a country code). */
  updateCountriesConfiguration?: InputMaybe<Array<SaleorGraphql_TaxConfigurationPerCountryInput>>;
};

/**
 * Tax class rates grouped by country.
 *
 * Added in Saleor 3.9.
 */
export type SaleorGraphql_TaxCountryConfiguration = {
  __typename?: 'TaxCountryConfiguration';
  /** A country for which tax class rates are grouped. */
  country: FieldWrapper<SaleorGraphql_CountryDisplay>;
  /** List of tax class rates. */
  taxClassCountryRates: Array<FieldWrapper<SaleorGraphql_TaxClassCountryRate>>;
};

/**
 * Remove all tax class rates for a specific country.
 *
 * Added in Saleor 3.9.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxCountryConfigurationDelete = {
  __typename?: 'TaxCountryConfigurationDelete';
  errors: Array<FieldWrapper<SaleorGraphql_TaxCountryConfigurationDeleteError>>;
  /** Updated tax class rates grouped by a country. */
  taxCountryConfiguration?: Maybe<FieldWrapper<SaleorGraphql_TaxCountryConfiguration>>;
};

export type SaleorGraphql_TaxCountryConfigurationDeleteError = {
  __typename?: 'TaxCountryConfigurationDeleteError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxCountryConfigurationDeleteErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxCountryConfigurationDeleteErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Update tax class rates for a specific country.
 *
 * Added in Saleor 3.9.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxCountryConfigurationUpdate = {
  __typename?: 'TaxCountryConfigurationUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_TaxCountryConfigurationUpdateError>>;
  /** Updated tax class rates grouped by a country. */
  taxCountryConfiguration?: Maybe<FieldWrapper<SaleorGraphql_TaxCountryConfiguration>>;
};

export type SaleorGraphql_TaxCountryConfigurationUpdateError = {
  __typename?: 'TaxCountryConfigurationUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxCountryConfigurationUpdateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of tax class IDs for which the update failed. */
  taxClassIds: Array<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxCountryConfigurationUpdateErrorCode {
  CannotCreateNegativeRate = 'CANNOT_CREATE_NEGATIVE_RATE',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  OnlyOneDefaultCountryRateAllowed = 'ONLY_ONE_DEFAULT_COUNTRY_RATE_ALLOWED'
}

/**
 * Exempt checkout or order from charging the taxes. When tax exemption is enabled, taxes won't be charged for the checkout or order. Taxes may still be calculated in cases when product prices are entered with the tax included and the net price needs to be known.
 *
 * Added in Saleor 3.8.
 *
 * Requires one of the following permissions: MANAGE_TAXES.
 */
export type SaleorGraphql_TaxExemptionManage = {
  __typename?: 'TaxExemptionManage';
  errors: Array<FieldWrapper<SaleorGraphql_TaxExemptionManageError>>;
  taxableObject?: Maybe<FieldWrapper<SaleorGraphql_TaxSourceObject>>;
};

export type SaleorGraphql_TaxExemptionManageError = {
  __typename?: 'TaxExemptionManageError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TaxExemptionManageErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TaxExemptionManageErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotEditableOrder = 'NOT_EDITABLE_ORDER',
  NotFound = 'NOT_FOUND'
}

export type SaleorGraphql_TaxSourceLine = SaleorGraphql_CheckoutLine | SaleorGraphql_OrderLine;

export type SaleorGraphql_TaxSourceObject = SaleorGraphql_Checkout | SaleorGraphql_Order;

/** Representation of tax types fetched from tax gateway. */
export type SaleorGraphql_TaxType = {
  __typename?: 'TaxType';
  /** Description of the tax type. */
  description?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** External tax code used to identify given tax group. */
  taxCode?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** Taxable object. */
export type SaleorGraphql_TaxableObject = {
  __typename?: 'TaxableObject';
  /** The address data. */
  address?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** The currency of the object. */
  currency: FieldWrapper<Scalars['String']['output']>;
  /** List of discounts. */
  discounts: Array<FieldWrapper<SaleorGraphql_TaxableObjectDiscount>>;
  /** List of lines assigned to the object. */
  lines: Array<FieldWrapper<SaleorGraphql_TaxableObjectLine>>;
  /** Determines if prices contain entered tax.. */
  pricesEnteredWithTax: FieldWrapper<Scalars['Boolean']['output']>;
  /** The price of shipping method. */
  shippingPrice: FieldWrapper<SaleorGraphql_Money>;
  /** The source object related to this tax object. */
  sourceObject: FieldWrapper<SaleorGraphql_TaxSourceObject>;
};

/** Taxable object discount. */
export type SaleorGraphql_TaxableObjectDiscount = {
  __typename?: 'TaxableObjectDiscount';
  /** The amount of the discount. */
  amount: FieldWrapper<SaleorGraphql_Money>;
  /** The name of the discount. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_TaxableObjectLine = {
  __typename?: 'TaxableObjectLine';
  /** Determines if taxes are being charged for the product. */
  chargeTaxes: FieldWrapper<Scalars['Boolean']['output']>;
  /** The product name. */
  productName: FieldWrapper<Scalars['String']['output']>;
  /** The product sku. */
  productSku?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Number of items. */
  quantity: FieldWrapper<Scalars['Int']['output']>;
  /** The source line related to this tax line. */
  sourceLine: FieldWrapper<SaleorGraphql_TaxSourceLine>;
  /** Price of the order line. */
  totalPrice: FieldWrapper<SaleorGraphql_Money>;
  /** Price of the single item in the order line. */
  unitPrice: FieldWrapper<SaleorGraphql_Money>;
  /** The variant name. */
  variantName: FieldWrapper<Scalars['String']['output']>;
};

/** Represents a monetary value with taxes. In cases where taxes were not applied, net and gross values will be equal. */
export type SaleorGraphql_TaxedMoney = {
  __typename?: 'TaxedMoney';
  /** Currency code. */
  currency: FieldWrapper<Scalars['String']['output']>;
  /** Amount of money including taxes. */
  gross: FieldWrapper<SaleorGraphql_Money>;
  /** Amount of money without taxes. */
  net: FieldWrapper<SaleorGraphql_Money>;
  /** Amount of taxes. */
  tax: FieldWrapper<SaleorGraphql_Money>;
};

export type SaleorGraphql_TaxedMoneyInput = {
  /** Gross value of an item. */
  gross: Scalars['PositiveDecimal']['input'];
  /** Net value of an item. */
  net: Scalars['PositiveDecimal']['input'];
};

/** Represents a range of monetary values. */
export type SaleorGraphql_TaxedMoneyRange = {
  __typename?: 'TaxedMoneyRange';
  /** Lower bound of a price range. */
  start?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /** Upper bound of a price range. */
  stop?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
};

/**
 * Event sent when thumbnail is created.
 *
 * Added in Saleor 3.12.
 */
export type SaleorGraphql_ThumbnailCreated = SaleorGraphql_Event & {
  __typename?: 'ThumbnailCreated';
  /**
   * Thumbnail id.
   *
   * Added in Saleor 3.12.
   */
  id?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /**
   * Original media url.
   *
   * Added in Saleor 3.12.
   */
  mediaUrl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Object the thumbnail refers to.
   *
   * Added in Saleor 3.12.
   */
  objectId?: Maybe<FieldWrapper<Scalars['ID']['output']>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /**
   * Thumbnail url.
   *
   * Added in Saleor 3.12.
   */
  url?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_ThumbnailFormatEnum {
  Avif = 'AVIF',
  Original = 'ORIGINAL',
  Webp = 'WEBP'
}

export type SaleorGraphql_TimePeriod = {
  __typename?: 'TimePeriod';
  /** The length of the period. */
  amount: FieldWrapper<Scalars['Int']['output']>;
  /** The type of the period. */
  type: FieldWrapper<SaleorGraphql_TimePeriodTypeEnum | '%future added value'>;
};

export type SaleorGraphql_TimePeriodInputType = {
  /** The length of the period. */
  amount: Scalars['Int']['input'];
  /** The type of the period. */
  type: SaleorGraphql_TimePeriodTypeEnum | '%future added value';
};

/** An enumeration. */
export enum SaleorGraphql_TimePeriodTypeEnum {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

/**
 * Represents possible tokenized payment flows that can be used to process payment.
 *
 *     The following flows are possible:
 *     INTERACTIVE - Payment method can be used for 1 click checkout - it's prefilled in
 *     checkout form (might require additional authentication from user)
 */
export enum SaleorGraphql_TokenizedPaymentFlowEnum {
  Interactive = 'INTERACTIVE'
}

/** An object representing a single payment. */
export type SaleorGraphql_Transaction = SaleorGraphql_Node & {
  __typename?: 'Transaction';
  /** Total amount of the transaction. */
  amount?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** Date and time at which transaction was created. */
  created: FieldWrapper<Scalars['DateTime']['output']>;
  /** Error associated with transaction, if any. */
  error?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Response returned by payment gateway. */
  gatewayResponse: FieldWrapper<Scalars['JSONString']['output']>;
  /** ID of the transaction. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Determines if the transaction was successful. */
  isSuccess: FieldWrapper<Scalars['Boolean']['output']>;
  /** Determines the type of transaction. */
  kind: FieldWrapper<SaleorGraphql_TransactionKind | '%future added value'>;
  /** Determines the payment associated with a transaction. */
  payment: FieldWrapper<SaleorGraphql_Payment>;
  /** Unique token associated with a transaction. */
  token: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_TransactionAction = {
  __typename?: 'TransactionAction';
  /** Determines the action type. */
  actionType: FieldWrapper<SaleorGraphql_TransactionActionEnum | '%future added value'>;
  /** Transaction request amount. Null when action type is VOID. */
  amount?: Maybe<FieldWrapper<Scalars['PositiveDecimal']['output']>>;
  /**
   * Currency code.
   *
   * Added in Saleor 3.16.
   */
  currency: FieldWrapper<Scalars['String']['output']>;
};

/**
 * Represents possible actions on payment transaction.
 *
 *     The following actions are possible:
 *     CHARGE - Represents the charge action.
 *     REFUND - Represents a refund action.
 *     CANCEL - Represents a cancel action. Added in Saleor 3.12.
 */
export enum SaleorGraphql_TransactionActionEnum {
  Cancel = 'CANCEL',
  Charge = 'CHARGE',
  Refund = 'REFUND'
}

/**
 * Event sent when transaction cancelation is requested.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionCancelationRequested = SaleorGraphql_Event & {
  __typename?: 'TransactionCancelationRequested';
  /** Requested action data. */
  action: FieldWrapper<SaleorGraphql_TransactionAction>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Look up a transaction. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when transaction charge is requested.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionChargeRequested = SaleorGraphql_Event & {
  __typename?: 'TransactionChargeRequested';
  /** Requested action data. */
  action: FieldWrapper<SaleorGraphql_TransactionAction>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Look up a transaction. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Create transaction for checkout or order.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: HANDLE_PAYMENTS.
 */
export type SaleorGraphql_TransactionCreate = {
  __typename?: 'TransactionCreate';
  errors: Array<FieldWrapper<SaleorGraphql_TransactionCreateError>>;
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
};

export type SaleorGraphql_TransactionCreateError = {
  __typename?: 'TransactionCreateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionCreateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionCreateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  IncorrectCurrency = 'INCORRECT_CURRENCY',
  Invalid = 'INVALID',
  MetadataKeyRequired = 'METADATA_KEY_REQUIRED',
  NotFound = 'NOT_FOUND',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_TransactionCreateInput = {
  /** Amount authorized by this transaction. */
  amountAuthorized?: InputMaybe<SaleorGraphql_MoneyInput>;
  /**
   * Amount canceled by this transaction.
   *
   * Added in Saleor 3.13.
   */
  amountCanceled?: InputMaybe<SaleorGraphql_MoneyInput>;
  /** Amount charged by this transaction. */
  amountCharged?: InputMaybe<SaleorGraphql_MoneyInput>;
  /** Amount refunded by this transaction. */
  amountRefunded?: InputMaybe<SaleorGraphql_MoneyInput>;
  /** List of all possible actions for the transaction */
  availableActions?: InputMaybe<Array<SaleorGraphql_TransactionActionEnum | '%future added value'>>;
  /**
   * The url that will allow to redirect user to payment provider page with transaction event details.
   *
   * Added in Saleor 3.13.
   */
  externalUrl?: InputMaybe<Scalars['String']['input']>;
  /**
   * The message of the transaction.
   *
   * Added in Saleor 3.13.
   */
  message?: InputMaybe<Scalars['String']['input']>;
  /** Payment public metadata. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Payment name of the transaction.
   *
   * Added in Saleor 3.13.
   */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Payment private metadata. */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * PSP Reference of the transaction.
   *
   * Added in Saleor 3.13.
   */
  pspReference?: InputMaybe<Scalars['String']['input']>;
};

/** Represents transaction's event. */
export type SaleorGraphql_TransactionEvent = SaleorGraphql_Node & {
  __typename?: 'TransactionEvent';
  /**
   * The amount related to this event.
   *
   * Added in Saleor 3.13.
   */
  amount: FieldWrapper<SaleorGraphql_Money>;
  /** Date and time at which a transaction event was created. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * User or App that created the transaction event.
   *
   * Added in Saleor 3.13.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /**
   * The url that will allow to redirect user to payment provider page with transaction details.
   *
   * Added in Saleor 3.13.
   */
  externalUrl: FieldWrapper<Scalars['String']['output']>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Idempotency key assigned to the event.
   *
   * Added in Saleor 3.14.
   */
  idempotencyKey?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Message related to the transaction's event.
   *
   * Added in Saleor 3.13.
   */
  message: FieldWrapper<Scalars['String']['output']>;
  /**
   * PSP reference of transaction.
   *
   * Added in Saleor 3.13.
   */
  pspReference: FieldWrapper<Scalars['String']['output']>;
  /**
   * The type of action related to this event.
   *
   * Added in Saleor 3.13.
   */
  type?: Maybe<FieldWrapper<SaleorGraphql_TransactionEventTypeEnum | '%future added value'>>;
};

export type SaleorGraphql_TransactionEventInput = {
  /**
   * The message related to the event.
   *
   * Added in Saleor 3.13.
   */
  message?: InputMaybe<Scalars['String']['input']>;
  /**
   * PSP Reference related to this action.
   *
   * Added in Saleor 3.13.
   */
  pspReference?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Report the event for the transaction.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires the following permissions: OWNER and HANDLE_PAYMENTS for apps, HANDLE_PAYMENTS for staff users. Staff user cannot update a transaction that is owned by the app.
 */
export type SaleorGraphql_TransactionEventReport = {
  __typename?: 'TransactionEventReport';
  /** Defines if the reported event hasn't been processed earlier. */
  alreadyProcessed?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_TransactionEventReportError>>;
  /** The transaction related to the reported event. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** The event assigned to this report. if `alreadyProcessed` is set to `true`, the previously processed event will be returned. */
  transactionEvent?: Maybe<FieldWrapper<SaleorGraphql_TransactionEvent>>;
};

export type SaleorGraphql_TransactionEventReportError = {
  __typename?: 'TransactionEventReportError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionEventReportErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionEventReportErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  GraphqlError = 'GRAPHQL_ERROR',
  IncorrectDetails = 'INCORRECT_DETAILS',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

/**
 * Represents possible event types.
 *
 *     Added in Saleor 3.12.
 *
 *     The following types are possible:
 *     AUTHORIZATION_SUCCESS - represents success authorization.
 *     AUTHORIZATION_FAILURE - represents failure authorization.
 *     AUTHORIZATION_ADJUSTMENT - represents authorization adjustment.
 *     AUTHORIZATION_REQUEST - represents authorization request.
 *     AUTHORIZATION_ACTION_REQUIRED - represents authorization that needs
 *     additional actions from the customer.
 *     CHARGE_ACTION_REQUIRED - represents charge that needs
 *     additional actions from the customer.
 *     CHARGE_SUCCESS - represents success charge.
 *     CHARGE_FAILURE - represents failure charge.
 *     CHARGE_BACK - represents chargeback.
 *     CHARGE_REQUEST - represents charge request.
 *     REFUND_SUCCESS - represents success refund.
 *     REFUND_FAILURE - represents failure refund.
 *     REFUND_REVERSE - represents reverse refund.
 *     REFUND_REQUEST - represents refund request.
 *     CANCEL_SUCCESS - represents success cancel.
 *     CANCEL_FAILURE - represents failure cancel.
 *     CANCEL_REQUEST - represents cancel request.
 *     INFO - represents info event.
 */
export enum SaleorGraphql_TransactionEventTypeEnum {
  AuthorizationActionRequired = 'AUTHORIZATION_ACTION_REQUIRED',
  AuthorizationAdjustment = 'AUTHORIZATION_ADJUSTMENT',
  AuthorizationFailure = 'AUTHORIZATION_FAILURE',
  AuthorizationRequest = 'AUTHORIZATION_REQUEST',
  AuthorizationSuccess = 'AUTHORIZATION_SUCCESS',
  CancelFailure = 'CANCEL_FAILURE',
  CancelRequest = 'CANCEL_REQUEST',
  CancelSuccess = 'CANCEL_SUCCESS',
  ChargeActionRequired = 'CHARGE_ACTION_REQUIRED',
  ChargeBack = 'CHARGE_BACK',
  ChargeFailure = 'CHARGE_FAILURE',
  ChargeRequest = 'CHARGE_REQUEST',
  ChargeSuccess = 'CHARGE_SUCCESS',
  Info = 'INFO',
  RefundFailure = 'REFUND_FAILURE',
  RefundRequest = 'REFUND_REQUEST',
  RefundReverse = 'REFUND_REVERSE',
  RefundSuccess = 'REFUND_SUCCESS'
}

/**
 * Determine the transaction flow strategy.
 *
 *     AUTHORIZATION - the processed transaction should be only authorized
 *     CHARGE - the processed transaction should be charged.
 */
export enum SaleorGraphql_TransactionFlowStrategyEnum {
  Authorization = 'AUTHORIZATION',
  Charge = 'CHARGE'
}

/**
 * Initializes a transaction session. It triggers the webhook `TRANSACTION_INITIALIZE_SESSION`, to the requested `paymentGateways`. There is a limit of 100 transaction items per checkout / order.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionInitialize = {
  __typename?: 'TransactionInitialize';
  /** The JSON data required to finalize the payment. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_TransactionInitializeError>>;
  /** The initialized transaction. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** The event created for the initialized transaction. */
  transactionEvent?: Maybe<FieldWrapper<SaleorGraphql_TransactionEvent>>;
};

export type SaleorGraphql_TransactionInitializeError = {
  __typename?: 'TransactionInitializeError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionInitializeErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionInitializeErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Unique = 'UNIQUE'
}

/**
 * Event sent when user starts processing the payment.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionInitializeSession = SaleorGraphql_Event & {
  __typename?: 'TransactionInitializeSession';
  /** Action to proceed for the transaction */
  action: FieldWrapper<SaleorGraphql_TransactionProcessAction>;
  /**
   * The customer's IP address. If not provided as a parameter in the mutation, Saleor will try to determine the customer's IP address on its own.
   *
   * Added in Saleor 3.16.
   */
  customerIpAddress?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Payment gateway data in JSON format, received from storefront. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /**
   * Idempotency key assigned to the transaction initialize.
   *
   * Added in Saleor 3.14.
   */
  idempotencyKey: FieldWrapper<Scalars['String']['output']>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Merchant reference assigned to this payment. */
  merchantReference: FieldWrapper<Scalars['String']['output']>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Checkout or order */
  sourceObject: FieldWrapper<SaleorGraphql_OrderOrCheckout>;
  /** Look up a transaction. */
  transaction: FieldWrapper<SaleorGraphql_TransactionItem>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Represents a payment transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionItem = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'TransactionItem';
  /** List of actions that can be performed in the current state of a payment. */
  actions: Array<FieldWrapper<SaleorGraphql_TransactionActionEnum | '%future added value'>>;
  /**
   * Total amount of ongoing authorization requests for the transaction.
   *
   * Added in Saleor 3.13.
   */
  authorizePendingAmount: FieldWrapper<SaleorGraphql_Money>;
  /** Total amount authorized for this payment. */
  authorizedAmount: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount of ongoing cancel requests for the transaction.
   *
   * Added in Saleor 3.13.
   */
  cancelPendingAmount: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount canceled for this payment.
   *
   * Added in Saleor 3.13.
   */
  canceledAmount: FieldWrapper<SaleorGraphql_Money>;
  /**
   * Total amount of ongoing charge requests for the transaction.
   *
   * Added in Saleor 3.13.
   */
  chargePendingAmount: FieldWrapper<SaleorGraphql_Money>;
  /** Total amount charged for this payment. */
  chargedAmount: FieldWrapper<SaleorGraphql_Money>;
  /**
   * The related checkout.
   *
   * Added in Saleor 3.14.
   */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Date and time at which payment transaction was created. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * User or App that created the transaction.
   *
   * Added in Saleor 3.13.
   */
  createdBy?: Maybe<FieldWrapper<SaleorGraphql_UserOrApp>>;
  /** List of all transaction's events. */
  events: Array<FieldWrapper<SaleorGraphql_TransactionEvent>>;
  /**
   * The url that will allow to redirect user to payment provider page with transaction details.
   *
   * Added in Saleor 3.13.
   */
  externalUrl: FieldWrapper<Scalars['String']['output']>;
  /** The ID of the object. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /**
   * Message related to the transaction.
   *
   * Added in Saleor 3.13.
   */
  message: FieldWrapper<Scalars['String']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Date and time at which payment transaction was modified. */
  modifiedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /**
   * Name of the transaction.
   *
   * Added in Saleor 3.13.
   */
  name: FieldWrapper<Scalars['String']['output']>;
  /**
   * The related order.
   *
   * Added in Saleor 3.6.
   */
  order?: Maybe<FieldWrapper<SaleorGraphql_Order>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * PSP reference of transaction.
   *
   * Added in Saleor 3.13.
   */
  pspReference: FieldWrapper<Scalars['String']['output']>;
  /**
   * Total amount of ongoing refund requests for the transaction.
   *
   * Added in Saleor 3.13.
   */
  refundPendingAmount: FieldWrapper<SaleorGraphql_Money>;
  /** Total amount refunded for this payment. */
  refundedAmount: FieldWrapper<SaleorGraphql_Money>;
  /**
   * The transaction token.
   *
   * Added in Saleor 3.14.
   */
  token: FieldWrapper<Scalars['UUID']['output']>;
};


/**
 * Represents a payment transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionItemMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Represents a payment transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionItemMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Represents a payment transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionItemPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/**
 * Represents a payment transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionItemPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Event sent when transaction item metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_TransactionItemMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'TransactionItemMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Look up a transaction. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionKind {
  ActionToConfirm = 'ACTION_TO_CONFIRM',
  Auth = 'AUTH',
  Cancel = 'CANCEL',
  Capture = 'CAPTURE',
  Confirm = 'CONFIRM',
  External = 'EXTERNAL',
  Pending = 'PENDING',
  Refund = 'REFUND',
  RefundOngoing = 'REFUND_ONGOING',
  Void = 'VOID'
}

/**
 * Processes a transaction session. It triggers the webhook `TRANSACTION_PROCESS_SESSION`, to the assigned `paymentGateways`.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionProcess = {
  __typename?: 'TransactionProcess';
  /** The json data required to finalize the payment. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  errors: Array<FieldWrapper<SaleorGraphql_TransactionProcessError>>;
  /** The processed transaction. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** The event created for the processed transaction. */
  transactionEvent?: Maybe<FieldWrapper<SaleorGraphql_TransactionEvent>>;
};

export type SaleorGraphql_TransactionProcessAction = {
  __typename?: 'TransactionProcessAction';
  actionType: FieldWrapper<SaleorGraphql_TransactionFlowStrategyEnum | '%future added value'>;
  /** Transaction amount to process. */
  amount: FieldWrapper<Scalars['PositiveDecimal']['output']>;
  /** Currency of the amount. */
  currency: FieldWrapper<Scalars['String']['output']>;
};

export type SaleorGraphql_TransactionProcessError = {
  __typename?: 'TransactionProcessError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionProcessErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionProcessErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MissingPaymentApp = 'MISSING_PAYMENT_APP',
  MissingPaymentAppRelation = 'MISSING_PAYMENT_APP_RELATION',
  NotFound = 'NOT_FOUND',
  TransactionAlreadyProcessed = 'TRANSACTION_ALREADY_PROCESSED'
}

/**
 * Event sent when user has additional payment action to process.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionProcessSession = SaleorGraphql_Event & {
  __typename?: 'TransactionProcessSession';
  /** Action to proceed for the transaction */
  action: FieldWrapper<SaleorGraphql_TransactionProcessAction>;
  /**
   * The customer's IP address. If not provided as a parameter in the mutation, Saleor will try to determine the customer's IP address on its own.
   *
   * Added in Saleor 3.16.
   */
  customerIpAddress?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Payment gateway data in JSON format, received from storefront. */
  data?: Maybe<FieldWrapper<Scalars['JSON']['output']>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** Merchant reference assigned to this payment. */
  merchantReference: FieldWrapper<Scalars['String']['output']>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Checkout or order */
  sourceObject: FieldWrapper<SaleorGraphql_OrderOrCheckout>;
  /** Look up a transaction. */
  transaction: FieldWrapper<SaleorGraphql_TransactionItem>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when transaction refund is requested.
 *
 * Added in Saleor 3.13.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_TransactionRefundRequested = SaleorGraphql_Event & {
  __typename?: 'TransactionRefundRequested';
  /** Requested action data. */
  action: FieldWrapper<SaleorGraphql_TransactionAction>;
  /**
   * Granted refund related to refund request.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  grantedRefund?: Maybe<FieldWrapper<SaleorGraphql_OrderGrantedRefund>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Look up a transaction. */
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Request an action for payment transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: HANDLE_PAYMENTS.
 */
export type SaleorGraphql_TransactionRequestAction = {
  __typename?: 'TransactionRequestAction';
  errors: Array<FieldWrapper<SaleorGraphql_TransactionRequestActionError>>;
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
};

export type SaleorGraphql_TransactionRequestActionError = {
  __typename?: 'TransactionRequestActionError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionRequestActionErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionRequestActionErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MissingTransactionActionRequestWebhook = 'MISSING_TRANSACTION_ACTION_REQUEST_WEBHOOK',
  NotFound = 'NOT_FOUND'
}

/**
 * Request a refund for payment transaction based on granted refund.
 *
 * Added in Saleor 3.15.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: HANDLE_PAYMENTS.
 */
export type SaleorGraphql_TransactionRequestRefundForGrantedRefund = {
  __typename?: 'TransactionRequestRefundForGrantedRefund';
  errors: Array<FieldWrapper<SaleorGraphql_TransactionRequestRefundForGrantedRefundError>>;
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
};

export type SaleorGraphql_TransactionRequestRefundForGrantedRefundError = {
  __typename?: 'TransactionRequestRefundForGrantedRefundError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionRequestRefundForGrantedRefundErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionRequestRefundForGrantedRefundErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  MissingTransactionActionRequestWebhook = 'MISSING_TRANSACTION_ACTION_REQUEST_WEBHOOK',
  NotFound = 'NOT_FOUND'
}

/**
 * Update transaction.
 *
 * Added in Saleor 3.4.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires the following permissions: OWNER and HANDLE_PAYMENTS for apps, HANDLE_PAYMENTS for staff users. Staff user cannot update a transaction that is owned by the app.
 */
export type SaleorGraphql_TransactionUpdate = {
  __typename?: 'TransactionUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_TransactionUpdateError>>;
  transaction?: Maybe<FieldWrapper<SaleorGraphql_TransactionItem>>;
};

export type SaleorGraphql_TransactionUpdateError = {
  __typename?: 'TransactionUpdateError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TransactionUpdateErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TransactionUpdateErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  IncorrectCurrency = 'INCORRECT_CURRENCY',
  Invalid = 'INVALID',
  MetadataKeyRequired = 'METADATA_KEY_REQUIRED',
  NotFound = 'NOT_FOUND',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_TransactionUpdateInput = {
  /** Amount authorized by this transaction. */
  amountAuthorized?: InputMaybe<SaleorGraphql_MoneyInput>;
  /**
   * Amount canceled by this transaction.
   *
   * Added in Saleor 3.13.
   */
  amountCanceled?: InputMaybe<SaleorGraphql_MoneyInput>;
  /** Amount charged by this transaction. */
  amountCharged?: InputMaybe<SaleorGraphql_MoneyInput>;
  /** Amount refunded by this transaction. */
  amountRefunded?: InputMaybe<SaleorGraphql_MoneyInput>;
  /** List of all possible actions for the transaction */
  availableActions?: InputMaybe<Array<SaleorGraphql_TransactionActionEnum | '%future added value'>>;
  /**
   * The url that will allow to redirect user to payment provider page with transaction event details.
   *
   * Added in Saleor 3.13.
   */
  externalUrl?: InputMaybe<Scalars['String']['input']>;
  /**
   * The message of the transaction.
   *
   * Added in Saleor 3.13.
   */
  message?: InputMaybe<Scalars['String']['input']>;
  /** Payment public metadata. */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * Payment name of the transaction.
   *
   * Added in Saleor 3.13.
   */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Payment private metadata. */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /**
   * PSP Reference of the transaction.
   *
   * Added in Saleor 3.13.
   */
  pspReference?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_TranslatableItem = SaleorGraphql_AttributeTranslatableContent | SaleorGraphql_AttributeValueTranslatableContent | SaleorGraphql_CategoryTranslatableContent | SaleorGraphql_CollectionTranslatableContent | SaleorGraphql_MenuItemTranslatableContent | SaleorGraphql_PageTranslatableContent | SaleorGraphql_ProductTranslatableContent | SaleorGraphql_ProductVariantTranslatableContent | SaleorGraphql_PromotionRuleTranslatableContent | SaleorGraphql_PromotionTranslatableContent | SaleorGraphql_SaleTranslatableContent | SaleorGraphql_ShippingMethodTranslatableContent | SaleorGraphql_VoucherTranslatableContent;

export type SaleorGraphql_TranslatableItemConnection = {
  __typename?: 'TranslatableItemConnection';
  edges: Array<FieldWrapper<SaleorGraphql_TranslatableItemEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_TranslatableItemEdge = {
  __typename?: 'TranslatableItemEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_TranslatableItem>;
};

export enum SaleorGraphql_TranslatableKinds {
  Attribute = 'ATTRIBUTE',
  AttributeValue = 'ATTRIBUTE_VALUE',
  Category = 'CATEGORY',
  Collection = 'COLLECTION',
  MenuItem = 'MENU_ITEM',
  Page = 'PAGE',
  Product = 'PRODUCT',
  Promotion = 'PROMOTION',
  PromotionRule = 'PROMOTION_RULE',
  Sale = 'SALE',
  ShippingMethod = 'SHIPPING_METHOD',
  Variant = 'VARIANT',
  Voucher = 'VOUCHER'
}

/**
 * Event sent when new translation is created.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_TranslationCreated = SaleorGraphql_Event & {
  __typename?: 'TranslationCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The translation the event relates to. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_TranslationTypes>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_TranslationError = {
  __typename?: 'TranslationError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_TranslationErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_TranslationErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED'
}

export type SaleorGraphql_TranslationInput = {
  /**
   * Translated description.
   *
   * Rich text format. For reference see https://editorjs.io/
   */
  description?: InputMaybe<Scalars['JSONString']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  seoDescription?: InputMaybe<Scalars['String']['input']>;
  seoTitle?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_TranslationTypes = SaleorGraphql_AttributeTranslation | SaleorGraphql_AttributeValueTranslation | SaleorGraphql_CategoryTranslation | SaleorGraphql_CollectionTranslation | SaleorGraphql_MenuItemTranslation | SaleorGraphql_PageTranslation | SaleorGraphql_ProductTranslation | SaleorGraphql_ProductVariantTranslation | SaleorGraphql_PromotionRuleTranslation | SaleorGraphql_PromotionTranslation | SaleorGraphql_SaleTranslation | SaleorGraphql_ShippingMethodTranslation | SaleorGraphql_VoucherTranslation;

/**
 * Event sent when translation is updated.
 *
 * Added in Saleor 3.2.
 */
export type SaleorGraphql_TranslationUpdated = SaleorGraphql_Event & {
  __typename?: 'TranslationUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** The translation the event relates to. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_TranslationTypes>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_UpdateInvoiceInput = {
  /**
   * Fields required to update the invoice metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** Invoice number */
  number?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the invoice private metadata.
   *
   * Added in Saleor 3.14.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of an invoice to download. */
  url?: InputMaybe<Scalars['String']['input']>;
};

/** Updates metadata of an object. To use it, you need to have access to the modified object. */
export type SaleorGraphql_UpdateMetadata = {
  __typename?: 'UpdateMetadata';
  errors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
  item?: Maybe<FieldWrapper<SaleorGraphql_ObjectWithMetadata>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  metadataErrors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
};

/** Updates private metadata of an object. To use it, you need to be an authenticated staff user or an app and have access to the modified object. */
export type SaleorGraphql_UpdatePrivateMetadata = {
  __typename?: 'UpdatePrivateMetadata';
  errors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
  item?: Maybe<FieldWrapper<SaleorGraphql_ObjectWithMetadata>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  metadataErrors: Array<FieldWrapper<SaleorGraphql_MetadataError>>;
};

export type SaleorGraphql_UploadError = {
  __typename?: 'UploadError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_UploadErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_UploadErrorCode {
  GraphqlError = 'GRAPHQL_ERROR'
}

/** Represents user data. */
export type SaleorGraphql_User = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'User';
  /**
   * List of channels the user has access to. The sum of channels from all user groups. If at least one group has `restrictedAccessToChannels` set to False - all channels are returned.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  accessibleChannels?: Maybe<Array<FieldWrapper<SaleorGraphql_Channel>>>;
  /** List of all user's addresses. */
  addresses: Array<FieldWrapper<SaleorGraphql_Address>>;
  /** The avatar of the user. */
  avatar?: Maybe<FieldWrapper<SaleorGraphql_Image>>;
  /**
   * Returns the last open checkout of this user.
   * @deprecated This field will be removed in Saleor 4.0. Use the `checkoutTokens` field to fetch the user checkouts.
   */
  checkout?: Maybe<FieldWrapper<SaleorGraphql_Checkout>>;
  /** Returns the checkout ID's assigned to this user. */
  checkoutIds?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
  /**
   * Returns the checkout UUID's assigned to this user.
   * @deprecated This field will be removed in Saleor 4.0. Use `checkoutIds` instead.
   */
  checkoutTokens?: Maybe<Array<FieldWrapper<Scalars['UUID']['output']>>>;
  /**
   * Returns checkouts assigned to this user.
   *
   * Added in Saleor 3.8.
   */
  checkouts?: Maybe<FieldWrapper<SaleorGraphql_CheckoutCountableConnection>>;
  /** The data when the user create account. */
  dateJoined: FieldWrapper<Scalars['DateTime']['output']>;
  /** The default billing address of the user. */
  defaultBillingAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** The default shipping address of the user. */
  defaultShippingAddress?: Maybe<FieldWrapper<SaleorGraphql_Address>>;
  /** List of user's permission groups which user can manage. */
  editableGroups?: Maybe<Array<FieldWrapper<SaleorGraphql_Group>>>;
  /** The email address of the user. */
  email: FieldWrapper<Scalars['String']['output']>;
  /**
   * List of events associated with the user.
   *
   * Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
   */
  events?: Maybe<Array<FieldWrapper<SaleorGraphql_CustomerEvent>>>;
  /**
   * External ID of this user.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The given name of the address. */
  firstName: FieldWrapper<Scalars['String']['output']>;
  /** List of the user gift cards. */
  giftCards?: Maybe<FieldWrapper<SaleorGraphql_GiftCardCountableConnection>>;
  /** The ID of the user. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Determine if the user is active. */
  isActive: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Determines if user has confirmed email.
   *
   * Added in Saleor 3.15.
   */
  isConfirmed: FieldWrapper<Scalars['Boolean']['output']>;
  /** Determine if the user is a staff admin. */
  isStaff: FieldWrapper<Scalars['Boolean']['output']>;
  /** User language code. */
  languageCode: FieldWrapper<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** The date when the user last time log in to the system. */
  lastLogin?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The family name of the address. */
  lastName: FieldWrapper<Scalars['String']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * A note about the customer.
   *
   * Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.
   */
  note?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of user's orders. Requires one of the following permissions: MANAGE_STAFF, OWNER. */
  orders?: Maybe<FieldWrapper<SaleorGraphql_OrderCountableConnection>>;
  /** List of user's permission groups. */
  permissionGroups?: Maybe<Array<FieldWrapper<SaleorGraphql_Group>>>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * Determine if user have restricted access to channels. False if at least one user group has `restrictedAccessToChannels` set to False.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  restrictedAccessToChannels: FieldWrapper<Scalars['Boolean']['output']>;
  /**
   * Returns a list of user's stored payment methods that can be used in provided channel. The field returns a list of stored payment methods by payment apps. When `amount` is not provided, 0 will be used as default value.
   *
   * Added in Saleor 3.15.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  storedPaymentMethods?: Maybe<Array<FieldWrapper<SaleorGraphql_StoredPaymentMethod>>>;
  /** List of stored payment sources. The field returns a list of payment sources stored for payment plugins. */
  storedPaymentSources?: Maybe<Array<FieldWrapper<SaleorGraphql_PaymentSource>>>;
  /** The data when the user last update the account information. */
  updatedAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** List of user's permissions. */
  userPermissions?: Maybe<Array<FieldWrapper<SaleorGraphql_UserPermission>>>;
};


/** Represents user data. */
export type SaleorGraphql_UserAvatarArgs = {
  format?: InputMaybe<SaleorGraphql_ThumbnailFormatEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents user data. */
export type SaleorGraphql_UserCheckoutIdsArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};


/** Represents user data. */
export type SaleorGraphql_UserCheckoutTokensArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};


/** Represents user data. */
export type SaleorGraphql_UserCheckoutsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  channel?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents user data. */
export type SaleorGraphql_UserGiftCardsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents user data. */
export type SaleorGraphql_UserMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents user data. */
export type SaleorGraphql_UserMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents user data. */
export type SaleorGraphql_UserOrdersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents user data. */
export type SaleorGraphql_UserPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents user data. */
export type SaleorGraphql_UserPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents user data. */
export type SaleorGraphql_UserStoredPaymentMethodsArgs = {
  channel: Scalars['String']['input'];
};


/** Represents user data. */
export type SaleorGraphql_UserStoredPaymentSourcesArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a user avatar. Only for staff members.
 *
 * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
 */
export type SaleorGraphql_UserAvatarDelete = {
  __typename?: 'UserAvatarDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** An updated user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
 *
 * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
 */
export type SaleorGraphql_UserAvatarUpdate = {
  __typename?: 'UserAvatarUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** An updated user instance. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/**
 * Activate or deactivate users.
 *
 * Requires one of the following permissions: MANAGE_USERS.
 */
export type SaleorGraphql_UserBulkSetActive = {
  __typename?: 'UserBulkSetActive';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
};

export type SaleorGraphql_UserCountableConnection = {
  __typename?: 'UserCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_UserCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_UserCountableEdge = {
  __typename?: 'UserCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_User>;
};

export type SaleorGraphql_UserCreateInput = {
  /** Slug of a channel which will be used for notify user. Optional when only one channel exists. */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** Billing address of the customer. */
  defaultBillingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** Shipping address of the customer. */
  defaultShippingAddress?: InputMaybe<SaleorGraphql_AddressInput>;
  /** The unique email address of the user. */
  email?: InputMaybe<Scalars['String']['input']>;
  /**
   * External ID of the customer.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Given name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User account is active. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * User account is confirmed.
   *
   * Added in Saleor 3.15.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   *
   * The user will be always set as unconfirmed. The confirmation will take place when the user sets the password.
   */
  isConfirmed?: InputMaybe<Scalars['Boolean']['input']>;
  /** User language code. */
  languageCode?: InputMaybe<SaleorGraphql_LanguageCodeEnum | '%future added value'>;
  /** Family name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user metadata.
   *
   * Added in Saleor 3.14.
   */
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** A note about the user. */
  note?: InputMaybe<Scalars['String']['input']>;
  /**
   * Fields required to update the user private metadata.
   *
   * Added in Saleor 3.14.
   */
  privateMetadata?: InputMaybe<Array<SaleorGraphql_MetadataInput>>;
  /** URL of a view where users should be redirected to set the password. URL in RFC 1808 format. */
  redirectUrl?: InputMaybe<Scalars['String']['input']>;
};

export type SaleorGraphql_UserOrApp = SaleorGraphql_App | SaleorGraphql_User;

/** Represents user's permissions. */
export type SaleorGraphql_UserPermission = {
  __typename?: 'UserPermission';
  /** Internal code for permission. */
  code: FieldWrapper<SaleorGraphql_PermissionEnum | '%future added value'>;
  /** Describe action(s) allowed to do by permission. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of user permission groups which contains this permission. */
  sourcePermissionGroups?: Maybe<Array<FieldWrapper<SaleorGraphql_Group>>>;
};


/** Represents user's permissions. */
export type SaleorGraphql_UserPermissionSourcePermissionGroupsArgs = {
  userId: Scalars['ID']['input'];
};

export enum SaleorGraphql_UserSortField {
  /** Sort users by created at. */
  CreatedAt = 'CREATED_AT',
  /** Sort users by email. */
  Email = 'EMAIL',
  /** Sort users by first name. */
  FirstName = 'FIRST_NAME',
  /** Sort users by last modified at. */
  LastModifiedAt = 'LAST_MODIFIED_AT',
  /** Sort users by last name. */
  LastName = 'LAST_NAME',
  /** Sort users by order count. */
  OrderCount = 'ORDER_COUNT'
}

export type SaleorGraphql_UserSortingInput = {
  /** Specifies the direction in which to sort users. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort users by the selected field. */
  field: SaleorGraphql_UserSortField | '%future added value';
};

/** Represents a VAT rate for a country. */
export type SaleorGraphql_Vat = {
  __typename?: 'VAT';
  /** Country code. */
  countryCode: FieldWrapper<Scalars['String']['output']>;
  /** Country's VAT rate exceptions for specific types of goods. */
  reducedRates: Array<FieldWrapper<SaleorGraphql_ReducedRate>>;
  /** Standard VAT rate in percent. */
  standardRate?: Maybe<FieldWrapper<Scalars['Float']['output']>>;
};

export enum SaleorGraphql_VariantAttributeScope {
  All = 'ALL',
  NotVariantSelection = 'NOT_VARIANT_SELECTION',
  VariantSelection = 'VARIANT_SELECTION'
}

/**
 * Assign an media to a product variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_VariantMediaAssign = {
  __typename?: 'VariantMediaAssign';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  media?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/**
 * Unassign an media from a product variant.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_VariantMediaUnassign = {
  __typename?: 'VariantMediaUnassign';
  errors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  media?: Maybe<FieldWrapper<SaleorGraphql_ProductMedia>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  productErrors: Array<FieldWrapper<SaleorGraphql_ProductError>>;
  productVariant?: Maybe<FieldWrapper<SaleorGraphql_ProductVariant>>;
};

/** Represents availability of a variant in the storefront. */
export type SaleorGraphql_VariantPricingInfo = {
  __typename?: 'VariantPricingInfo';
  /** The discount amount if in sale (null otherwise). */
  discount?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /**
   * The discount amount in the local currency.
   * @deprecated This field will be removed in Saleor 4.0. Always returns `null`.
   */
  discountLocalCurrency?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /** Whether it is in sale or not. */
  onSale?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** The price, with any discount subtracted. */
  price?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /**
   * The discounted price in the local currency.
   * @deprecated This field will be removed in Saleor 4.0. Always returns `null`.
   */
  priceLocalCurrency?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
  /** The price without any discount. */
  priceUndiscounted?: Maybe<FieldWrapper<SaleorGraphql_TaxedMoney>>;
};

/** Verify JWT token. */
export type SaleorGraphql_VerifyToken = {
  __typename?: 'VerifyToken';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  accountErrors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_AccountError>>;
  /** Determine if token is valid or not. */
  isValid: FieldWrapper<Scalars['Boolean']['output']>;
  /** JWT payload. */
  payload?: Maybe<FieldWrapper<Scalars['GenericScalar']['output']>>;
  /** User assigned to token. */
  user?: Maybe<FieldWrapper<SaleorGraphql_User>>;
};

/** An enumeration. */
export enum SaleorGraphql_VolumeUnitsEnum {
  AcreFt = 'ACRE_FT',
  AcreIn = 'ACRE_IN',
  CubicCentimeter = 'CUBIC_CENTIMETER',
  CubicDecimeter = 'CUBIC_DECIMETER',
  CubicFoot = 'CUBIC_FOOT',
  CubicInch = 'CUBIC_INCH',
  CubicMeter = 'CUBIC_METER',
  CubicMillimeter = 'CUBIC_MILLIMETER',
  CubicYard = 'CUBIC_YARD',
  FlOz = 'FL_OZ',
  Liter = 'LITER',
  Pint = 'PINT',
  Qt = 'QT'
}

/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_Voucher = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Voucher';
  /** Determine if the voucher usage should be limited to one use per customer. */
  applyOncePerCustomer: FieldWrapper<Scalars['Boolean']['output']>;
  /** Determine if the voucher should be applied once per order. If set to True, the voucher is applied to a single cheapest eligible product in checkout. */
  applyOncePerOrder: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of categories this voucher applies to. */
  categories?: Maybe<FieldWrapper<SaleorGraphql_CategoryCountableConnection>>;
  /**
   * List of availability in channels for the voucher.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  channelListings?: Maybe<Array<FieldWrapper<SaleorGraphql_VoucherChannelListing>>>;
  /** The code of the voucher.This field will be removed in Saleor 4.0. */
  code?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * List of codes available for this voucher.
   *
   * Added in Saleor 3.18.
   */
  codes?: Maybe<FieldWrapper<SaleorGraphql_VoucherCodeCountableConnection>>;
  /**
   * List of collections this voucher applies to.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  collections?: Maybe<FieldWrapper<SaleorGraphql_CollectionCountableConnection>>;
  /** List of countries available for the shipping voucher. */
  countries?: Maybe<Array<FieldWrapper<SaleorGraphql_CountryDisplay>>>;
  /** Currency code for voucher. */
  currency?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Voucher value. */
  discountValue?: Maybe<FieldWrapper<Scalars['Float']['output']>>;
  /** Determines a type of discount for voucher - value or percentage */
  discountValueType: FieldWrapper<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>;
  /** The end date and time of voucher. */
  endDate?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The ID of the voucher. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Determine minimum quantity of items for checkout. */
  minCheckoutItemsQuantity?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Minimum order value to apply voucher. */
  minSpent?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
  /** The name of the voucher. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Determine if the voucher is available only for staff members. */
  onlyForStaff: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /**
   * List of products this voucher applies to.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  products?: Maybe<FieldWrapper<SaleorGraphql_ProductCountableConnection>>;
  /**
   * Determine if the voucher codes can be used once or multiple times.
   *
   * Added in Saleor 3.18.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  singleUse: FieldWrapper<Scalars['Boolean']['output']>;
  /** The start date and time of voucher. */
  startDate: FieldWrapper<Scalars['DateTime']['output']>;
  /** Returns translated voucher fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_VoucherTranslation>>;
  /** Determines a type of voucher. */
  type: FieldWrapper<SaleorGraphql_VoucherTypeEnum | '%future added value'>;
  /** The number of times a voucher can be used. */
  usageLimit?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
  /** Usage count of the voucher. */
  used: FieldWrapper<Scalars['Int']['output']>;
  /**
   * List of product variants this voucher applies to.
   *
   * Added in Saleor 3.1.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   */
  variants?: Maybe<FieldWrapper<SaleorGraphql_ProductVariantCountableConnection>>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherCodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherCollectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherPrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherPrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};


/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */
export type SaleorGraphql_VoucherVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Adds products, categories, collections to a voucher.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_UPDATED (async): A voucher was updated.
 */
export type SaleorGraphql_VoucherAddCatalogues = {
  __typename?: 'VoucherAddCatalogues';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  /** Voucher of which catalogue IDs will be modified. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

/**
 * Deletes vouchers.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_DELETED (async): A voucher was deleted.
 */
export type SaleorGraphql_VoucherBulkDelete = {
  __typename?: 'VoucherBulkDelete';
  /** Returns how many objects were affected. */
  count: FieldWrapper<Scalars['Int']['output']>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
};

/** Represents voucher channel listing. */
export type SaleorGraphql_VoucherChannelListing = SaleorGraphql_Node & {
  __typename?: 'VoucherChannelListing';
  /** The channel in which voucher can be applied. */
  channel: FieldWrapper<SaleorGraphql_Channel>;
  /** Currency code for voucher in a channel. */
  currency: FieldWrapper<Scalars['String']['output']>;
  /** The value of the discount on voucher in a channel. */
  discountValue: FieldWrapper<Scalars['Float']['output']>;
  /** The ID of channel listing. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Minimum order value for voucher to apply in channel. */
  minSpent?: Maybe<FieldWrapper<SaleorGraphql_Money>>;
};

export type SaleorGraphql_VoucherChannelListingAddInput = {
  /** ID of a channel. */
  channelId: Scalars['ID']['input'];
  /** Value of the voucher. */
  discountValue?: InputMaybe<Scalars['PositiveDecimal']['input']>;
  /** Min purchase amount required to apply the voucher. */
  minAmountSpent?: InputMaybe<Scalars['PositiveDecimal']['input']>;
};

export type SaleorGraphql_VoucherChannelListingInput = {
  /** List of channels to which the voucher should be assigned. */
  addChannels?: InputMaybe<Array<SaleorGraphql_VoucherChannelListingAddInput>>;
  /** List of channels from which the voucher should be unassigned. */
  removeChannels?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Manage voucher's availability in channels.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_UPDATED (async): A voucher was updated.
 */
export type SaleorGraphql_VoucherChannelListingUpdate = {
  __typename?: 'VoucherChannelListingUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  /** An updated voucher instance. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

/**
 * Represents voucher code.
 *
 * Added in Saleor 3.18.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 */
export type SaleorGraphql_VoucherCode = {
  __typename?: 'VoucherCode';
  /** Code to use the voucher. */
  code?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Date time of code creation. */
  createdAt: FieldWrapper<Scalars['DateTime']['output']>;
  /** The ID of the voucher code. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Whether a code is active or not. */
  isActive?: Maybe<FieldWrapper<Scalars['Boolean']['output']>>;
  /** Number of times a code has been used. */
  used?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

/**
 * Deletes voucher codes.
 *
 * Added in Saleor 3.18.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_CODES_DELETED (async): A voucher codes were deleted.
 */
export type SaleorGraphql_VoucherCodeBulkDelete = {
  __typename?: 'VoucherCodeBulkDelete';
  /** Returns how many codes were deleted. */
  count: FieldWrapper<Scalars['Int']['output']>;
  errors: Array<FieldWrapper<SaleorGraphql_VoucherCodeBulkDeleteError>>;
};

export type SaleorGraphql_VoucherCodeBulkDeleteError = {
  __typename?: 'VoucherCodeBulkDeleteError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_VoucherCodeBulkDeleteErrorCode | '%future added value'>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Path to field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  path?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of voucher codes which causes the error. */
  voucherCodes?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_VoucherCodeBulkDeleteErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND'
}

export type SaleorGraphql_VoucherCodeCountableConnection = {
  __typename?: 'VoucherCodeCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_VoucherCodeCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_VoucherCodeCountableEdge = {
  __typename?: 'VoucherCodeCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_VoucherCode>;
};

/**
 * Event sent when voucher code export is completed.
 *
 * Added in Saleor 3.18.
 */
export type SaleorGraphql_VoucherCodeExportCompleted = SaleorGraphql_Event & {
  __typename?: 'VoucherCodeExportCompleted';
  /** The export file for voucher codes. */
  export?: Maybe<FieldWrapper<SaleorGraphql_ExportFile>>;
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/**
 * Event sent when new voucher codes were created.
 *
 * Added in Saleor 3.19.
 */
export type SaleorGraphql_VoucherCodesCreated = SaleorGraphql_Event & {
  __typename?: 'VoucherCodesCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The voucher codes the event relates to. */
  voucherCodes?: Maybe<Array<FieldWrapper<SaleorGraphql_VoucherCode>>>;
};

/**
 * Event sent when voucher codes were deleted.
 *
 * Added in Saleor 3.19.
 */
export type SaleorGraphql_VoucherCodesDeleted = SaleorGraphql_Event & {
  __typename?: 'VoucherCodesDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The voucher codes the event relates to. */
  voucherCodes?: Maybe<Array<FieldWrapper<SaleorGraphql_VoucherCode>>>;
};

export type SaleorGraphql_VoucherCountableConnection = {
  __typename?: 'VoucherCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_VoucherCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_VoucherCountableEdge = {
  __typename?: 'VoucherCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Voucher>;
};

/**
 * Creates a new voucher.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_CREATED (async): A voucher was created.
 * - VOUCHER_CODES_CREATED (async): A voucher codes were created.
 */
export type SaleorGraphql_VoucherCreate = {
  __typename?: 'VoucherCreate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

/**
 * Event sent when new voucher is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_VoucherCreated = SaleorGraphql_Event & {
  __typename?: 'VoucherCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The voucher the event relates to. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};


/**
 * Event sent when new voucher is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_VoucherCreatedVoucherArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Deletes a voucher.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_DELETED (async): A voucher was deleted.
 */
export type SaleorGraphql_VoucherDelete = {
  __typename?: 'VoucherDelete';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

/**
 * Event sent when voucher is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_VoucherDeleted = SaleorGraphql_Event & {
  __typename?: 'VoucherDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The voucher the event relates to. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};


/**
 * Event sent when voucher is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_VoucherDeletedVoucherArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

export enum SaleorGraphql_VoucherDiscountType {
  Fixed = 'FIXED',
  Percentage = 'PERCENTAGE',
  Shipping = 'SHIPPING'
}

export type SaleorGraphql_VoucherFilterInput = {
  discountType?: InputMaybe<Array<SaleorGraphql_VoucherDiscountType | '%future added value'>>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  started?: InputMaybe<SaleorGraphql_DateTimeRangeInput>;
  status?: InputMaybe<Array<SaleorGraphql_DiscountStatusEnum | '%future added value'>>;
  timesUsed?: InputMaybe<SaleorGraphql_IntRangeInput>;
};

export type SaleorGraphql_VoucherInput = {
  /**
   * List of codes to add.
   *
   * Added in Saleor 3.18.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  addCodes?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Voucher should be applied once per customer. */
  applyOncePerCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  /** Voucher should be applied to the cheapest item or entire order. */
  applyOncePerOrder?: InputMaybe<Scalars['Boolean']['input']>;
  /** Categories discounted by the voucher. */
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Code to use the voucher. This field will be removed in Saleor 4.0. Use `addCodes` instead. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Collections discounted by the voucher. */
  collections?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Country codes that can be used with the shipping voucher. */
  countries?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Choices: fixed or percentage. */
  discountValueType?: InputMaybe<SaleorGraphql_DiscountValueTypeEnum | '%future added value'>;
  /** End date of the voucher in ISO 8601 format. */
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** Minimal quantity of checkout items required to apply the voucher. */
  minCheckoutItemsQuantity?: InputMaybe<Scalars['Int']['input']>;
  /** Voucher name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Voucher can be used only by staff user. */
  onlyForStaff?: InputMaybe<Scalars['Boolean']['input']>;
  /** Products discounted by the voucher. */
  products?: InputMaybe<Array<Scalars['ID']['input']>>;
  /**
   * When set to 'True', each voucher code can be used only once; otherwise, codes can be used multiple times depending on `usageLimit`.
   *
   * The option can only be changed if none of the voucher codes have been used.
   *
   * Added in Saleor 3.18.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  singleUse?: InputMaybe<Scalars['Boolean']['input']>;
  /** Start date of the voucher in ISO 8601 format. */
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  /** Voucher type: PRODUCT, CATEGORY SHIPPING or ENTIRE_ORDER. */
  type?: InputMaybe<SaleorGraphql_VoucherTypeEnum | '%future added value'>;
  /** Limit number of times this voucher can be used in total. */
  usageLimit?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Variants discounted by the voucher.
   *
   * Added in Saleor 3.1.
   */
  variants?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * Event sent when voucher metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_VoucherMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'VoucherMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The voucher the event relates to. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};


/**
 * Event sent when voucher metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_VoucherMetadataUpdatedVoucherArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Removes products, categories, collections from a voucher.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_UPDATED (async): A voucher was updated.
 */
export type SaleorGraphql_VoucherRemoveCatalogues = {
  __typename?: 'VoucherRemoveCatalogues';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  /** Voucher of which catalogue IDs will be modified. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

export enum SaleorGraphql_VoucherSortField {
  /**
   * Sort vouchers by code.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0.
   */
  Code = 'CODE',
  /** Sort vouchers by end date. */
  EndDate = 'END_DATE',
  /**
   * Sort vouchers by minimum spent amount.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  MinimumSpentAmount = 'MINIMUM_SPENT_AMOUNT',
  /**
   * Sort vouchers by name.
   *
   * Added in Saleor 3.18.
   */
  Name = 'NAME',
  /** Sort vouchers by start date. */
  StartDate = 'START_DATE',
  /** Sort vouchers by type. */
  Type = 'TYPE',
  /** Sort vouchers by usage limit. */
  UsageLimit = 'USAGE_LIMIT',
  /**
   * Sort vouchers by value.
   *
   * This option requires a channel filter to work as the values can vary between channels.
   */
  Value = 'VALUE'
}

export type SaleorGraphql_VoucherSortingInput = {
  /**
   * Specifies the channel in which to sort the data.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use root-level channel argument instead.
   */
  channel?: InputMaybe<Scalars['String']['input']>;
  /** Specifies the direction in which to sort vouchers. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort vouchers by the selected field. */
  field: SaleorGraphql_VoucherSortField | '%future added value';
};

/** Represents voucher's original translatable fields and related translations. */
export type SaleorGraphql_VoucherTranslatableContent = SaleorGraphql_Node & {
  __typename?: 'VoucherTranslatableContent';
  /** The ID of the voucher translatable content. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Voucher name to translate. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Returns translated voucher fields for the given language code. */
  translation?: Maybe<FieldWrapper<SaleorGraphql_VoucherTranslation>>;
  /**
   * Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes.
   *
   * Requires one of the following permissions: MANAGE_DISCOUNTS.
   * @deprecated This field will be removed in Saleor 4.0. Get model fields from the root level queries.
   */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
  /**
   * The ID of the voucher to translate.
   *
   * Added in Saleor 3.14.
   */
  voucherId: FieldWrapper<Scalars['ID']['output']>;
};


/** Represents voucher's original translatable fields and related translations. */
export type SaleorGraphql_VoucherTranslatableContentTranslationArgs = {
  languageCode: SaleorGraphql_LanguageCodeEnum;
};

/**
 * Creates/updates translations for a voucher.
 *
 * Requires one of the following permissions: MANAGE_TRANSLATIONS.
 */
export type SaleorGraphql_VoucherTranslate = {
  __typename?: 'VoucherTranslate';
  errors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  translationErrors: Array<FieldWrapper<SaleorGraphql_TranslationError>>;
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

/** Represents voucher translations. */
export type SaleorGraphql_VoucherTranslation = SaleorGraphql_Node & {
  __typename?: 'VoucherTranslation';
  /** The ID of the voucher translation. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Translation language. */
  language: FieldWrapper<SaleorGraphql_LanguageDisplay>;
  /** Translated voucher name. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Represents the voucher fields to translate.
   *
   * Added in Saleor 3.14.
   */
  translatableContent?: Maybe<FieldWrapper<SaleorGraphql_VoucherTranslatableContent>>;
};

export enum SaleorGraphql_VoucherTypeEnum {
  EntireOrder = 'ENTIRE_ORDER',
  Shipping = 'SHIPPING',
  SpecificProduct = 'SPECIFIC_PRODUCT'
}

/**
 * Updates a voucher.
 *
 * Requires one of the following permissions: MANAGE_DISCOUNTS.
 *
 * Triggers the following webhook events:
 * - VOUCHER_UPDATED (async): A voucher was updated.
 * - VOUCHER_CODES_CREATED (async): A voucher code was created.
 */
export type SaleorGraphql_VoucherUpdate = {
  __typename?: 'VoucherUpdate';
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  discountErrors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  errors: Array<FieldWrapper<SaleorGraphql_DiscountError>>;
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};

/**
 * Event sent when voucher is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_VoucherUpdated = SaleorGraphql_Event & {
  __typename?: 'VoucherUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The voucher the event relates to. */
  voucher?: Maybe<FieldWrapper<SaleorGraphql_Voucher>>;
};


/**
 * Event sent when voucher is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_VoucherUpdatedVoucherArgs = {
  channel?: InputMaybe<Scalars['String']['input']>;
};

/** Represents warehouse. */
export type SaleorGraphql_Warehouse = SaleorGraphql_Node & SaleorGraphql_ObjectWithMetadata & {
  __typename?: 'Warehouse';
  /** Address of the warehouse. */
  address: FieldWrapper<SaleorGraphql_Address>;
  /**
   * Click and collect options: local, all or disabled.
   *
   * Added in Saleor 3.1.
   */
  clickAndCollectOption: FieldWrapper<SaleorGraphql_WarehouseClickAndCollectOptionEnum | '%future added value'>;
  /**
   * Warehouse company name.
   * @deprecated This field will be removed in Saleor 4.0. Use `Address.companyName` instead.
   */
  companyName: FieldWrapper<Scalars['String']['output']>;
  /** Warehouse email. */
  email: FieldWrapper<Scalars['String']['output']>;
  /**
   * External ID of this warehouse.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The ID of the warehouse. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Determine if the warehouse is private. */
  isPrivate: FieldWrapper<Scalars['Boolean']['output']>;
  /** List of public metadata items. Can be accessed without permissions. */
  metadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from public metadata.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  metafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  metafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Warehouse name. */
  name: FieldWrapper<Scalars['String']['output']>;
  /** List of private metadata items. Requires staff permissions to access. */
  privateMetadata: Array<FieldWrapper<SaleorGraphql_MetadataItem>>;
  /**
   * A single key from private metadata. Requires staff permissions to access.
   *
   * Tip: Use GraphQL aliases to fetch multiple keys.
   *
   * Added in Saleor 3.3.
   */
  privateMetafield?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.
   *
   * Added in Saleor 3.3.
   */
  privateMetafields?: Maybe<FieldWrapper<Scalars['Metadata']['output']>>;
  /** Shipping zones supported by the warehouse. */
  shippingZones: FieldWrapper<SaleorGraphql_ShippingZoneCountableConnection>;
  /** Warehouse slug. */
  slug: FieldWrapper<Scalars['String']['output']>;
};


/** Represents warehouse. */
export type SaleorGraphql_WarehouseMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents warehouse. */
export type SaleorGraphql_WarehouseMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents warehouse. */
export type SaleorGraphql_WarehousePrivateMetafieldArgs = {
  key: Scalars['String']['input'];
};


/** Represents warehouse. */
export type SaleorGraphql_WarehousePrivateMetafieldsArgs = {
  keys?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Represents warehouse. */
export type SaleorGraphql_WarehouseShippingZonesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** An enumeration. */
export enum SaleorGraphql_WarehouseClickAndCollectOptionEnum {
  All = 'ALL',
  Disabled = 'DISABLED',
  Local = 'LOCAL'
}

export type SaleorGraphql_WarehouseCountableConnection = {
  __typename?: 'WarehouseCountableConnection';
  edges: Array<FieldWrapper<SaleorGraphql_WarehouseCountableEdge>>;
  /** Pagination data for this connection. */
  pageInfo: FieldWrapper<SaleorGraphql_PageInfo>;
  /** A total count of items in the collection. */
  totalCount?: Maybe<FieldWrapper<Scalars['Int']['output']>>;
};

export type SaleorGraphql_WarehouseCountableEdge = {
  __typename?: 'WarehouseCountableEdge';
  /** A cursor for use in pagination. */
  cursor: FieldWrapper<Scalars['String']['output']>;
  /** The item at the end of the edge. */
  node: FieldWrapper<SaleorGraphql_Warehouse>;
};

/**
 * Creates new warehouse.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_WarehouseCreate = {
  __typename?: 'WarehouseCreate';
  errors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  warehouseErrors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
};

export type SaleorGraphql_WarehouseCreateInput = {
  /** Address of the warehouse. */
  address: SaleorGraphql_AddressInput;
  /** The email address of the warehouse. */
  email?: InputMaybe<Scalars['String']['input']>;
  /**
   * External ID of the warehouse.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /** Warehouse name. */
  name: Scalars['String']['input'];
  /**
   * Shipping zones supported by the warehouse.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Providing the zone ids will raise a ValidationError.
   */
  shippingZones?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Warehouse slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when new warehouse is created.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_WarehouseCreated = SaleorGraphql_Event & {
  __typename?: 'WarehouseCreated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The warehouse the event relates to. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};

/**
 * Deletes selected warehouse.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_WarehouseDelete = {
  __typename?: 'WarehouseDelete';
  errors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  warehouseErrors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
};

/**
 * Event sent when warehouse is deleted.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_WarehouseDeleted = SaleorGraphql_Event & {
  __typename?: 'WarehouseDeleted';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The warehouse the event relates to. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};

export type SaleorGraphql_WarehouseError = {
  __typename?: 'WarehouseError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_WarehouseErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of shipping zones IDs which causes the error. */
  shippingZones?: Maybe<Array<FieldWrapper<Scalars['ID']['output']>>>;
};

/** An enumeration. */
export enum SaleorGraphql_WarehouseErrorCode {
  AlreadyExists = 'ALREADY_EXISTS',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Unique = 'UNIQUE'
}

export type SaleorGraphql_WarehouseFilterInput = {
  channels?: InputMaybe<Array<Scalars['ID']['input']>>;
  clickAndCollectOption?: InputMaybe<SaleorGraphql_WarehouseClickAndCollectOptionEnum | '%future added value'>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<Array<SaleorGraphql_MetadataFilter>>;
  search?: InputMaybe<Scalars['String']['input']>;
  slugs?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * Event sent when warehouse metadata is updated.
 *
 * Added in Saleor 3.8.
 */
export type SaleorGraphql_WarehouseMetadataUpdated = SaleorGraphql_Event & {
  __typename?: 'WarehouseMetadataUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The warehouse the event relates to. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};

/**
 * Add shipping zone to given warehouse.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_WarehouseShippingZoneAssign = {
  __typename?: 'WarehouseShippingZoneAssign';
  errors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  warehouseErrors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
};

/**
 * Remove shipping zone from given warehouse.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_WarehouseShippingZoneUnassign = {
  __typename?: 'WarehouseShippingZoneUnassign';
  errors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  warehouseErrors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
};

export enum SaleorGraphql_WarehouseSortField {
  /** Sort warehouses by name. */
  Name = 'NAME'
}

export type SaleorGraphql_WarehouseSortingInput = {
  /** Specifies the direction in which to sort warehouses. */
  direction: SaleorGraphql_OrderDirection | '%future added value';
  /** Sort warehouses by the selected field. */
  field: SaleorGraphql_WarehouseSortField | '%future added value';
};

/**
 * Updates given warehouse.
 *
 * Requires one of the following permissions: MANAGE_PRODUCTS.
 */
export type SaleorGraphql_WarehouseUpdate = {
  __typename?: 'WarehouseUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  warehouseErrors: Array<FieldWrapper<SaleorGraphql_WarehouseError>>;
};

export type SaleorGraphql_WarehouseUpdateInput = {
  /** Address of the warehouse. */
  address?: InputMaybe<SaleorGraphql_AddressInput>;
  /**
   * Click and collect options: local, all or disabled.
   *
   * Added in Saleor 3.1.
   */
  clickAndCollectOption?: InputMaybe<SaleorGraphql_WarehouseClickAndCollectOptionEnum | '%future added value'>;
  /** The email address of the warehouse. */
  email?: InputMaybe<Scalars['String']['input']>;
  /**
   * External ID of the warehouse.
   *
   * Added in Saleor 3.10.
   */
  externalReference?: InputMaybe<Scalars['String']['input']>;
  /**
   * Visibility of warehouse stocks.
   *
   * Added in Saleor 3.1.
   */
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Warehouse name. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Warehouse slug. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Event sent when warehouse is updated.
 *
 * Added in Saleor 3.4.
 */
export type SaleorGraphql_WarehouseUpdated = SaleorGraphql_Event & {
  __typename?: 'WarehouseUpdated';
  /** Time of the event. */
  issuedAt?: Maybe<FieldWrapper<Scalars['DateTime']['output']>>;
  /** The user or application that triggered the event. */
  issuingPrincipal?: Maybe<FieldWrapper<SaleorGraphql_IssuingPrincipal>>;
  /** The application receiving the webhook. */
  recipient?: Maybe<FieldWrapper<SaleorGraphql_App>>;
  /** Saleor version that triggered the event. */
  version?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The warehouse the event relates to. */
  warehouse?: Maybe<FieldWrapper<SaleorGraphql_Warehouse>>;
};

/** Webhook. */
export type SaleorGraphql_Webhook = SaleorGraphql_Node & {
  __typename?: 'Webhook';
  /** The app associated with Webhook. */
  app: FieldWrapper<SaleorGraphql_App>;
  /** List of asynchronous webhook events. */
  asyncEvents: Array<FieldWrapper<SaleorGraphql_WebhookEventAsync>>;
  /**
   * Custom headers, which will be added to HTTP request.
   *
   * Added in Saleor 3.12.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  customHeaders?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
  /** Event deliveries. */
  eventDeliveries?: Maybe<FieldWrapper<SaleorGraphql_EventDeliveryCountableConnection>>;
  /**
   * List of webhook events.
   * @deprecated This field will be removed in Saleor 4.0. Use `asyncEvents` or `syncEvents` instead.
   */
  events: Array<FieldWrapper<SaleorGraphql_WebhookEvent>>;
  /** The ID of webhook. */
  id: FieldWrapper<Scalars['ID']['output']>;
  /** Informs if webhook is activated. */
  isActive: FieldWrapper<Scalars['Boolean']['output']>;
  /** The name of webhook. */
  name?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /**
   * Used to create a hash signature for each payload.
   * @deprecated This field will be removed in Saleor 4.0. As of Saleor 3.5, webhook payloads default to signing using a verifiable JWS.
   */
  secretKey?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** Used to define payloads for specific events. */
  subscriptionQuery?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** List of synchronous webhook events. */
  syncEvents: Array<FieldWrapper<SaleorGraphql_WebhookEventSync>>;
  /** Target URL for webhook. */
  targetUrl: FieldWrapper<Scalars['String']['output']>;
};


/** Webhook. */
export type SaleorGraphql_WebhookEventDeliveriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SaleorGraphql_EventDeliveryFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<SaleorGraphql_EventDeliverySortingInput>;
};

/**
 * Creates a new webhook subscription.
 *
 * Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
 */
export type SaleorGraphql_WebhookCreate = {
  __typename?: 'WebhookCreate';
  errors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
  webhook?: Maybe<FieldWrapper<SaleorGraphql_Webhook>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  webhookErrors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
};

export type SaleorGraphql_WebhookCreateInput = {
  /** ID of the app to which webhook belongs. */
  app?: InputMaybe<Scalars['ID']['input']>;
  /** The asynchronous events that webhook wants to subscribe. */
  asyncEvents?: InputMaybe<Array<SaleorGraphql_WebhookEventTypeAsyncEnum | '%future added value'>>;
  /**
   * Custom headers, which will be added to HTTP request. There is a limitation of 5 headers per webhook and 998 characters per header.Only "X-*" and "Authorization*" keys are allowed.
   *
   * Added in Saleor 3.12.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  customHeaders?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * The events that webhook wants to subscribe.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `asyncEvents` or `syncEvents` instead.
   */
  events?: InputMaybe<Array<SaleorGraphql_WebhookEventTypeEnum | '%future added value'>>;
  /** Determine if webhook will be set active or not. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** The name of the webhook. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Subscription query used to define a webhook payload.
   *
   * Added in Saleor 3.2.
   */
  query?: InputMaybe<Scalars['String']['input']>;
  /**
   * The secret key used to create a hash signature with each payload.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. As of Saleor 3.5, webhook payloads default to signing using a verifiable JWS.
   */
  secretKey?: InputMaybe<Scalars['String']['input']>;
  /** The synchronous events that webhook wants to subscribe. */
  syncEvents?: InputMaybe<Array<SaleorGraphql_WebhookEventTypeSyncEnum | '%future added value'>>;
  /** The url to receive the payload. */
  targetUrl?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Delete a webhook. Before the deletion, the webhook is deactivated to pause any deliveries that are already scheduled. The deletion might fail if delivery is in progress. In such a case, the webhook is not deleted but remains deactivated.
 *
 * Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
 */
export type SaleorGraphql_WebhookDelete = {
  __typename?: 'WebhookDelete';
  errors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
  webhook?: Maybe<FieldWrapper<SaleorGraphql_Webhook>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  webhookErrors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
};

/**
 * Performs a dry run of a webhook event. Supports a single event (the first, if multiple provided in the `query`). Requires permission relevant to processed event.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
 */
export type SaleorGraphql_WebhookDryRun = {
  __typename?: 'WebhookDryRun';
  errors: Array<FieldWrapper<SaleorGraphql_WebhookDryRunError>>;
  /** JSON payload, that would be sent out to webhook's target URL. */
  payload?: Maybe<FieldWrapper<Scalars['JSONString']['output']>>;
};

export type SaleorGraphql_WebhookDryRunError = {
  __typename?: 'WebhookDryRunError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_WebhookDryRunErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_WebhookDryRunErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  InvalidId = 'INVALID_ID',
  MissingEvent = 'MISSING_EVENT',
  MissingPermission = 'MISSING_PERMISSION',
  MissingSubscription = 'MISSING_SUBSCRIPTION',
  NotFound = 'NOT_FOUND',
  Syntax = 'SYNTAX',
  TypeNotSupported = 'TYPE_NOT_SUPPORTED',
  UnableToParse = 'UNABLE_TO_PARSE'
}

export type SaleorGraphql_WebhookError = {
  __typename?: 'WebhookError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_WebhookErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_WebhookErrorCode {
  DeleteFailed = 'DELETE_FAILED',
  GraphqlError = 'GRAPHQL_ERROR',
  Invalid = 'INVALID',
  InvalidCustomHeaders = 'INVALID_CUSTOM_HEADERS',
  InvalidNotifyWithSubscription = 'INVALID_NOTIFY_WITH_SUBSCRIPTION',
  MissingEvent = 'MISSING_EVENT',
  MissingSubscription = 'MISSING_SUBSCRIPTION',
  NotFound = 'NOT_FOUND',
  Required = 'REQUIRED',
  Syntax = 'SYNTAX',
  UnableToParse = 'UNABLE_TO_PARSE',
  Unique = 'UNIQUE'
}

/** Webhook event. */
export type SaleorGraphql_WebhookEvent = {
  __typename?: 'WebhookEvent';
  /** Internal name of the event type. */
  eventType: FieldWrapper<SaleorGraphql_WebhookEventTypeEnum | '%future added value'>;
  /** Display name of the event. */
  name: FieldWrapper<Scalars['String']['output']>;
};

/** Asynchronous webhook event. */
export type SaleorGraphql_WebhookEventAsync = {
  __typename?: 'WebhookEventAsync';
  /** Internal name of the event type. */
  eventType: FieldWrapper<SaleorGraphql_WebhookEventTypeAsyncEnum | '%future added value'>;
  /** Display name of the event. */
  name: FieldWrapper<Scalars['String']['output']>;
};

/** Synchronous webhook event. */
export type SaleorGraphql_WebhookEventSync = {
  __typename?: 'WebhookEventSync';
  /** Internal name of the event type. */
  eventType: FieldWrapper<SaleorGraphql_WebhookEventTypeSyncEnum | '%future added value'>;
  /** Display name of the event. */
  name: FieldWrapper<Scalars['String']['output']>;
};

/** Enum determining type of webhook. */
export enum SaleorGraphql_WebhookEventTypeAsyncEnum {
  /** An account email change is requested. */
  AccountChangeEmailRequested = 'ACCOUNT_CHANGE_EMAIL_REQUESTED',
  /** An account confirmation is requested. */
  AccountConfirmationRequested = 'ACCOUNT_CONFIRMATION_REQUESTED',
  /** An account is confirmed. */
  AccountConfirmed = 'ACCOUNT_CONFIRMED',
  /** An account is deleted. */
  AccountDeleted = 'ACCOUNT_DELETED',
  /** An account delete is requested. */
  AccountDeleteRequested = 'ACCOUNT_DELETE_REQUESTED',
  /** An account email was changed */
  AccountEmailChanged = 'ACCOUNT_EMAIL_CHANGED',
  /** Setting a new password for the account is requested. */
  AccountSetPasswordRequested = 'ACCOUNT_SET_PASSWORD_REQUESTED',
  /** A new address created. */
  AddressCreated = 'ADDRESS_CREATED',
  /** An address deleted. */
  AddressDeleted = 'ADDRESS_DELETED',
  /** An address updated. */
  AddressUpdated = 'ADDRESS_UPDATED',
  /**
   * All the events.
   *
   * DEPRECATED: this value will be removed in Saleor 4.0.
   */
  AnyEvents = 'ANY_EVENTS',
  /** An app deleted. */
  AppDeleted = 'APP_DELETED',
  /** A new app installed. */
  AppInstalled = 'APP_INSTALLED',
  /** An app status is changed. */
  AppStatusChanged = 'APP_STATUS_CHANGED',
  /** An app updated. */
  AppUpdated = 'APP_UPDATED',
  /** A new attribute is created. */
  AttributeCreated = 'ATTRIBUTE_CREATED',
  /** An attribute is deleted. */
  AttributeDeleted = 'ATTRIBUTE_DELETED',
  /** An attribute is updated. */
  AttributeUpdated = 'ATTRIBUTE_UPDATED',
  /** A new attribute value is created. */
  AttributeValueCreated = 'ATTRIBUTE_VALUE_CREATED',
  /** An attribute value is deleted. */
  AttributeValueDeleted = 'ATTRIBUTE_VALUE_DELETED',
  /** An attribute value is updated. */
  AttributeValueUpdated = 'ATTRIBUTE_VALUE_UPDATED',
  /** A new category created. */
  CategoryCreated = 'CATEGORY_CREATED',
  /** A category is deleted. */
  CategoryDeleted = 'CATEGORY_DELETED',
  /** A category is updated. */
  CategoryUpdated = 'CATEGORY_UPDATED',
  /** A new channel created. */
  ChannelCreated = 'CHANNEL_CREATED',
  /** A channel is deleted. */
  ChannelDeleted = 'CHANNEL_DELETED',
  /** A channel metadata is updated. */
  ChannelMetadataUpdated = 'CHANNEL_METADATA_UPDATED',
  /** A channel status is changed. */
  ChannelStatusChanged = 'CHANNEL_STATUS_CHANGED',
  /** A channel is updated. */
  ChannelUpdated = 'CHANNEL_UPDATED',
  /** A new checkout is created. */
  CheckoutCreated = 'CHECKOUT_CREATED',
  CheckoutFullyPaid = 'CHECKOUT_FULLY_PAID',
  /**
   * A checkout metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  CheckoutMetadataUpdated = 'CHECKOUT_METADATA_UPDATED',
  /** A checkout is updated. It also triggers all updates related to the checkout. */
  CheckoutUpdated = 'CHECKOUT_UPDATED',
  /** A new collection is created. */
  CollectionCreated = 'COLLECTION_CREATED',
  /** A collection is deleted. */
  CollectionDeleted = 'COLLECTION_DELETED',
  /**
   * A collection metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  CollectionMetadataUpdated = 'COLLECTION_METADATA_UPDATED',
  /** A collection is updated. */
  CollectionUpdated = 'COLLECTION_UPDATED',
  /** A new customer account is created. */
  CustomerCreated = 'CUSTOMER_CREATED',
  /** A customer account is deleted. */
  CustomerDeleted = 'CUSTOMER_DELETED',
  /**
   * A customer account metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  CustomerMetadataUpdated = 'CUSTOMER_METADATA_UPDATED',
  /** A customer account is updated. */
  CustomerUpdated = 'CUSTOMER_UPDATED',
  /** A draft order is created. */
  DraftOrderCreated = 'DRAFT_ORDER_CREATED',
  /** A draft order is deleted. */
  DraftOrderDeleted = 'DRAFT_ORDER_DELETED',
  /** A draft order is updated. */
  DraftOrderUpdated = 'DRAFT_ORDER_UPDATED',
  /** A fulfillment is approved. */
  FulfillmentApproved = 'FULFILLMENT_APPROVED',
  /** A fulfillment is cancelled. */
  FulfillmentCanceled = 'FULFILLMENT_CANCELED',
  /** A new fulfillment is created. */
  FulfillmentCreated = 'FULFILLMENT_CREATED',
  /**
   * A fulfillment metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  FulfillmentMetadataUpdated = 'FULFILLMENT_METADATA_UPDATED',
  FulfillmentTrackingNumberUpdated = 'FULFILLMENT_TRACKING_NUMBER_UPDATED',
  /** A new gift card created. */
  GiftCardCreated = 'GIFT_CARD_CREATED',
  /** A gift card is deleted. */
  GiftCardDeleted = 'GIFT_CARD_DELETED',
  /**
   * A gift card export is completed.
   *
   * Added in Saleor 3.16.
   */
  GiftCardExportCompleted = 'GIFT_CARD_EXPORT_COMPLETED',
  /**
   * A gift card metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  GiftCardMetadataUpdated = 'GIFT_CARD_METADATA_UPDATED',
  /**
   * A gift card has been sent.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  GiftCardSent = 'GIFT_CARD_SENT',
  /** A gift card status is changed. */
  GiftCardStatusChanged = 'GIFT_CARD_STATUS_CHANGED',
  /** A gift card is updated. */
  GiftCardUpdated = 'GIFT_CARD_UPDATED',
  /** An invoice is deleted. */
  InvoiceDeleted = 'INVOICE_DELETED',
  /** An invoice for order requested. */
  InvoiceRequested = 'INVOICE_REQUESTED',
  /** Invoice has been sent. */
  InvoiceSent = 'INVOICE_SENT',
  /** A new menu created. */
  MenuCreated = 'MENU_CREATED',
  /** A menu is deleted. */
  MenuDeleted = 'MENU_DELETED',
  /** A new menu item created. */
  MenuItemCreated = 'MENU_ITEM_CREATED',
  /** A menu item is deleted. */
  MenuItemDeleted = 'MENU_ITEM_DELETED',
  /** A menu item is updated. */
  MenuItemUpdated = 'MENU_ITEM_UPDATED',
  /** A menu is updated. */
  MenuUpdated = 'MENU_UPDATED',
  /**
   * User notification triggered.
   *
   * DEPRECATED: this value will be removed in Saleor 4.0. See the docs for more details about migrating from NOTIFY_USER to other events: https://docs.saleor.io/docs/next/upgrade-guides/notify-user-deprecation
   */
  NotifyUser = 'NOTIFY_USER',
  /** An observability event is created. */
  Observability = 'OBSERVABILITY',
  /**
   * Orders are imported.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderBulkCreated = 'ORDER_BULK_CREATED',
  /** An order is cancelled. */
  OrderCancelled = 'ORDER_CANCELLED',
  /** An order is confirmed (status change unconfirmed -> unfulfilled) by a staff user using the OrderConfirm mutation. It also triggers when the user completes the checkout and the shop setting `automatically_confirm_all_new_orders` is enabled. */
  OrderConfirmed = 'ORDER_CONFIRMED',
  /** A new order is placed. */
  OrderCreated = 'ORDER_CREATED',
  /** An order is expired. */
  OrderExpired = 'ORDER_EXPIRED',
  /** An order is fulfilled. */
  OrderFulfilled = 'ORDER_FULFILLED',
  /** Payment is made and an order is fully paid. */
  OrderFullyPaid = 'ORDER_FULLY_PAID',
  /**
   * The order is fully refunded.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderFullyRefunded = 'ORDER_FULLY_REFUNDED',
  /**
   * An order metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  OrderMetadataUpdated = 'ORDER_METADATA_UPDATED',
  /**
   * Payment has been made. The order may be partially or fully paid.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderPaid = 'ORDER_PAID',
  /**
   * The order received a refund. The order may be partially or fully refunded.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderRefunded = 'ORDER_REFUNDED',
  /** An order is updated; triggered for all changes related to an order; covers all other order webhooks, except for ORDER_CREATED. */
  OrderUpdated = 'ORDER_UPDATED',
  /** A new page is created. */
  PageCreated = 'PAGE_CREATED',
  /** A page is deleted. */
  PageDeleted = 'PAGE_DELETED',
  /** A new page type is created. */
  PageTypeCreated = 'PAGE_TYPE_CREATED',
  /** A page type is deleted. */
  PageTypeDeleted = 'PAGE_TYPE_DELETED',
  /** A page type is updated. */
  PageTypeUpdated = 'PAGE_TYPE_UPDATED',
  /** A page is updated. */
  PageUpdated = 'PAGE_UPDATED',
  /** A new permission group is created. */
  PermissionGroupCreated = 'PERMISSION_GROUP_CREATED',
  /** A permission group is deleted. */
  PermissionGroupDeleted = 'PERMISSION_GROUP_DELETED',
  /** A permission group is updated. */
  PermissionGroupUpdated = 'PERMISSION_GROUP_UPDATED',
  /** A new product is created. */
  ProductCreated = 'PRODUCT_CREATED',
  /** A product is deleted. */
  ProductDeleted = 'PRODUCT_DELETED',
  /**
   * A product export is completed.
   *
   * Added in Saleor 3.16.
   */
  ProductExportCompleted = 'PRODUCT_EXPORT_COMPLETED',
  /**
   * A new product media is created.
   *
   * Added in Saleor 3.12.
   */
  ProductMediaCreated = 'PRODUCT_MEDIA_CREATED',
  /**
   * A product media is deleted.
   *
   * Added in Saleor 3.12.
   */
  ProductMediaDeleted = 'PRODUCT_MEDIA_DELETED',
  /**
   * A product media is updated.
   *
   * Added in Saleor 3.12.
   */
  ProductMediaUpdated = 'PRODUCT_MEDIA_UPDATED',
  /**
   * A product metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  ProductMetadataUpdated = 'PRODUCT_METADATA_UPDATED',
  /** A product is updated. */
  ProductUpdated = 'PRODUCT_UPDATED',
  /** A product variant is back in stock. */
  ProductVariantBackInStock = 'PRODUCT_VARIANT_BACK_IN_STOCK',
  /** A new product variant is created. */
  ProductVariantCreated = 'PRODUCT_VARIANT_CREATED',
  /** A product variant is deleted. Warning: this event will not be executed when parent product has been deleted. Check PRODUCT_DELETED. */
  ProductVariantDeleted = 'PRODUCT_VARIANT_DELETED',
  /**
   * A product variant metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  ProductVariantMetadataUpdated = 'PRODUCT_VARIANT_METADATA_UPDATED',
  /** A product variant is out of stock. */
  ProductVariantOutOfStock = 'PRODUCT_VARIANT_OUT_OF_STOCK',
  /** A product variant stock is updated */
  ProductVariantStockUpdated = 'PRODUCT_VARIANT_STOCK_UPDATED',
  /** A product variant is updated. */
  ProductVariantUpdated = 'PRODUCT_VARIANT_UPDATED',
  /** A promotion is created. */
  PromotionCreated = 'PROMOTION_CREATED',
  /** A promotion is deleted. */
  PromotionDeleted = 'PROMOTION_DELETED',
  /** A promotion is deactivated. */
  PromotionEnded = 'PROMOTION_ENDED',
  /** A promotion rule is created. */
  PromotionRuleCreated = 'PROMOTION_RULE_CREATED',
  /** A promotion rule is deleted. */
  PromotionRuleDeleted = 'PROMOTION_RULE_DELETED',
  /** A promotion rule is updated. */
  PromotionRuleUpdated = 'PROMOTION_RULE_UPDATED',
  /** A promotion is activated. */
  PromotionStarted = 'PROMOTION_STARTED',
  /** A promotion is updated. */
  PromotionUpdated = 'PROMOTION_UPDATED',
  /** A sale is created. */
  SaleCreated = 'SALE_CREATED',
  /** A sale is deleted. */
  SaleDeleted = 'SALE_DELETED',
  /** A sale is activated or deactivated. */
  SaleToggle = 'SALE_TOGGLE',
  /** A sale is updated. */
  SaleUpdated = 'SALE_UPDATED',
  /** A new shipping price is created. */
  ShippingPriceCreated = 'SHIPPING_PRICE_CREATED',
  /** A shipping price is deleted. */
  ShippingPriceDeleted = 'SHIPPING_PRICE_DELETED',
  /** A shipping price is updated. */
  ShippingPriceUpdated = 'SHIPPING_PRICE_UPDATED',
  /** A new shipping zone is created. */
  ShippingZoneCreated = 'SHIPPING_ZONE_CREATED',
  /** A shipping zone is deleted. */
  ShippingZoneDeleted = 'SHIPPING_ZONE_DELETED',
  /**
   * A shipping zone metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  ShippingZoneMetadataUpdated = 'SHIPPING_ZONE_METADATA_UPDATED',
  /** A shipping zone is updated. */
  ShippingZoneUpdated = 'SHIPPING_ZONE_UPDATED',
  /**
   * Shop metadata is updated.
   *
   * Added in Saleor 3.15.
   */
  ShopMetadataUpdated = 'SHOP_METADATA_UPDATED',
  /** A new staff user is created. */
  StaffCreated = 'STAFF_CREATED',
  /** A staff user is deleted. */
  StaffDeleted = 'STAFF_DELETED',
  /** Setting a new password for the staff account is requested. */
  StaffSetPasswordRequested = 'STAFF_SET_PASSWORD_REQUESTED',
  /** A staff user is updated. */
  StaffUpdated = 'STAFF_UPDATED',
  /**
   * A thumbnail is created.
   *
   * Added in Saleor 3.12.
   */
  ThumbnailCreated = 'THUMBNAIL_CREATED',
  /**
   * Transaction item metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  TransactionItemMetadataUpdated = 'TRANSACTION_ITEM_METADATA_UPDATED',
  /** A new translation is created. */
  TranslationCreated = 'TRANSLATION_CREATED',
  /** A translation is updated. */
  TranslationUpdated = 'TRANSLATION_UPDATED',
  VoucherCodesCreated = 'VOUCHER_CODES_CREATED',
  VoucherCodesDeleted = 'VOUCHER_CODES_DELETED',
  /**
   * A voucher code export is completed.
   *
   * Added in Saleor 3.18.
   */
  VoucherCodeExportCompleted = 'VOUCHER_CODE_EXPORT_COMPLETED',
  /** A new voucher created. */
  VoucherCreated = 'VOUCHER_CREATED',
  /** A voucher is deleted. */
  VoucherDeleted = 'VOUCHER_DELETED',
  /**
   * A voucher metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  VoucherMetadataUpdated = 'VOUCHER_METADATA_UPDATED',
  /** A voucher is updated. */
  VoucherUpdated = 'VOUCHER_UPDATED',
  /** A new warehouse created. */
  WarehouseCreated = 'WAREHOUSE_CREATED',
  /** A warehouse is deleted. */
  WarehouseDeleted = 'WAREHOUSE_DELETED',
  /**
   * A warehouse metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  WarehouseMetadataUpdated = 'WAREHOUSE_METADATA_UPDATED',
  /** A warehouse is updated. */
  WarehouseUpdated = 'WAREHOUSE_UPDATED'
}

/** Enum determining type of webhook. */
export enum SaleorGraphql_WebhookEventTypeEnum {
  /** An account email change is requested. */
  AccountChangeEmailRequested = 'ACCOUNT_CHANGE_EMAIL_REQUESTED',
  /** An account confirmation is requested. */
  AccountConfirmationRequested = 'ACCOUNT_CONFIRMATION_REQUESTED',
  /** An account is confirmed. */
  AccountConfirmed = 'ACCOUNT_CONFIRMED',
  /** An account is deleted. */
  AccountDeleted = 'ACCOUNT_DELETED',
  /** An account delete is requested. */
  AccountDeleteRequested = 'ACCOUNT_DELETE_REQUESTED',
  /** An account email was changed */
  AccountEmailChanged = 'ACCOUNT_EMAIL_CHANGED',
  /** Setting a new password for the account is requested. */
  AccountSetPasswordRequested = 'ACCOUNT_SET_PASSWORD_REQUESTED',
  /** A new address created. */
  AddressCreated = 'ADDRESS_CREATED',
  /** An address deleted. */
  AddressDeleted = 'ADDRESS_DELETED',
  /** An address updated. */
  AddressUpdated = 'ADDRESS_UPDATED',
  /**
   * All the events.
   *
   * DEPRECATED: this value will be removed in Saleor 4.0.
   */
  AnyEvents = 'ANY_EVENTS',
  /** An app deleted. */
  AppDeleted = 'APP_DELETED',
  /** A new app installed. */
  AppInstalled = 'APP_INSTALLED',
  /** An app status is changed. */
  AppStatusChanged = 'APP_STATUS_CHANGED',
  /** An app updated. */
  AppUpdated = 'APP_UPDATED',
  /** A new attribute is created. */
  AttributeCreated = 'ATTRIBUTE_CREATED',
  /** An attribute is deleted. */
  AttributeDeleted = 'ATTRIBUTE_DELETED',
  /** An attribute is updated. */
  AttributeUpdated = 'ATTRIBUTE_UPDATED',
  /** A new attribute value is created. */
  AttributeValueCreated = 'ATTRIBUTE_VALUE_CREATED',
  /** An attribute value is deleted. */
  AttributeValueDeleted = 'ATTRIBUTE_VALUE_DELETED',
  /** An attribute value is updated. */
  AttributeValueUpdated = 'ATTRIBUTE_VALUE_UPDATED',
  /** A new category created. */
  CategoryCreated = 'CATEGORY_CREATED',
  /** A category is deleted. */
  CategoryDeleted = 'CATEGORY_DELETED',
  /** A category is updated. */
  CategoryUpdated = 'CATEGORY_UPDATED',
  /** A new channel created. */
  ChannelCreated = 'CHANNEL_CREATED',
  /** A channel is deleted. */
  ChannelDeleted = 'CHANNEL_DELETED',
  /** A channel metadata is updated. */
  ChannelMetadataUpdated = 'CHANNEL_METADATA_UPDATED',
  /** A channel status is changed. */
  ChannelStatusChanged = 'CHANNEL_STATUS_CHANGED',
  /** A channel is updated. */
  ChannelUpdated = 'CHANNEL_UPDATED',
  /**
   * Event called for checkout tax calculation.
   *
   * Added in Saleor 3.6.
   */
  CheckoutCalculateTaxes = 'CHECKOUT_CALCULATE_TAXES',
  /** A new checkout is created. */
  CheckoutCreated = 'CHECKOUT_CREATED',
  /** Filter shipping methods for checkout. */
  CheckoutFilterShippingMethods = 'CHECKOUT_FILTER_SHIPPING_METHODS',
  CheckoutFullyPaid = 'CHECKOUT_FULLY_PAID',
  /**
   * A checkout metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  CheckoutMetadataUpdated = 'CHECKOUT_METADATA_UPDATED',
  /** A checkout is updated. It also triggers all updates related to the checkout. */
  CheckoutUpdated = 'CHECKOUT_UPDATED',
  /** A new collection is created. */
  CollectionCreated = 'COLLECTION_CREATED',
  /** A collection is deleted. */
  CollectionDeleted = 'COLLECTION_DELETED',
  /**
   * A collection metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  CollectionMetadataUpdated = 'COLLECTION_METADATA_UPDATED',
  /** A collection is updated. */
  CollectionUpdated = 'COLLECTION_UPDATED',
  /** A new customer account is created. */
  CustomerCreated = 'CUSTOMER_CREATED',
  /** A customer account is deleted. */
  CustomerDeleted = 'CUSTOMER_DELETED',
  /**
   * A customer account metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  CustomerMetadataUpdated = 'CUSTOMER_METADATA_UPDATED',
  /** A customer account is updated. */
  CustomerUpdated = 'CUSTOMER_UPDATED',
  /** A draft order is created. */
  DraftOrderCreated = 'DRAFT_ORDER_CREATED',
  /** A draft order is deleted. */
  DraftOrderDeleted = 'DRAFT_ORDER_DELETED',
  /** A draft order is updated. */
  DraftOrderUpdated = 'DRAFT_ORDER_UPDATED',
  /** A fulfillment is approved. */
  FulfillmentApproved = 'FULFILLMENT_APPROVED',
  /** A fulfillment is cancelled. */
  FulfillmentCanceled = 'FULFILLMENT_CANCELED',
  /** A new fulfillment is created. */
  FulfillmentCreated = 'FULFILLMENT_CREATED',
  /**
   * A fulfillment metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  FulfillmentMetadataUpdated = 'FULFILLMENT_METADATA_UPDATED',
  FulfillmentTrackingNumberUpdated = 'FULFILLMENT_TRACKING_NUMBER_UPDATED',
  /** A new gift card created. */
  GiftCardCreated = 'GIFT_CARD_CREATED',
  /** A gift card is deleted. */
  GiftCardDeleted = 'GIFT_CARD_DELETED',
  /**
   * A gift card export is completed.
   *
   * Added in Saleor 3.16.
   */
  GiftCardExportCompleted = 'GIFT_CARD_EXPORT_COMPLETED',
  /**
   * A gift card metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  GiftCardMetadataUpdated = 'GIFT_CARD_METADATA_UPDATED',
  /**
   * A gift card has been sent.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  GiftCardSent = 'GIFT_CARD_SENT',
  /** A gift card status is changed. */
  GiftCardStatusChanged = 'GIFT_CARD_STATUS_CHANGED',
  /** A gift card is updated. */
  GiftCardUpdated = 'GIFT_CARD_UPDATED',
  /** An invoice is deleted. */
  InvoiceDeleted = 'INVOICE_DELETED',
  /** An invoice for order requested. */
  InvoiceRequested = 'INVOICE_REQUESTED',
  /** Invoice has been sent. */
  InvoiceSent = 'INVOICE_SENT',
  ListStoredPaymentMethods = 'LIST_STORED_PAYMENT_METHODS',
  /** A new menu created. */
  MenuCreated = 'MENU_CREATED',
  /** A menu is deleted. */
  MenuDeleted = 'MENU_DELETED',
  /** A new menu item created. */
  MenuItemCreated = 'MENU_ITEM_CREATED',
  /** A menu item is deleted. */
  MenuItemDeleted = 'MENU_ITEM_DELETED',
  /** A menu item is updated. */
  MenuItemUpdated = 'MENU_ITEM_UPDATED',
  /** A menu is updated. */
  MenuUpdated = 'MENU_UPDATED',
  /**
   * User notification triggered.
   *
   * DEPRECATED: this value will be removed in Saleor 4.0. See the docs for more details about migrating from NOTIFY_USER to other events: https://docs.saleor.io/docs/next/upgrade-guides/notify-user-deprecation
   */
  NotifyUser = 'NOTIFY_USER',
  /** An observability event is created. */
  Observability = 'OBSERVABILITY',
  /**
   * Orders are imported.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderBulkCreated = 'ORDER_BULK_CREATED',
  /**
   * Event called for order tax calculation.
   *
   * Added in Saleor 3.6.
   */
  OrderCalculateTaxes = 'ORDER_CALCULATE_TAXES',
  /** An order is cancelled. */
  OrderCancelled = 'ORDER_CANCELLED',
  /** An order is confirmed (status change unconfirmed -> unfulfilled) by a staff user using the OrderConfirm mutation. It also triggers when the user completes the checkout and the shop setting `automatically_confirm_all_new_orders` is enabled. */
  OrderConfirmed = 'ORDER_CONFIRMED',
  /** A new order is placed. */
  OrderCreated = 'ORDER_CREATED',
  /** An order is expired. */
  OrderExpired = 'ORDER_EXPIRED',
  /** Filter shipping methods for order. */
  OrderFilterShippingMethods = 'ORDER_FILTER_SHIPPING_METHODS',
  /** An order is fulfilled. */
  OrderFulfilled = 'ORDER_FULFILLED',
  /** Payment is made and an order is fully paid. */
  OrderFullyPaid = 'ORDER_FULLY_PAID',
  /**
   * The order is fully refunded.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderFullyRefunded = 'ORDER_FULLY_REFUNDED',
  /**
   * An order metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  OrderMetadataUpdated = 'ORDER_METADATA_UPDATED',
  /**
   * Payment has been made. The order may be partially or fully paid.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderPaid = 'ORDER_PAID',
  /**
   * The order received a refund. The order may be partially or fully refunded.
   *
   * Added in Saleor 3.14.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  OrderRefunded = 'ORDER_REFUNDED',
  /** An order is updated; triggered for all changes related to an order; covers all other order webhooks, except for ORDER_CREATED. */
  OrderUpdated = 'ORDER_UPDATED',
  /** A new page is created. */
  PageCreated = 'PAGE_CREATED',
  /** A page is deleted. */
  PageDeleted = 'PAGE_DELETED',
  /** A new page type is created. */
  PageTypeCreated = 'PAGE_TYPE_CREATED',
  /** A page type is deleted. */
  PageTypeDeleted = 'PAGE_TYPE_DELETED',
  /** A page type is updated. */
  PageTypeUpdated = 'PAGE_TYPE_UPDATED',
  /** A page is updated. */
  PageUpdated = 'PAGE_UPDATED',
  /** Authorize payment. */
  PaymentAuthorize = 'PAYMENT_AUTHORIZE',
  /** Capture payment. */
  PaymentCapture = 'PAYMENT_CAPTURE',
  /** Confirm payment. */
  PaymentConfirm = 'PAYMENT_CONFIRM',
  PaymentGatewayInitializeSession = 'PAYMENT_GATEWAY_INITIALIZE_SESSION',
  PaymentGatewayInitializeTokenizationSession = 'PAYMENT_GATEWAY_INITIALIZE_TOKENIZATION_SESSION',
  /** Listing available payment gateways. */
  PaymentListGateways = 'PAYMENT_LIST_GATEWAYS',
  PaymentMethodInitializeTokenizationSession = 'PAYMENT_METHOD_INITIALIZE_TOKENIZATION_SESSION',
  PaymentMethodProcessTokenizationSession = 'PAYMENT_METHOD_PROCESS_TOKENIZATION_SESSION',
  /** Process payment. */
  PaymentProcess = 'PAYMENT_PROCESS',
  /** Refund payment. */
  PaymentRefund = 'PAYMENT_REFUND',
  /** Void payment. */
  PaymentVoid = 'PAYMENT_VOID',
  /** A new permission group is created. */
  PermissionGroupCreated = 'PERMISSION_GROUP_CREATED',
  /** A permission group is deleted. */
  PermissionGroupDeleted = 'PERMISSION_GROUP_DELETED',
  /** A permission group is updated. */
  PermissionGroupUpdated = 'PERMISSION_GROUP_UPDATED',
  /** A new product is created. */
  ProductCreated = 'PRODUCT_CREATED',
  /** A product is deleted. */
  ProductDeleted = 'PRODUCT_DELETED',
  /**
   * A product export is completed.
   *
   * Added in Saleor 3.16.
   */
  ProductExportCompleted = 'PRODUCT_EXPORT_COMPLETED',
  /**
   * A new product media is created.
   *
   * Added in Saleor 3.12.
   */
  ProductMediaCreated = 'PRODUCT_MEDIA_CREATED',
  /**
   * A product media is deleted.
   *
   * Added in Saleor 3.12.
   */
  ProductMediaDeleted = 'PRODUCT_MEDIA_DELETED',
  /**
   * A product media is updated.
   *
   * Added in Saleor 3.12.
   */
  ProductMediaUpdated = 'PRODUCT_MEDIA_UPDATED',
  /**
   * A product metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  ProductMetadataUpdated = 'PRODUCT_METADATA_UPDATED',
  /** A product is updated. */
  ProductUpdated = 'PRODUCT_UPDATED',
  /** A product variant is back in stock. */
  ProductVariantBackInStock = 'PRODUCT_VARIANT_BACK_IN_STOCK',
  /** A new product variant is created. */
  ProductVariantCreated = 'PRODUCT_VARIANT_CREATED',
  /** A product variant is deleted. Warning: this event will not be executed when parent product has been deleted. Check PRODUCT_DELETED. */
  ProductVariantDeleted = 'PRODUCT_VARIANT_DELETED',
  /**
   * A product variant metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  ProductVariantMetadataUpdated = 'PRODUCT_VARIANT_METADATA_UPDATED',
  /** A product variant is out of stock. */
  ProductVariantOutOfStock = 'PRODUCT_VARIANT_OUT_OF_STOCK',
  /** A product variant stock is updated */
  ProductVariantStockUpdated = 'PRODUCT_VARIANT_STOCK_UPDATED',
  /** A product variant is updated. */
  ProductVariantUpdated = 'PRODUCT_VARIANT_UPDATED',
  /** A promotion is created. */
  PromotionCreated = 'PROMOTION_CREATED',
  /** A promotion is deleted. */
  PromotionDeleted = 'PROMOTION_DELETED',
  /** A promotion is deactivated. */
  PromotionEnded = 'PROMOTION_ENDED',
  /** A promotion rule is created. */
  PromotionRuleCreated = 'PROMOTION_RULE_CREATED',
  /** A promotion rule is deleted. */
  PromotionRuleDeleted = 'PROMOTION_RULE_DELETED',
  /** A promotion rule is updated. */
  PromotionRuleUpdated = 'PROMOTION_RULE_UPDATED',
  /** A promotion is activated. */
  PromotionStarted = 'PROMOTION_STARTED',
  /** A promotion is updated. */
  PromotionUpdated = 'PROMOTION_UPDATED',
  /** A sale is created. */
  SaleCreated = 'SALE_CREATED',
  /** A sale is deleted. */
  SaleDeleted = 'SALE_DELETED',
  /** A sale is activated or deactivated. */
  SaleToggle = 'SALE_TOGGLE',
  /** A sale is updated. */
  SaleUpdated = 'SALE_UPDATED',
  /** Fetch external shipping methods for checkout. */
  ShippingListMethodsForCheckout = 'SHIPPING_LIST_METHODS_FOR_CHECKOUT',
  /** A new shipping price is created. */
  ShippingPriceCreated = 'SHIPPING_PRICE_CREATED',
  /** A shipping price is deleted. */
  ShippingPriceDeleted = 'SHIPPING_PRICE_DELETED',
  /** A shipping price is updated. */
  ShippingPriceUpdated = 'SHIPPING_PRICE_UPDATED',
  /** A new shipping zone is created. */
  ShippingZoneCreated = 'SHIPPING_ZONE_CREATED',
  /** A shipping zone is deleted. */
  ShippingZoneDeleted = 'SHIPPING_ZONE_DELETED',
  /**
   * A shipping zone metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  ShippingZoneMetadataUpdated = 'SHIPPING_ZONE_METADATA_UPDATED',
  /** A shipping zone is updated. */
  ShippingZoneUpdated = 'SHIPPING_ZONE_UPDATED',
  /**
   * Shop metadata is updated.
   *
   * Added in Saleor 3.15.
   */
  ShopMetadataUpdated = 'SHOP_METADATA_UPDATED',
  /** A new staff user is created. */
  StaffCreated = 'STAFF_CREATED',
  /** A staff user is deleted. */
  StaffDeleted = 'STAFF_DELETED',
  /** Setting a new password for the staff account is requested. */
  StaffSetPasswordRequested = 'STAFF_SET_PASSWORD_REQUESTED',
  /** A staff user is updated. */
  StaffUpdated = 'STAFF_UPDATED',
  StoredPaymentMethodDeleteRequested = 'STORED_PAYMENT_METHOD_DELETE_REQUESTED',
  /**
   * A thumbnail is created.
   *
   * Added in Saleor 3.12.
   */
  ThumbnailCreated = 'THUMBNAIL_CREATED',
  /**
   * Event called when cancel has been requested for transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  TransactionCancelationRequested = 'TRANSACTION_CANCELATION_REQUESTED',
  /**
   * Event called when charge has been requested for transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  TransactionChargeRequested = 'TRANSACTION_CHARGE_REQUESTED',
  TransactionInitializeSession = 'TRANSACTION_INITIALIZE_SESSION',
  /**
   * Transaction item metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  TransactionItemMetadataUpdated = 'TRANSACTION_ITEM_METADATA_UPDATED',
  TransactionProcessSession = 'TRANSACTION_PROCESS_SESSION',
  /**
   * Event called when refund has been requested for transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  TransactionRefundRequested = 'TRANSACTION_REFUND_REQUESTED',
  /** A new translation is created. */
  TranslationCreated = 'TRANSLATION_CREATED',
  /** A translation is updated. */
  TranslationUpdated = 'TRANSLATION_UPDATED',
  VoucherCodesCreated = 'VOUCHER_CODES_CREATED',
  VoucherCodesDeleted = 'VOUCHER_CODES_DELETED',
  /**
   * A voucher code export is completed.
   *
   * Added in Saleor 3.18.
   */
  VoucherCodeExportCompleted = 'VOUCHER_CODE_EXPORT_COMPLETED',
  /** A new voucher created. */
  VoucherCreated = 'VOUCHER_CREATED',
  /** A voucher is deleted. */
  VoucherDeleted = 'VOUCHER_DELETED',
  /**
   * A voucher metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  VoucherMetadataUpdated = 'VOUCHER_METADATA_UPDATED',
  /** A voucher is updated. */
  VoucherUpdated = 'VOUCHER_UPDATED',
  /** A new warehouse created. */
  WarehouseCreated = 'WAREHOUSE_CREATED',
  /** A warehouse is deleted. */
  WarehouseDeleted = 'WAREHOUSE_DELETED',
  /**
   * A warehouse metadata is updated.
   *
   * Added in Saleor 3.8.
   */
  WarehouseMetadataUpdated = 'WAREHOUSE_METADATA_UPDATED',
  /** A warehouse is updated. */
  WarehouseUpdated = 'WAREHOUSE_UPDATED'
}

/** Enum determining type of webhook. */
export enum SaleorGraphql_WebhookEventTypeSyncEnum {
  /**
   * Event called for checkout tax calculation.
   *
   * Added in Saleor 3.6.
   */
  CheckoutCalculateTaxes = 'CHECKOUT_CALCULATE_TAXES',
  /** Filter shipping methods for checkout. */
  CheckoutFilterShippingMethods = 'CHECKOUT_FILTER_SHIPPING_METHODS',
  ListStoredPaymentMethods = 'LIST_STORED_PAYMENT_METHODS',
  /**
   * Event called for order tax calculation.
   *
   * Added in Saleor 3.6.
   */
  OrderCalculateTaxes = 'ORDER_CALCULATE_TAXES',
  /** Filter shipping methods for order. */
  OrderFilterShippingMethods = 'ORDER_FILTER_SHIPPING_METHODS',
  /** Authorize payment. */
  PaymentAuthorize = 'PAYMENT_AUTHORIZE',
  /** Capture payment. */
  PaymentCapture = 'PAYMENT_CAPTURE',
  /** Confirm payment. */
  PaymentConfirm = 'PAYMENT_CONFIRM',
  PaymentGatewayInitializeSession = 'PAYMENT_GATEWAY_INITIALIZE_SESSION',
  PaymentGatewayInitializeTokenizationSession = 'PAYMENT_GATEWAY_INITIALIZE_TOKENIZATION_SESSION',
  /** Listing available payment gateways. */
  PaymentListGateways = 'PAYMENT_LIST_GATEWAYS',
  PaymentMethodInitializeTokenizationSession = 'PAYMENT_METHOD_INITIALIZE_TOKENIZATION_SESSION',
  PaymentMethodProcessTokenizationSession = 'PAYMENT_METHOD_PROCESS_TOKENIZATION_SESSION',
  /** Process payment. */
  PaymentProcess = 'PAYMENT_PROCESS',
  /** Refund payment. */
  PaymentRefund = 'PAYMENT_REFUND',
  /** Void payment. */
  PaymentVoid = 'PAYMENT_VOID',
  /** Fetch external shipping methods for checkout. */
  ShippingListMethodsForCheckout = 'SHIPPING_LIST_METHODS_FOR_CHECKOUT',
  StoredPaymentMethodDeleteRequested = 'STORED_PAYMENT_METHOD_DELETE_REQUESTED',
  /**
   * Event called when cancel has been requested for transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  TransactionCancelationRequested = 'TRANSACTION_CANCELATION_REQUESTED',
  /**
   * Event called when charge has been requested for transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  TransactionChargeRequested = 'TRANSACTION_CHARGE_REQUESTED',
  TransactionInitializeSession = 'TRANSACTION_INITIALIZE_SESSION',
  TransactionProcessSession = 'TRANSACTION_PROCESS_SESSION',
  /**
   * Event called when refund has been requested for transaction.
   *
   * Added in Saleor 3.13.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  TransactionRefundRequested = 'TRANSACTION_REFUND_REQUESTED'
}

/** An enumeration. */
export enum SaleorGraphql_WebhookSampleEventTypeEnum {
  AccountChangeEmailRequested = 'ACCOUNT_CHANGE_EMAIL_REQUESTED',
  AccountConfirmationRequested = 'ACCOUNT_CONFIRMATION_REQUESTED',
  AccountConfirmed = 'ACCOUNT_CONFIRMED',
  AccountDeleted = 'ACCOUNT_DELETED',
  AccountDeleteRequested = 'ACCOUNT_DELETE_REQUESTED',
  AccountEmailChanged = 'ACCOUNT_EMAIL_CHANGED',
  AccountSetPasswordRequested = 'ACCOUNT_SET_PASSWORD_REQUESTED',
  AddressCreated = 'ADDRESS_CREATED',
  AddressDeleted = 'ADDRESS_DELETED',
  AddressUpdated = 'ADDRESS_UPDATED',
  AppDeleted = 'APP_DELETED',
  AppInstalled = 'APP_INSTALLED',
  AppStatusChanged = 'APP_STATUS_CHANGED',
  AppUpdated = 'APP_UPDATED',
  AttributeCreated = 'ATTRIBUTE_CREATED',
  AttributeDeleted = 'ATTRIBUTE_DELETED',
  AttributeUpdated = 'ATTRIBUTE_UPDATED',
  AttributeValueCreated = 'ATTRIBUTE_VALUE_CREATED',
  AttributeValueDeleted = 'ATTRIBUTE_VALUE_DELETED',
  AttributeValueUpdated = 'ATTRIBUTE_VALUE_UPDATED',
  CategoryCreated = 'CATEGORY_CREATED',
  CategoryDeleted = 'CATEGORY_DELETED',
  CategoryUpdated = 'CATEGORY_UPDATED',
  ChannelCreated = 'CHANNEL_CREATED',
  ChannelDeleted = 'CHANNEL_DELETED',
  ChannelMetadataUpdated = 'CHANNEL_METADATA_UPDATED',
  ChannelStatusChanged = 'CHANNEL_STATUS_CHANGED',
  ChannelUpdated = 'CHANNEL_UPDATED',
  CheckoutCreated = 'CHECKOUT_CREATED',
  CheckoutFullyPaid = 'CHECKOUT_FULLY_PAID',
  CheckoutMetadataUpdated = 'CHECKOUT_METADATA_UPDATED',
  CheckoutUpdated = 'CHECKOUT_UPDATED',
  CollectionCreated = 'COLLECTION_CREATED',
  CollectionDeleted = 'COLLECTION_DELETED',
  CollectionMetadataUpdated = 'COLLECTION_METADATA_UPDATED',
  CollectionUpdated = 'COLLECTION_UPDATED',
  CustomerCreated = 'CUSTOMER_CREATED',
  CustomerDeleted = 'CUSTOMER_DELETED',
  CustomerMetadataUpdated = 'CUSTOMER_METADATA_UPDATED',
  CustomerUpdated = 'CUSTOMER_UPDATED',
  DraftOrderCreated = 'DRAFT_ORDER_CREATED',
  DraftOrderDeleted = 'DRAFT_ORDER_DELETED',
  DraftOrderUpdated = 'DRAFT_ORDER_UPDATED',
  FulfillmentApproved = 'FULFILLMENT_APPROVED',
  FulfillmentCanceled = 'FULFILLMENT_CANCELED',
  FulfillmentCreated = 'FULFILLMENT_CREATED',
  FulfillmentMetadataUpdated = 'FULFILLMENT_METADATA_UPDATED',
  FulfillmentTrackingNumberUpdated = 'FULFILLMENT_TRACKING_NUMBER_UPDATED',
  GiftCardCreated = 'GIFT_CARD_CREATED',
  GiftCardDeleted = 'GIFT_CARD_DELETED',
  GiftCardExportCompleted = 'GIFT_CARD_EXPORT_COMPLETED',
  GiftCardMetadataUpdated = 'GIFT_CARD_METADATA_UPDATED',
  GiftCardSent = 'GIFT_CARD_SENT',
  GiftCardStatusChanged = 'GIFT_CARD_STATUS_CHANGED',
  GiftCardUpdated = 'GIFT_CARD_UPDATED',
  InvoiceDeleted = 'INVOICE_DELETED',
  InvoiceRequested = 'INVOICE_REQUESTED',
  InvoiceSent = 'INVOICE_SENT',
  MenuCreated = 'MENU_CREATED',
  MenuDeleted = 'MENU_DELETED',
  MenuItemCreated = 'MENU_ITEM_CREATED',
  MenuItemDeleted = 'MENU_ITEM_DELETED',
  MenuItemUpdated = 'MENU_ITEM_UPDATED',
  MenuUpdated = 'MENU_UPDATED',
  NotifyUser = 'NOTIFY_USER',
  Observability = 'OBSERVABILITY',
  OrderBulkCreated = 'ORDER_BULK_CREATED',
  OrderCancelled = 'ORDER_CANCELLED',
  OrderConfirmed = 'ORDER_CONFIRMED',
  OrderCreated = 'ORDER_CREATED',
  OrderExpired = 'ORDER_EXPIRED',
  OrderFulfilled = 'ORDER_FULFILLED',
  OrderFullyPaid = 'ORDER_FULLY_PAID',
  OrderFullyRefunded = 'ORDER_FULLY_REFUNDED',
  OrderMetadataUpdated = 'ORDER_METADATA_UPDATED',
  OrderPaid = 'ORDER_PAID',
  OrderRefunded = 'ORDER_REFUNDED',
  OrderUpdated = 'ORDER_UPDATED',
  PageCreated = 'PAGE_CREATED',
  PageDeleted = 'PAGE_DELETED',
  PageTypeCreated = 'PAGE_TYPE_CREATED',
  PageTypeDeleted = 'PAGE_TYPE_DELETED',
  PageTypeUpdated = 'PAGE_TYPE_UPDATED',
  PageUpdated = 'PAGE_UPDATED',
  PermissionGroupCreated = 'PERMISSION_GROUP_CREATED',
  PermissionGroupDeleted = 'PERMISSION_GROUP_DELETED',
  PermissionGroupUpdated = 'PERMISSION_GROUP_UPDATED',
  ProductCreated = 'PRODUCT_CREATED',
  ProductDeleted = 'PRODUCT_DELETED',
  ProductExportCompleted = 'PRODUCT_EXPORT_COMPLETED',
  ProductMediaCreated = 'PRODUCT_MEDIA_CREATED',
  ProductMediaDeleted = 'PRODUCT_MEDIA_DELETED',
  ProductMediaUpdated = 'PRODUCT_MEDIA_UPDATED',
  ProductMetadataUpdated = 'PRODUCT_METADATA_UPDATED',
  ProductUpdated = 'PRODUCT_UPDATED',
  ProductVariantBackInStock = 'PRODUCT_VARIANT_BACK_IN_STOCK',
  ProductVariantCreated = 'PRODUCT_VARIANT_CREATED',
  ProductVariantDeleted = 'PRODUCT_VARIANT_DELETED',
  ProductVariantMetadataUpdated = 'PRODUCT_VARIANT_METADATA_UPDATED',
  ProductVariantOutOfStock = 'PRODUCT_VARIANT_OUT_OF_STOCK',
  ProductVariantStockUpdated = 'PRODUCT_VARIANT_STOCK_UPDATED',
  ProductVariantUpdated = 'PRODUCT_VARIANT_UPDATED',
  PromotionCreated = 'PROMOTION_CREATED',
  PromotionDeleted = 'PROMOTION_DELETED',
  PromotionEnded = 'PROMOTION_ENDED',
  PromotionRuleCreated = 'PROMOTION_RULE_CREATED',
  PromotionRuleDeleted = 'PROMOTION_RULE_DELETED',
  PromotionRuleUpdated = 'PROMOTION_RULE_UPDATED',
  PromotionStarted = 'PROMOTION_STARTED',
  PromotionUpdated = 'PROMOTION_UPDATED',
  SaleCreated = 'SALE_CREATED',
  SaleDeleted = 'SALE_DELETED',
  SaleToggle = 'SALE_TOGGLE',
  SaleUpdated = 'SALE_UPDATED',
  ShippingPriceCreated = 'SHIPPING_PRICE_CREATED',
  ShippingPriceDeleted = 'SHIPPING_PRICE_DELETED',
  ShippingPriceUpdated = 'SHIPPING_PRICE_UPDATED',
  ShippingZoneCreated = 'SHIPPING_ZONE_CREATED',
  ShippingZoneDeleted = 'SHIPPING_ZONE_DELETED',
  ShippingZoneMetadataUpdated = 'SHIPPING_ZONE_METADATA_UPDATED',
  ShippingZoneUpdated = 'SHIPPING_ZONE_UPDATED',
  ShopMetadataUpdated = 'SHOP_METADATA_UPDATED',
  StaffCreated = 'STAFF_CREATED',
  StaffDeleted = 'STAFF_DELETED',
  StaffSetPasswordRequested = 'STAFF_SET_PASSWORD_REQUESTED',
  StaffUpdated = 'STAFF_UPDATED',
  ThumbnailCreated = 'THUMBNAIL_CREATED',
  TransactionItemMetadataUpdated = 'TRANSACTION_ITEM_METADATA_UPDATED',
  TranslationCreated = 'TRANSLATION_CREATED',
  TranslationUpdated = 'TRANSLATION_UPDATED',
  VoucherCodesCreated = 'VOUCHER_CODES_CREATED',
  VoucherCodesDeleted = 'VOUCHER_CODES_DELETED',
  VoucherCodeExportCompleted = 'VOUCHER_CODE_EXPORT_COMPLETED',
  VoucherCreated = 'VOUCHER_CREATED',
  VoucherDeleted = 'VOUCHER_DELETED',
  VoucherMetadataUpdated = 'VOUCHER_METADATA_UPDATED',
  VoucherUpdated = 'VOUCHER_UPDATED',
  WarehouseCreated = 'WAREHOUSE_CREATED',
  WarehouseDeleted = 'WAREHOUSE_DELETED',
  WarehouseMetadataUpdated = 'WAREHOUSE_METADATA_UPDATED',
  WarehouseUpdated = 'WAREHOUSE_UPDATED'
}

/**
 * Trigger a webhook event. Supports a single event (the first, if multiple provided in the `webhook.subscription_query`). Requires permission relevant to processed event. Successfully delivered webhook returns `delivery` with status='PENDING' and empty payload.
 *
 * Added in Saleor 3.11.
 *
 * Note: this API is currently in Feature Preview and can be subject to changes at later point.
 *
 * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
 */
export type SaleorGraphql_WebhookTrigger = {
  __typename?: 'WebhookTrigger';
  delivery?: Maybe<FieldWrapper<SaleorGraphql_EventDelivery>>;
  errors: Array<FieldWrapper<SaleorGraphql_WebhookTriggerError>>;
};

export type SaleorGraphql_WebhookTriggerError = {
  __typename?: 'WebhookTriggerError';
  /** The error code. */
  code: FieldWrapper<SaleorGraphql_WebhookTriggerErrorCode | '%future added value'>;
  /** Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field. */
  field?: Maybe<FieldWrapper<Scalars['String']['output']>>;
  /** The error message. */
  message?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

/** An enumeration. */
export enum SaleorGraphql_WebhookTriggerErrorCode {
  GraphqlError = 'GRAPHQL_ERROR',
  InvalidId = 'INVALID_ID',
  MissingEvent = 'MISSING_EVENT',
  MissingPermission = 'MISSING_PERMISSION',
  MissingQuery = 'MISSING_QUERY',
  MissingSubscription = 'MISSING_SUBSCRIPTION',
  NotFound = 'NOT_FOUND',
  Syntax = 'SYNTAX',
  TypeNotSupported = 'TYPE_NOT_SUPPORTED',
  UnableToParse = 'UNABLE_TO_PARSE'
}

/**
 * Updates a webhook subscription.
 *
 * Requires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP.
 */
export type SaleorGraphql_WebhookUpdate = {
  __typename?: 'WebhookUpdate';
  errors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
  webhook?: Maybe<FieldWrapper<SaleorGraphql_Webhook>>;
  /** @deprecated This field will be removed in Saleor 4.0. Use `errors` field instead. */
  webhookErrors: Array<FieldWrapper<SaleorGraphql_WebhookError>>;
};

export type SaleorGraphql_WebhookUpdateInput = {
  /** ID of the app to which webhook belongs. */
  app?: InputMaybe<Scalars['ID']['input']>;
  /** The asynchronous events that webhook wants to subscribe. */
  asyncEvents?: InputMaybe<Array<SaleorGraphql_WebhookEventTypeAsyncEnum | '%future added value'>>;
  /**
   * Custom headers, which will be added to HTTP request. There is a limitation of 5 headers per webhook and 998 characters per header.Only `X-*`, `Authorization*`, and `BrokerProperties` keys are allowed.
   *
   * Added in Saleor 3.12.
   *
   * Note: this API is currently in Feature Preview and can be subject to changes at later point.
   */
  customHeaders?: InputMaybe<Scalars['JSONString']['input']>;
  /**
   * The events that webhook wants to subscribe.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. Use `asyncEvents` or `syncEvents` instead.
   */
  events?: InputMaybe<Array<SaleorGraphql_WebhookEventTypeEnum | '%future added value'>>;
  /** Determine if webhook will be set active or not. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** The new name of the webhook. */
  name?: InputMaybe<Scalars['String']['input']>;
  /**
   * Subscription query used to define a webhook payload.
   *
   * Added in Saleor 3.2.
   */
  query?: InputMaybe<Scalars['String']['input']>;
  /**
   * Use to create a hash signature with each payload.
   *
   * DEPRECATED: this field will be removed in Saleor 4.0. As of Saleor 3.5, webhook payloads default to signing using a verifiable JWS.
   */
  secretKey?: InputMaybe<Scalars['String']['input']>;
  /** The synchronous events that webhook wants to subscribe. */
  syncEvents?: InputMaybe<Array<SaleorGraphql_WebhookEventTypeSyncEnum | '%future added value'>>;
  /** The url to receive the payload. */
  targetUrl?: InputMaybe<Scalars['String']['input']>;
};

/** Represents weight value in a specific weight unit. */
export type SaleorGraphql_Weight = {
  __typename?: 'Weight';
  /** Weight unit. */
  unit: FieldWrapper<SaleorGraphql_WeightUnitsEnum | '%future added value'>;
  /** Weight value. Returns a value with maximal three decimal places */
  value: FieldWrapper<Scalars['Float']['output']>;
};

/** An enumeration. */
export enum SaleorGraphql_WeightUnitsEnum {
  G = 'G',
  Kg = 'KG',
  Lb = 'LB',
  Oz = 'OZ',
  Tonne = 'TONNE'
}

/** _Entity union as defined by Federation spec. */
export type SaleorGraphql__Entity = SaleorGraphql_Address | SaleorGraphql_App | SaleorGraphql_Category | SaleorGraphql_Collection | SaleorGraphql_Group | SaleorGraphql_Order | SaleorGraphql_PageType | SaleorGraphql_Product | SaleorGraphql_ProductMedia | SaleorGraphql_ProductType | SaleorGraphql_ProductVariant | SaleorGraphql_User;

/** _Service manifest as defined by Federation spec. */
export type SaleorGraphql__Service = {
  __typename?: '_Service';
  sdl?: Maybe<FieldWrapper<Scalars['String']['output']>>;
};

export type SaleorGraphql_ProductListItemFragment = { __typename?: 'Product', id: string, name: string, slug: string, pricing?: { __typename?: 'ProductPricingInfo', priceRange?: { __typename?: 'TaxedMoneyRange', start?: { __typename?: 'TaxedMoney', gross: { __typename?: 'Money', amount: number, currency: string } } | null, stop?: { __typename?: 'TaxedMoney', gross: { __typename?: 'Money', amount: number, currency: string } } | null } | null } | null, category?: { __typename?: 'Category', id: string, name: string, slug: string, ancestors?: { __typename?: 'CategoryCountableConnection', edges: Array<{ __typename?: 'CategoryCountableEdge', node: { __typename?: 'Category', id: string, name: string, slug: string } }> } | null } | null, thumbnail?: { __typename?: 'Image', url: string, alt?: string | null } | null, variants?: Array<{ __typename?: 'ProductVariant', id: string, name: string, quantityAvailable?: number | null, sku?: string | null, media?: Array<{ __typename?: 'ProductMedia', id: string, url: string, alt: string }> | null, attributes: Array<{ __typename?: 'SelectedAttribute', values: Array<{ __typename?: 'AttributeValue', slug?: string | null, name?: string | null }>, attribute: { __typename?: 'Attribute', slug?: string | null, name?: string | null } }>, pricing?: { __typename?: 'VariantPricingInfo', price?: { __typename?: 'TaxedMoney', net: { __typename?: 'Money', currency: string, amount: number }, gross: { __typename?: 'Money', currency: string, amount: number } } | null } | null }> | null };

export type SaleorGraphql_VariantDetailsFragment = { __typename?: 'ProductVariant', id: string, name: string, quantityAvailable?: number | null, sku?: string | null, media?: Array<{ __typename?: 'ProductMedia', id: string, url: string, alt: string }> | null, attributes: Array<{ __typename?: 'SelectedAttribute', values: Array<{ __typename?: 'AttributeValue', slug?: string | null, name?: string | null }>, attribute: { __typename?: 'Attribute', slug?: string | null, name?: string | null } }>, pricing?: { __typename?: 'VariantPricingInfo', price?: { __typename?: 'TaxedMoney', net: { __typename?: 'Money', currency: string, amount: number }, gross: { __typename?: 'Money', currency: string, amount: number } } | null } | null };

export type SaleorGraphql_CurrentUserAddressCreateMutationVariables = Exact<{
  address: SaleorGraphql_AddressInput;
}>;


export type SaleorGraphql_CurrentUserAddressCreateMutation = { accountAddressCreate?: { __typename?: 'AccountAddressCreate', errors: Array<{ __typename?: 'AccountError', field?: string | null }>, address?: { __typename?: 'Address', id: string } | null } | null };

export type SaleorGraphql_ProductListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type SaleorGraphql_ProductListQuery = { products?: { __typename?: 'ProductCountableConnection', totalCount?: number | null, edges: Array<{ __typename?: 'ProductCountableEdge', cursor: string, node: { __typename?: 'Product', id: string, name: string, slug: string, pricing?: { __typename?: 'ProductPricingInfo', priceRange?: { __typename?: 'TaxedMoneyRange', start?: { __typename?: 'TaxedMoney', gross: { __typename?: 'Money', amount: number, currency: string } } | null, stop?: { __typename?: 'TaxedMoney', gross: { __typename?: 'Money', amount: number, currency: string } } | null } | null } | null, category?: { __typename?: 'Category', id: string, name: string, slug: string, ancestors?: { __typename?: 'CategoryCountableConnection', edges: Array<{ __typename?: 'CategoryCountableEdge', node: { __typename?: 'Category', id: string, name: string, slug: string } }> } | null } | null, thumbnail?: { __typename?: 'Image', url: string, alt?: string | null } | null, variants?: Array<{ __typename?: 'ProductVariant', id: string, name: string, quantityAvailable?: number | null, sku?: string | null, media?: Array<{ __typename?: 'ProductMedia', id: string, url: string, alt: string }> | null, attributes: Array<{ __typename?: 'SelectedAttribute', values: Array<{ __typename?: 'AttributeValue', slug?: string | null, name?: string | null }>, attribute: { __typename?: 'Attribute', slug?: string | null, name?: string | null } }>, pricing?: { __typename?: 'VariantPricingInfo', price?: { __typename?: 'TaxedMoney', net: { __typename?: 'Money', currency: string, amount: number }, gross: { __typename?: 'Money', currency: string, amount: number } } | null } | null }> | null } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } | null };


export const SaleorGraphql_VariantDetailsFragmentDoc = `
    fragment VariantDetails on ProductVariant {
  id
  name
  quantityAvailable
  sku
  media {
    id
    url
    alt
  }
  attributes(variantSelection: VARIANT_SELECTION) {
    values {
      slug
      name
    }
    attribute {
      slug
      name
    }
  }
  pricing {
    price {
      net {
        currency
        amount
      }
      gross {
        currency
        amount
      }
    }
  }
}
    `;
export const SaleorGraphql_ProductListItemFragmentDoc = `
    fragment ProductListItem on Product {
  id
  name
  slug
  pricing {
    priceRange {
      start {
        gross {
          amount
          currency
        }
      }
      stop {
        gross {
          amount
          currency
        }
      }
    }
  }
  category {
    id
    name
    slug
    ancestors(first: 100) {
      edges {
        node {
          id
          name
          slug
        }
      }
    }
  }
  thumbnail(size: 1024, format: WEBP) {
    url
    alt
  }
  variants {
    ...VariantDetails
  }
}
    `;
export const SaleorGraphql_CurrentUserAddressCreateDocument = `
    mutation CurrentUserAddressCreate($address: AddressInput!) {
  accountAddressCreate(input: $address) {
    errors {
      field
    }
    address {
      id
    }
  }
}
    `;

export const useCurrentUserAddressCreateMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SaleorGraphql_CurrentUserAddressCreateMutation, TError, SaleorGraphql_CurrentUserAddressCreateMutationVariables, TContext>) => {
    
    return useMutation<SaleorGraphql_CurrentUserAddressCreateMutation, TError, SaleorGraphql_CurrentUserAddressCreateMutationVariables, TContext>(
      {
    mutationKey: ['CurrentUserAddressCreate'],
    mutationFn: (variables?: SaleorGraphql_CurrentUserAddressCreateMutationVariables) => fetcher<SaleorGraphql_CurrentUserAddressCreateMutation, SaleorGraphql_CurrentUserAddressCreateMutationVariables>(SaleorGraphql_CurrentUserAddressCreateDocument, variables)(),
    ...options
  }
    )};

useCurrentUserAddressCreateMutation.getKey = () => ['CurrentUserAddressCreate'];


useCurrentUserAddressCreateMutation.fetcher = (variables: SaleorGraphql_CurrentUserAddressCreateMutationVariables, options?: RequestInit['headers']) => fetcher<SaleorGraphql_CurrentUserAddressCreateMutation, SaleorGraphql_CurrentUserAddressCreateMutationVariables>(SaleorGraphql_CurrentUserAddressCreateDocument, variables, options);

export const SaleorGraphql_ProductListDocument = `
    query ProductList($first: Int!, $after: String) {
  products(first: $first, channel: "tr", after: $after) {
    totalCount
    edges {
      node {
        id
        ...ProductListItem
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}
    ${SaleorGraphql_ProductListItemFragmentDoc}
${SaleorGraphql_VariantDetailsFragmentDoc}`;

export const useProductListQuery = <
      TData = SaleorGraphql_ProductListQuery,
      TError = unknown
    >(
      variables: SaleorGraphql_ProductListQueryVariables,
      options?: Omit<UseQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<SaleorGraphql_ProductListQuery, TError, TData>(
      {
    queryKey: ['ProductList', variables],
    queryFn: fetcher<SaleorGraphql_ProductListQuery, SaleorGraphql_ProductListQueryVariables>(SaleorGraphql_ProductListDocument, variables),
    ...options
  }
    )};

useProductListQuery.document = SaleorGraphql_ProductListDocument;

useProductListQuery.getKey = (variables: SaleorGraphql_ProductListQueryVariables) => ['ProductList', variables];

useProductListQuery.rootKey = 'ProductList';

export const useSuspenseProductListQuery = <
      TData = SaleorGraphql_ProductListQuery,
      TError = unknown
    >(
      variables: SaleorGraphql_ProductListQueryVariables,
      options?: Omit<UseSuspenseQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>, 'queryKey'> & { queryKey?: UseSuspenseQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useSuspenseQuery<SaleorGraphql_ProductListQuery, TError, TData>(
      {
    queryKey: ['ProductListSuspense', variables],
    queryFn: fetcher<SaleorGraphql_ProductListQuery, SaleorGraphql_ProductListQueryVariables>(SaleorGraphql_ProductListDocument, variables),
    ...options
  }
    )};

useSuspenseProductListQuery.document = SaleorGraphql_ProductListDocument;

useSuspenseProductListQuery.getKey = (variables: SaleorGraphql_ProductListQueryVariables) => ['ProductListSuspense', variables];

useSuspenseProductListQuery.rootKey = 'ProductList';

export const useInfiniteProductListQuery = <
      TData = InfiniteData<SaleorGraphql_ProductListQuery>,
      TError = unknown
    >(
      variables: SaleorGraphql_ProductListQueryVariables,
      options: Omit<UseInfiniteQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>, 'queryKey'> & { queryKey?: UseInfiniteQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useInfiniteQuery<SaleorGraphql_ProductListQuery, TError, TData>(
      (() => {
    const { queryKey: optionsQueryKey, ...restOptions } = options;
    return {
      queryKey: optionsQueryKey ?? ['ProductList.infinite', variables],
      queryFn: (metaData) => fetcher<SaleorGraphql_ProductListQuery, SaleorGraphql_ProductListQueryVariables>(SaleorGraphql_ProductListDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      ...restOptions
    }
  })()
    )};

useInfiniteProductListQuery.getKey = (variables: SaleorGraphql_ProductListQueryVariables) => ['ProductList.infinite', variables];

useInfiniteProductListQuery.rootKey = 'ProductList.infinite';

export const useSuspenseInfiniteProductListQuery = <
      TData = InfiniteData<SaleorGraphql_ProductListQuery>,
      TError = unknown
    >(
      variables: SaleorGraphql_ProductListQueryVariables,
      options: Omit<UseSuspenseInfiniteQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>, 'queryKey'> & { queryKey?: UseSuspenseInfiniteQueryOptions<SaleorGraphql_ProductListQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useSuspenseInfiniteQuery<SaleorGraphql_ProductListQuery, TError, TData>(
      (() => {
    const { queryKey: optionsQueryKey, ...restOptions } = options;
    return {
      queryKey: optionsQueryKey ?? ['ProductList.infiniteSuspense', variables],
      queryFn: (metaData) => fetcher<SaleorGraphql_ProductListQuery, SaleorGraphql_ProductListQueryVariables>(SaleorGraphql_ProductListDocument, {...variables, ...(metaData.pageParam ?? {})})(),
      ...restOptions
    }
  })()
    )};

useSuspenseInfiniteProductListQuery.getKey = (variables: SaleorGraphql_ProductListQueryVariables) => ['ProductList.infiniteSuspense', variables];

useSuspenseInfiniteProductListQuery.rootKey = 'ProductList.infinite';


useProductListQuery.fetcher = (variables: SaleorGraphql_ProductListQueryVariables, options?: RequestInit['headers']) => fetcher<SaleorGraphql_ProductListQuery, SaleorGraphql_ProductListQueryVariables>(SaleorGraphql_ProductListDocument, variables, options);
