version: "3"

dotenv: [".env", "{{.ENV}}/.env.", "{{.HOME}}/.env"]

interval: 500ms

includes:
  ecom:
    taskfile: ./packages/ecom/Taskfile.yml
  cms:
    taskfile: ./packages/cms/Taskfile.yml
  storefront:
    taskfile: ./apps/storefront/Taskfile.yml
  tinacms:
    taskfile: ./apps/tinacms/Taskfile.yml

tasks:
  install:
    cmds:
      - bun install

  generate:
    deps: [ecom:generate, cms:generate]

  watch:
    watch: true
    deps: [generate]

  generate-almost-prod-like-env:
    preconditions:
      - msg: "Please run this command in the root directory of the project"
        sh: "test -f ./Taskfile.yml && test -f ./package.json"
      - msg: "SHOP_NAME and ROOT_DOMAIN must not be empty"
        sh: "test -n $SHOP_NAME && test -n $ROOT_DOMAIN && test -n $NODE_ENV"
    requires:
      vars:
        - "ROOT_DOMAIN"
        - "SHOP_NAME"
        - "NODE_ENV"
    env:
      ROOT_DOMAIN: "{{.ROOT_DOMAIN}}"
      SHOP_NAME: "{{.SHOP_NAME}}"
      NODE_ENV: "{{.NODE_ENV}}"
    cmds:
      - bash ./ops/scripts/generate-almost-prod-like-env.sh

  generate-prod-env:
    preconditions:
      - msg: "Please run this command in the root directory of the project"
        sh: "test -f ./Taskfile.yml && test -f ./package.json"
      - msg: "SHOP_NAME and ROOT_DOMAIN must not be empty"
        sh: "test -n $SHOP_NAME && test -n $ROOT_DOMAIN && test -n $NODE_ENV"
    requires:
      vars:
        - "ROOT_DOMAIN"
        - "SHOP_NAME"
        - "NODE_ENV"
    env:
      ROOT_DOMAIN: "{{.ROOT_DOMAIN}}"
      SHOP_NAME: "{{.SHOP_NAME}}"
      NODE_ENV: "{{.NODE_ENV}}"
    cmds:
      - bash ./ops/scripts/generate-prod-env.sh

  build:
    preconditions:
      - bun version
    requires:
      vars:
        - "ROOT_DOMAIN"
        - "SHOP_NAME"
        - "NODE_ENV"
    env:
      ROOT_DOMAIN: "{{.ROOT_DOMAIN}}"
      SHOP_NAME: "{{.SHOP_NAME}}"
      NODE_ENV: "{{.NODE_ENV}}"
    deps: [generate-prod-env]
    cmds:
      - source .env
      - bun install
      - task ecom:generate -f
      - task tinacms:build -f
      - task cms:generate -f
      - task storefront:build -f
      - rm -rf ./fast-build/dist/
      - rm -rf ./fast-build/dist.tgz

      - mkdir -p ./fast-build/dist/storefront
      - cp -R apps/storefront/.next ./fast-build/dist/storefront
      - cp -R apps/tinacms/public ./fast-build/dist/storefront
      - cp -R apps/storefront/package.json ./fast-build/dist/storefront

      - mkdir -p ./fast-build/dist/tinacms
      - cp -R apps/tinacms/.next ./fast-build/dist/tinacms
      - cp -R apps/tinacms/public ./fast-build/dist/tinacms
      - cp -R apps/tinacms/content ./fast-build/dist/tinacms
      - cp -R apps/tinacms/package.json ./fast-build/dist/tinacms

      - rm -rf node_modules
      - bun install --production
      - mv node_modules ./fast-build/dist/node_modules

      - cd ./fast-build && tar czf ./dist.tgz ./dist && cd ..
      - rm -rf ./fast-build/dist

      - cd ..
      - rm -rf node_modules

  dev:
    deps: [storefront:dev, tinacms:dev]

  storefront-dev:prod:
    deps: [generate-almost-prod-like-env, storefront:dev:prod]

  tinacms-dev:prod:
    deps: [generate-almost-prod-like-env, tinacms:dev:prod]

  dev:prod:
    deps: [storefront-dev:prod, tinacms-dev:prod]

  deploy-debug:
    env:
      SHOP_NAME: puledro
    cmds:
      - kubectl -n w3yz-shop-$SHOP_NAME delete deployment storefront || true
      - MY_PERSONAL_GITHUB_TOKEN=(gh auth token) skaffold render -p shop | kubectl apply -f -

  deploy:
    requires:
      vars:
        - "SHOP_NAME"
    cmds:
      - MY_PERSONAL_GITHUB_TOKEN=(gh auth token) skaffold render -p shop | kubectl apply -f -
