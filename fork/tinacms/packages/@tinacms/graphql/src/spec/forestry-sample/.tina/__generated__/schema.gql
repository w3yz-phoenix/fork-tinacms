"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  stuff(relativePath: String): Stuff!
  stuffConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StuffFilter): StuffConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  author: AuthorFilter
  post: PostFilter
  stuff: StuffFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = AuthorAuthor | PostPost | StuffTemplate_1 | StuffTemplate_2 | StuffTemplate_3 | Page | Folder

type AuthorAuthorSocialMedia {
  platform: String
  handle: String
}

type AuthorAuthor implements Node & Document {
  name: String
  socialMedia: [AuthorAuthorSocialMedia]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Author = AuthorAuthor

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input AuthorAuthorSocialMediaFilter {
  platform: StringFilter
  handle: StringFilter
}

input AuthorAuthorFilter {
  name: StringFilter
  socialMedia: AuthorAuthorSocialMediaFilter
}

input AuthorFilter {
  author: AuthorAuthorFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

union PostPostAuthor = AuthorAuthor

type PostPost implements Node & Document {
  title: String
  body: String
  author: PostPostAuthor
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Post = PostPost

input PostPostAuthorFilter {
  author: AuthorFilter
}

input PostPostFilter {
  title: StringFilter
  body: StringFilter
  author: PostPostAuthorFilter
}

input PostFilter {
  post: PostPostFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type StuffTemplate_1 implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type StuffTemplate_2 implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type StuffTemplate_3 implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Stuff = StuffTemplate_1 | StuffTemplate_2 | StuffTemplate_3

input StuffTemplate_1Filter {
  title: StringFilter
}

input StuffTemplate_2Filter {
  title: StringFilter
}

input StuffTemplate_3Filter {
  title: StringFilter
}

input StuffFilter {
  template_1: StuffTemplate_1Filter
  template_2: StuffTemplate_2Filter
  template_3: StuffTemplate_3Filter
}

type StuffConnectionEdges {
  cursor: String!
  node: Stuff
}

type StuffConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StuffConnectionEdges]
}

type PageSeo {
  seoTitle: String
  ogImage: String
  ogDescription: String
}

type PageBlocksHero {
  description: String
  backgroundImage: String
}

type PageBlocksCta {
  ctaText: String
  ctaStyle: String
}

union PageBlocks = PageBlocksHero | PageBlocksCta

type Page implements Node & Document {
  title: String
  seo: PageSeo
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageSeoFilter {
  seoTitle: StringFilter
  ogImage: ImageFilter
  ogDescription: StringFilter
}

input PageBlocksHeroFilter {
  description: StringFilter
  backgroundImage: ImageFilter
}

input PageBlocksCtaFilter {
  ctaText: StringFilter
  ctaStyle: StringFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  cta: PageBlocksCtaFilter
}

input PageFilter {
  title: StringFilter
  seo: PageSeoFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateStuff(relativePath: String!, params: StuffMutation!): Stuff!
  createStuff(relativePath: String!, params: StuffMutation!): Stuff!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  author: AuthorMutation
  post: PostMutation
  stuff: StuffMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  author: AuthorMutation
  post: PostMutation
  stuff: StuffMutation
  page: PageMutation
}

input AuthorAuthorSocialMediaMutation {
  platform: String
  handle: String
}

input AuthorAuthorMutation {
  name: String
  socialMedia: [AuthorAuthorSocialMediaMutation]
}

input AuthorMutation {
  author: AuthorAuthorMutation
}

input PostPostMutation {
  title: String
  body: String
  author: String
}

input PostMutation {
  post: PostPostMutation
}

input StuffTemplate_1Mutation {
  title: String
}

input StuffTemplate_2Mutation {
  title: String
}

input StuffTemplate_3Mutation {
  title: String
}

input StuffMutation {
  template_1: StuffTemplate_1Mutation
  template_2: StuffTemplate_2Mutation
  template_3: StuffTemplate_3Mutation
}

input PageSeoMutation {
  seoTitle: String
  ogImage: String
  ogDescription: String
}

input PageBlocksHeroMutation {
  description: String
  backgroundImage: String
}

input PageBlocksCtaMutation {
  ctaText: String
  ctaStyle: String
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  cta: PageBlocksCtaMutation
}

input PageMutation {
  title: String
  seo: PageSeoMutation
  blocks: [PageBlocksMutation]
}
